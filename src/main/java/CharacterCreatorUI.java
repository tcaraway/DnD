import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Enumeration;

class CharacterCreatorUI extends javax.swing.JFrame {

    //new character to be created
    private DnDCharacter newCharacter;
    //number of proficiencies granted by inital choices before main prof selection
    private int initialProfsSelected;
    //number of languages granted by race choice
    private int initialLangsSelected;

    /**
     * Creates new form CharacterCreatorUI
     */
    private CharacterCreatorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup9 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup10 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup11 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup12 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup13 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup14 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup15 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup16 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup17 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup18 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup19 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup20 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup21 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup22 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup23 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup24 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup25 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup26 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup buttonGroup27 = new javax.swing.ButtonGroup();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        JButton startButton = new JButton();
        javax.swing.JPanel raceClassPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        JButton toStatPanelButton = new JButton();
        javax.swing.JScrollPane raceScrollPane = new javax.swing.JScrollPane();
        raceList = new JList();
        javax.swing.JScrollPane subRaceScrollPane = new javax.swing.JScrollPane();
        subRaceList = new JList();
        javax.swing.JScrollPane classScrollPane = new javax.swing.JScrollPane();
        classList = new JList();
        raceLabel = new javax.swing.JLabel();
        raceStatLabel1 = new javax.swing.JLabel();
        raceStatLabel2 = new javax.swing.JLabel();
        javax.swing.JPanel assignStatPanel = new javax.swing.JPanel();
        assignStat1 = new javax.swing.JLabel();
        assignStat2 = new javax.swing.JLabel();
        assignStat3 = new javax.swing.JLabel();
        assignStat4 = new javax.swing.JLabel();
        assignStat5 = new javax.swing.JLabel();
        assignStat6 = new javax.swing.JLabel();
        str1 = new JRadioButton();
        str2 = new JRadioButton();
        str3 = new JRadioButton();
        str4 = new JRadioButton();
        str5 = new JRadioButton();
        str6 = new JRadioButton();
        dex2 = new JRadioButton();
        dex3 = new JRadioButton();
        dex5 = new JRadioButton();
        dex4 = new JRadioButton();
        dex6 = new JRadioButton();
        dex1 = new JRadioButton();
        con1 = new JRadioButton();
        int1 = new JRadioButton();
        wis1 = new JRadioButton();
        cha5 = new JRadioButton();
        con2 = new JRadioButton();
        con3 = new JRadioButton();
        con4 = new JRadioButton();
        con5 = new JRadioButton();
        con6 = new JRadioButton();
        int2 = new JRadioButton();
        int3 = new JRadioButton();
        int4 = new JRadioButton();
        int5 = new JRadioButton();
        int6 = new JRadioButton();
        wis2 = new JRadioButton();
        wis3 = new JRadioButton();
        wis5 = new JRadioButton();
        wis4 = new JRadioButton();
        wis6 = new JRadioButton();
        cha2 = new JRadioButton();
        cha1 = new JRadioButton();
        cha3 = new JRadioButton();
        cha4 = new JRadioButton();
        cha6 = new JRadioButton();
        JButton toBackgroundAlignmentPanel = new JButton();
        javax.swing.JLabel jLabel47 = new javax.swing.JLabel();
        raceStatLabel3 = new javax.swing.JLabel();
        raceStatLabel4 = new javax.swing.JLabel();
        javax.swing.JPanel backgroundAlignmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        JRadioButton neutralGoodRadio = new JRadioButton();
        JRadioButton chaoticGoodRadio = new JRadioButton();
        JRadioButton lawfulNeutralRadio = new JRadioButton();
        JRadioButton trueNeutralRadio = new JRadioButton();
        JRadioButton chaoticNeutralRadio = new JRadioButton();
        JRadioButton lawfulEvilRadio = new JRadioButton();
        JRadioButton chaoticEvilRadio = new JRadioButton();
        JRadioButton lawfulGoodRadio = new JRadioButton();
        JRadioButton neutralEvilRadio = new JRadioButton();
        javax.swing.JScrollPane backgroundScrollPanel = new javax.swing.JScrollPane();
        backgroundList = new JList();
        JButton toSkillsPanelButton = new JButton();
        javax.swing.JPanel skillsPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        acrobaticsCheck = new JCheckBox();
        arcanaCheck = new JCheckBox();
        historyCheck = new JCheckBox();
        animalHandlingCheck = new JCheckBox();
        athleticsCheck = new JCheckBox();
        deceptionCheck = new JCheckBox();
        insightCheck = new JCheckBox();
        intimidationCheck = new JCheckBox();
        investigationCheck = new JCheckBox();
        medicineCheck = new JCheckBox();
        natureCheck = new JCheckBox();
        perceptionCheck = new JCheckBox();
        performanceCheck = new JCheckBox();
        persuasionCheck = new JCheckBox();
        religionCheck = new JCheckBox();
        sleightOfHandCheck = new JCheckBox();
        stealthCheck = new JCheckBox();
        survivalCheck = new JCheckBox();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        profAmountLabel = new javax.swing.JLabel();
        JButton toLanguagesPanel = new JButton();
        // Variables declaration - do not modify//GEN-BEGIN:variables
        javax.swing.JPanel humanHalfElfStatPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        variantStrCheck = new JCheckBox();
        variantDexCheck = new JCheckBox();
        variantConCheck = new JCheckBox();
        variantChaCheck = new JCheckBox();
        variantWisCheck = new JCheckBox();
        variantIntCheck = new JCheckBox();
        JButton toBackgroundAlignmentPanel2 = new JButton();
        javax.swing.JPanel languagePanel = new javax.swing.JPanel();
        commonCheck = new JCheckBox();
        dwarvishCheck = new JCheckBox();
        giantCheck = new JCheckBox();
        elvishCheck = new JCheckBox();
        gnomishCheck = new JCheckBox();
        orcCheck = new JCheckBox();
        halflingCheck = new JCheckBox();
        goblinCheck = new JCheckBox();
        primordialCheck = new JCheckBox();
        undercommonCheck = new JCheckBox();
        sylvanCheck = new JCheckBox();
        infernalCheck = new JCheckBox();
        deepspeechCheck = new JCheckBox();
        draconicCheck = new JCheckBox();
        celestialCheck = new JCheckBox();
        abyssalCheck = new JCheckBox();
        languageAmountLabel = new javax.swing.JLabel();
        JButton toNamePanelButton = new JButton();
        javax.swing.JLabel jLabel20 = new javax.swing.JLabel();
        javax.swing.JPanel clericDomainPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel13 = new javax.swing.JLabel();
        javax.swing.JScrollPane clericDomainScrollPane = new javax.swing.JScrollPane();
        domainList = new JList();
        clericArcanaCheck = new JCheckBox();
        clericHistoryCheck = new JCheckBox();
        clericNatureCheck = new JCheckBox();
        clericReligionCheck = new JCheckBox();
        clericAnimalHandlingRadio = new JRadioButton();
        clericSurvivalRadio = new JRadioButton();
        clericNatureRadio = new JRadioButton();
        JButton toStatPanelButton2 = new JButton();
        javax.swing.JPanel fightingStylePanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel14 = new javax.swing.JLabel();
        javax.swing.JScrollPane fightingStyleScrollPane = new javax.swing.JScrollPane();
        fightingStyleList = new JList();
        JButton toStatPanelButton3 = new JButton();
        javax.swing.JPanel sorcerousOriginPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel15 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel16 = new javax.swing.JLabel();
        draconicBloodlineRadio = new JRadioButton();
        wildMagicRadio = new JRadioButton();
        blackRadio = new JRadioButton();
        blueRadio = new JRadioButton();
        whiteRadio = new JRadioButton();
        brassRadio = new JRadioButton();
        bronzeRadio = new JRadioButton();
        silverRadio = new JRadioButton();
        goldRadio = new JRadioButton();
        greenRadio = new JRadioButton();
        redRadio = new JRadioButton();
        copperRadio = new JRadioButton();
        JButton toStatPanel4 = new JButton();
        javax.swing.JPanel favoredEnemyPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel17 = new javax.swing.JLabel();
        javax.swing.JScrollPane favoredEnemyScrollPane = new javax.swing.JScrollPane();
        favoredEnemyList = new JList();
        JButton toStatPanel5 = new JButton();
        javax.swing.JPanel otherworldlyPatronPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel18 = new javax.swing.JLabel();
        archFeyRadio = new JRadioButton();
        fiendRadio = new JRadioButton();
        greatOldOneRadio = new JRadioButton();
        JButton toStatPanel6 = new JButton();
        javax.swing.JPanel rogueExpertisePanel = new javax.swing.JPanel();
        javax.swing.JScrollPane expertiseScrollPanel1 = new javax.swing.JScrollPane();
        expertiseList1 = new JList();
        javax.swing.JLabel jLabel19 = new javax.swing.JLabel();
        javax.swing.JScrollPane expertiseScrollPanel2 = new javax.swing.JScrollPane();
        expertiseList2 = new JList();
        JButton toLanguagePanel2 = new JButton();
        javax.swing.JPanel namePanel = new javax.swing.JPanel();
        playerNameField = new javax.swing.JTextField();
        characterNameField = new javax.swing.JTextField();
        javax.swing.JLabel jLabel21 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel22 = new javax.swing.JLabel();
        JButton toCantripOrEquipmentPanel = new JButton();
        javax.swing.JPanel dwarfToolPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel23 = new javax.swing.JLabel();
        smithToolRadio = new JRadioButton();
        brewerSuppliesRadio = new JRadioButton();
        masonToolsRadio = new JRadioButton();
        JButton toNamePanel2 = new JButton();
        javax.swing.JPanel druidSpellPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel24 = new javax.swing.JLabel();
        druidcraftDruid = new JCheckBox();
        guidanceDruid = new JCheckBox();
        poisonSprayDruid = new JCheckBox();
        resistanceDruid = new JCheckBox();
        shillelaghDruid = new JCheckBox();
        mendingDruid = new JCheckBox();
        thornWhipDruid = new JCheckBox();
        produceFlameDruid = new JCheckBox();
        JButton toDruidEquipmentPanel = new JButton();
        javax.swing.JPanel druidEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel33 = new javax.swing.JLabel();
        woodenShieldDruid = new JRadioButton();
        simpleWeaponDruid1 = new JRadioButton();
        javax.swing.JScrollPane simpleWeaponDruidScroll1 = new javax.swing.JScrollPane();
        simpleWeaponDruidList1 = new JList();
        javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();
        scimitarDruid = new JRadioButton();
        simpleWeaponDruid2 = new JRadioButton();
        javax.swing.JScrollPane simpleWeaponDruidScroll2 = new javax.swing.JScrollPane();
        simpleWeaponDruidList2 = new JList();
        JButton toMiscFromDruid = new JButton();
        javax.swing.JPanel clericSpellPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel25 = new javax.swing.JLabel();
        guidanceCleric = new JCheckBox();
        lightCleric = new JCheckBox();
        mendingCleric = new JCheckBox();
        resistanceCleric = new JCheckBox();
        sacredFlameCleric = new JCheckBox();
        spareTheDyingCleric = new JCheckBox();
        thaumaturgyCleric = new JCheckBox();
        JButton toClericEquipmentPanel = new JButton();
        javax.swing.JPanel wizardSpellPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel26 = new javax.swing.JLabel();
        acidSplashWizard = new JCheckBox();
        bladeWardWizard = new JCheckBox();
        chillTouchWizard = new JCheckBox();
        dancingLightsWizard = new JCheckBox();
        mageHandWizard = new JCheckBox();
        lightWizard = new JCheckBox();
        friendsWizard = new JCheckBox();
        fireBoltWizard = new JCheckBox();
        trueStrikeWizard = new JCheckBox();
        rayOfFrostWizard = new JCheckBox();
        shockingGraspWizard = new JCheckBox();
        prestidigitationWizard = new JCheckBox();
        poisonSprayWizard = new JCheckBox();
        minorIllusionWizard = new JCheckBox();
        messageWizard = new JCheckBox();
        mendingWizard = new JCheckBox();
        JButton toWizardEquipmentPanel = new JButton();
        javax.swing.JPanel wizardEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel37 = new javax.swing.JLabel();
        quarterstaffWizard = new JRadioButton();
        daggerWizard = new JRadioButton();
        javax.swing.JSeparator jSeparator7 = new javax.swing.JSeparator();
        compWizard = new JRadioButton();
        arcaneFocusWizard = new JRadioButton();
        javax.swing.JSeparator jSeparator8 = new javax.swing.JSeparator();
        scholarPackWizard = new JRadioButton();
        explorerPackWizard = new JRadioButton();
        JButton toMiscFromWizard = new JButton();
        javax.swing.JPanel warlockSpellPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel27 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel28 = new javax.swing.JLabel();
        bladeWardWarlock = new JCheckBox();
        eldritchBlastWarlock = new JCheckBox();
        friendsWarlock = new JCheckBox();
        chillTouchWarlock = new JCheckBox();
        prestidigitationWarlock = new JCheckBox();
        minorIllusionWarlock = new JCheckBox();
        mageHandWarlock = new JCheckBox();
        poisonSprayWarlock = new JCheckBox();
        trueStrikeWarlock = new JCheckBox();
        illusoryScriptWarlock = new JCheckBox();
        hellishRebukeWarlock = new JCheckBox();
        comprehendLanguagesWarlock = new JCheckBox();
        armsOfHadarWarlock = new JCheckBox();
        armorOfAgathysWarlock = new JCheckBox();
        charmPersonWarlock = new JCheckBox();
        expeditiousRetreatWarlock = new JCheckBox();
        unseenServantWarlock = new JCheckBox();
        hexWarlock = new JCheckBox();
        protectionWarlock = new JCheckBox();
        witchBoltWarlock = new JCheckBox();
        JButton toWarlockEquipmentPanel = new JButton();
        patronSpell1 = new JCheckBox();
        patronSpell2 = new JCheckBox();
        javax.swing.JPanel warlockEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel42 = new javax.swing.JLabel();
        lightCrossbowWarlock = new JRadioButton();
        simpleWeaponWarlock = new JRadioButton();
        javax.swing.JSeparator jSeparator18 = new javax.swing.JSeparator();
        arcaneFocusWarlock = new JRadioButton();
        componentPouchWarlock = new JRadioButton();
        javax.swing.JSeparator jSeparator19 = new javax.swing.JSeparator();
        dungeoneerPackWarlock = new JRadioButton();
        scholarPackWarlock = new JRadioButton();
        JButton toMiscFromWarlock = new JButton();
        javax.swing.JScrollPane jScrollPane8 = new javax.swing.JScrollPane();
        simpleWeaponWarlockList = new JList();
        javax.swing.JPanel bardSpellPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel29 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel30 = new javax.swing.JLabel();
        bladeWardBard = new JCheckBox();
        mendingBard = new JCheckBox();
        dancingLightsBard = new JCheckBox();
        messageBard = new JCheckBox();
        friendsBard = new JCheckBox();
        minorIllusionBard = new JCheckBox();
        lightBard = new JCheckBox();
        prestidigitationBard = new JCheckBox();
        trueStrikeBard = new JCheckBox();
        mageHandBard = new JCheckBox();
        viciousMockeryBard = new JCheckBox();
        animalFriendshipBard = new JCheckBox();
        baneBard = new JCheckBox();
        charmPersonBard = new JCheckBox();
        comprehendLanguagesBard = new JCheckBox();
        cureWoundsBard = new JCheckBox();
        detectMagicBard = new JCheckBox();
        disguiseSelfBard = new JCheckBox();
        identifyBard = new JCheckBox();
        illusoryScriptBard = new JCheckBox();
        heroismBard = new JCheckBox();
        healingWordBard = new JCheckBox();
        featherFallBard = new JCheckBox();
        faerieFireBard = new JCheckBox();
        dissonantWhispersBard = new JCheckBox();
        thunderwaveBard = new JCheckBox();
        unseenServantBard = new JCheckBox();
        tashasHideousLaughterBard = new JCheckBox();
        speakWithAnimalsBard = new JCheckBox();
        sleepBard = new JCheckBox();
        silentImageBard = new JCheckBox();
        longstriderBard = new JCheckBox();
        JButton toBardEquipmentPanel = new JButton();
        javax.swing.JPanel bardEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel39 = new javax.swing.JLabel();
        diplomatPackBard = new JRadioButton();
        entertainerPackBard = new JRadioButton();
        javax.swing.JSeparator jSeparator11 = new javax.swing.JSeparator();
        rapierBard = new JRadioButton();
        simpleWeaponBard = new JRadioButton();
        longswordBard = new JRadioButton();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        simpleWeaponBardList = new JList();
        javax.swing.JSeparator jSeparator12 = new javax.swing.JSeparator();
        luteBard = new JRadioButton();
        instrumentBard = new JRadioButton();
        javax.swing.JScrollPane jScrollPane3 = new javax.swing.JScrollPane();
        instrumentBardList = new JList();
        JButton toMiscFromBard = new JButton();
        javax.swing.JPanel sorcererSpellPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel31 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel32 = new javax.swing.JLabel();
        acidSplashSorcerer = new JCheckBox();
        bladeWardSorcerer = new JCheckBox();
        chillTouchSorcerer = new JCheckBox();
        dancingLightsSorcerer = new JCheckBox();
        fireBoltSorcerer = new JCheckBox();
        friendsSorcerer = new JCheckBox();
        lightSorcerer = new JCheckBox();
        mageHandSorcerer = new JCheckBox();
        mendingSorcerer = new JCheckBox();
        messageSorcerer = new JCheckBox();
        minorIllusionSorcerer = new JCheckBox();
        poisonSpraySorcerer = new JCheckBox();
        prestidigitationSorcerer = new JCheckBox();
        rayOfFrostSorcerer = new JCheckBox();
        shockingGraspSorcerer = new JCheckBox();
        trueStrikeSorcerer = new JCheckBox();
        burningHandsSorcerer = new JCheckBox();
        charmPersonSorcerer = new JCheckBox();
        chromaticOrbSorcerer = new JCheckBox();
        colorSpraySorcerer = new JCheckBox();
        comprehendLanguagesSorcerer = new JCheckBox();
        detectMagicSorcerer = new JCheckBox();
        disguiseSelfSorcerer = new JCheckBox();
        expeditiousRetreatSorcerer = new JCheckBox();
        falseLifeSorcerer = new JCheckBox();
        featherFallSorcerer = new JCheckBox();
        fogCloudSorcerer = new JCheckBox();
        jumpSorcerer = new JCheckBox();
        mageArmorSorcerer = new JCheckBox();
        magicMissileSorcerer = new JCheckBox();
        rayOfSicknessSorcerer = new JCheckBox();
        shieldSorcerer = new JCheckBox();
        silentImageSorcerer = new JCheckBox();
        JButton toSorcererEquipmentPanel = new JButton();
        javax.swing.JPanel sorcererEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel41 = new javax.swing.JLabel();
        lightCrossbowSorcerer = new JRadioButton();
        simpleWeaponSorcerer = new JRadioButton();
        javax.swing.JScrollPane jScrollPane7 = new javax.swing.JScrollPane();
        simpleWeaponSorcererList = new JList();
        javax.swing.JSeparator jSeparator16 = new javax.swing.JSeparator();
        componentPouchSorcerer = new JRadioButton();
        arcaneFocusSorcerer = new JRadioButton();
        javax.swing.JSeparator jSeparator17 = new javax.swing.JSeparator();
        explorerPackSorcerer = new JRadioButton();
        dungeoneerPackSorcerer = new JRadioButton();
        JButton toMiscFromSorcerer = new JButton();
        javax.swing.JPanel barbarianEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel35 = new javax.swing.JLabel();
        greataxeBarbarian = new JRadioButton();
        martialWeaponBarbarian = new JRadioButton();
        javax.swing.JScrollPane martialWeaponBarbarianScroll = new javax.swing.JScrollPane();
        martialWeaponBarbarianList = new JList();
        javax.swing.JSeparator jSeparator5 = new javax.swing.JSeparator();
        handaxeBarbarian = new JRadioButton();
        simpleWeaponBarbarian = new JRadioButton();
        javax.swing.JScrollPane simpleWeaponBarbarianScroll = new javax.swing.JScrollPane();
        simpleWeaponBarbarianList = new JList();
        JButton toMiscFromBarbarian = new JButton();
        javax.swing.JPanel fighterEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel40 = new javax.swing.JLabel();
        chainMailFighter = new JRadioButton();
        leatherArmorFighter = new JRadioButton();
        lightCrossbowFighter = new JRadioButton();
        handaxeFighter = new JRadioButton();
        dungeoneerPackFighter = new JRadioButton();
        explorerPackFighter = new JRadioButton();
        javax.swing.JSeparator jSeparator13 = new javax.swing.JSeparator();
        javax.swing.JSeparator jSeparator14 = new javax.swing.JSeparator();
        javax.swing.JSeparator jSeparator15 = new javax.swing.JSeparator();
        shieldFighter = new JRadioButton();
        javax.swing.JScrollPane jScrollPane4 = new javax.swing.JScrollPane();
        martialWeaponFighterList1 = new JList();
        martialWeaponsFighter = new JRadioButton();
        javax.swing.JScrollPane jScrollPane5 = new javax.swing.JScrollPane();
        martialWeaponFighterList2 = new JList();
        javax.swing.JScrollPane jScrollPane6 = new javax.swing.JScrollPane();
        martialWeaponFighterList3 = new JList();
        JButton toMiscFromFighter = new JButton();
        javax.swing.JPanel rangerEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel43 = new javax.swing.JLabel();
        leatherArmorRanger = new JRadioButton();
        scaleMailRanger = new JRadioButton();
        dungeoneerPackRanger = new JRadioButton();
        explorerPackRanger = new JRadioButton();
        javax.swing.JSeparator jSeparator20 = new javax.swing.JSeparator();
        javax.swing.JSeparator jSeparator21 = new javax.swing.JSeparator();
        shortswordsRanger = new JRadioButton();
        simpleWeaponsRanger = new JRadioButton();
        javax.swing.JScrollPane jScrollPane9 = new javax.swing.JScrollPane();
        simpleWeaponRangerList1 = new JList();
        javax.swing.JScrollPane jScrollPane10 = new javax.swing.JScrollPane();
        simpleWeaponRangerList2 = new JList();
        JButton toMiscFromRanger = new JButton();
        javax.swing.JPanel paladinEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel44 = new javax.swing.JLabel();
        explorerPackPaladin = new JRadioButton();
        priestPackPaladin = new JRadioButton();
        javax.swing.JSeparator jSeparator22 = new javax.swing.JSeparator();
        javelinPaladin = new JRadioButton();
        simpleWeaponPaladin = new JRadioButton();
        javax.swing.JScrollPane jScrollPane11 = new javax.swing.JScrollPane();
        simpleWeaponPaladinList = new JList();
        javax.swing.JSeparator jSeparator23 = new javax.swing.JSeparator();
        martialWeaponPaladin2 = new JRadioButton();
        martialWeaponPaladin1 = new JRadioButton();
        javax.swing.JScrollPane jScrollPane12 = new javax.swing.JScrollPane();
        martialWeaponPaladinList1 = new JList();
        javax.swing.JScrollPane jScrollPane13 = new javax.swing.JScrollPane();
        martialWeaponPaladinList2 = new JList();
        javax.swing.JScrollPane jScrollPane14 = new javax.swing.JScrollPane();
        martialWeaponPaladinList3 = new JList();
        JButton toMiscFromPaladin = new JButton();
        javax.swing.JPanel rogueEquipmentPanel = new javax.swing.JPanel();
        explorerPackRogue = new JRadioButton();
        burglerPackRogue = new JRadioButton();
        javax.swing.JSeparator jSeparator9 = new javax.swing.JSeparator();
        shortbowRogue = new JRadioButton();
        shortswordRogue2 = new JRadioButton();
        javax.swing.JSeparator jSeparator10 = new javax.swing.JSeparator();
        shortswordRogue = new JRadioButton();
        rapierRogue = new JRadioButton();
        javax.swing.JLabel jLabel38 = new javax.swing.JLabel();
        JButton toMiscFromRogue = new JButton();
        dungeoneerPackRogue = new JRadioButton();
        javax.swing.JPanel monkEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel36 = new javax.swing.JLabel();
        shortswordMonk = new JRadioButton();
        simpleWeaponMonk = new JRadioButton();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        simpleWeaponMonkList = new JList();
        javax.swing.JSeparator jSeparator6 = new javax.swing.JSeparator();
        dungeoneerPackMonk = new JRadioButton();
        explorersPackMonk = new JRadioButton();
        JButton toMiscFromMonk = new JButton();
        javax.swing.JPanel miscellaneousPanel = new javax.swing.JPanel();
        finalizeButton = new JButton();
        saveCharacterFile = new JButton();
        javax.swing.JPanel highElfWizardCantripPanel = new javax.swing.JPanel();
        acidSplashWizard1 = new JCheckBox();
        bladeWardWizard1 = new JCheckBox();
        chillTouchWizard1 = new JCheckBox();
        dancingLightsWizard1 = new JCheckBox();
        mageHandWizard1 = new JCheckBox();
        lightWizard1 = new JCheckBox();
        friendsWizard1 = new JCheckBox();
        fireBoltWizard1 = new JCheckBox();
        mendingWizard1 = new JCheckBox();
        messageWizard1 = new JCheckBox();
        minorIllusionWizard1 = new JCheckBox();
        poisonSprayWizard1 = new JCheckBox();
        trueStrikeWizard1 = new JCheckBox();
        shockingGraspWizard1 = new JCheckBox();
        rayOfFrostWizard1 = new JCheckBox();
        prestidigitationWizard1 = new JCheckBox();
        javax.swing.JLabel jLabel45 = new javax.swing.JLabel();
        JButton fromHighElfPanel = new JButton();
        javax.swing.JPanel clericEquipmentPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel34 = new javax.swing.JLabel();
        maceCleric = new JRadioButton();
        warhammerCleric = new JRadioButton();
        javax.swing.JSeparator jSeparator2 = new javax.swing.JSeparator();
        scaleMailCleric = new JRadioButton();
        leatherArmorCleric = new JRadioButton();
        chainMailCleric = new JRadioButton();
        javax.swing.JSeparator jSeparator3 = new javax.swing.JSeparator();
        lightCrossBowCleric = new JRadioButton();
        simpleWeaponCleric = new JRadioButton();
        javax.swing.JScrollPane simpleWeaponClericScroll = new javax.swing.JScrollPane();
        simpleWeaponClericList = new JList();
        javax.swing.JSeparator jSeparator4 = new javax.swing.JSeparator();
        priestPackCleric = new JRadioButton();
        explorerPackCleric = new JRadioButton();
        JButton toMiscFromCleric = new JButton();
        javax.swing.JPanel statPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        firstStatLabel = new javax.swing.JLabel();
        secondStatLabel = new javax.swing.JLabel();
        thirdStatLabel = new javax.swing.JLabel();
        fourthStatLabel = new javax.swing.JLabel();
        fifthStatLabel = new javax.swing.JLabel();
        sixthStatLabel = new javax.swing.JLabel();
        JButton toAssignStatPanel = new JButton();
        rollStatsButton = new JButton();
        JRadioButton defaultArray = new JRadioButton();
        JRadioButton rollForScores = new JRadioButton();
        javax.swing.JLabel jLabel46 = new javax.swing.JLabel();
        manualEntry = new JRadioButton();
        firstStatField = new javax.swing.JTextField();
        secondStatField = new javax.swing.JTextField();
        thirdStatField = new javax.swing.JTextField();
        fourthStatField = new javax.swing.JTextField();
        fifthStatField = new javax.swing.JTextField();
        sixthStatField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DnD 5th ed. Quick Character Creator");

        mainPanel.setLayout(new CardLayout());

        startButton.setText("Create New Level-1 Character");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed();
            }
        });
        mainPanel.add(startButton, "card2");

        jLabel2.setText("Choose your race:");

        jLabel3.setText("Choose your class:");

        toStatPanelButton.setText("next");
        toStatPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toStatPanelButtonActionPerformed();
            }
        });

        raceList.setModel(new javax.swing.AbstractListModel() {
            final String[] strings = {"Hill Dwarf", "Mountain Dwarf", "High Elf", "Wood Elf", "Dark Elf (Drow)", "Lightfoot Halfling", "Stout Halfling", "Human", "Human (Variant)", "Dragonborn (Black)", "Dragonborn (Blue)", "Dragonborn (Green)", "Dragonborn (Red)", "Dragonborn (White)", "Dragonborn (Brass)", "Dragonborn (Bronze)", "Dragonborn (Copper)", "Dragonborn (Gold)", "Dragonborn (Silver)", "Forest Gnome", "Rock Gnome", "Half-Elf", "Half-Orc", "Tiefling"};
            //final String[] strings = {"Dwarf", "Elf", "Halfling", "Human", "Human (Variant)", "Dragonborn", "Gnome", "Half-Elf", "Half-Orc", "Tiefling"};

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        raceList.addListSelectionListener(this::raceListValueChanged);
        raceScrollPane.setViewportView(raceList);

        classList.setModel(new javax.swing.AbstractListModel() {
            final String[] strings = {"Barbarian", "Bard", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard"};

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        classScrollPane.setViewportView(classList);

        javax.swing.GroupLayout raceClassPanelLayout = new javax.swing.GroupLayout(raceClassPanel);
        raceClassPanel.setLayout(raceClassPanelLayout);
        raceClassPanelLayout.setHorizontalGroup(
                raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(raceClassPanelLayout.createSequentialGroup()
                                .addContainerGap(573, Short.MAX_VALUE)
                                .addComponent(toStatPanelButton)
                                .addGap(123, 123, 123))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, raceClassPanelLayout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addGroup(raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(raceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(raceStatLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(raceStatLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(51, 51, 51)
                                .addGroup(raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(raceClassPanelLayout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(jLabel2))
                                        .addComponent(raceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(56, 56, 56)
                                .addGroup(raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(classScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(204, 204, 204))
        );
        raceClassPanelLayout.setVerticalGroup(
                raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(raceClassPanelLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3))
                                .addGap(4, 4, 4)
                                .addComponent(raceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(raceClassPanelLayout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(raceStatLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(raceStatLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(classScrollPane)
                                                .addComponent(raceScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addComponent(toStatPanelButton)
                                .addContainerGap(64, Short.MAX_VALUE))
        );

        mainPanel.add(raceClassPanel, "raceClassPanel");

        assignStat1.setText("jLabel5");

        assignStat2.setText("jLabel6");

        assignStat3.setText("jLabel7");

        assignStat4.setText("jLabel8");

        assignStat5.setText("jLabel9");

        assignStat6.setText("jLabel10");

        buttonGroup1.add(str1);
        str1.setText("Str");

        buttonGroup2.add(str2);
        str2.setText("Str");

        buttonGroup3.add(str3);
        str3.setText("Str");

        buttonGroup4.add(str4);
        str4.setText("Str");

        buttonGroup5.add(str5);
        str5.setText("Str");

        buttonGroup6.add(str6);
        str6.setText("Str");

        buttonGroup1.add(dex1);
        dex1.setText("Dex");

        buttonGroup2.add(dex2);
        dex2.setText("Dex");

        buttonGroup3.add(dex3);
        dex3.setText("Dex");

        buttonGroup4.add(dex4);
        dex4.setText("Dex");

        buttonGroup5.add(dex5);
        dex5.setText("Dex");

        buttonGroup6.add(dex6);
        dex6.setText("Dex");

        buttonGroup1.add(con1);
        con1.setText("Con");

        buttonGroup2.add(con2);
        con2.setText("Con");

        buttonGroup3.add(con3);
        con3.setText("Con");

        buttonGroup4.add(con4);
        con4.setText("Con");

        buttonGroup5.add(con5);
        con5.setText("Con");

        buttonGroup6.add(con6);
        con6.setText("Con");

        buttonGroup1.add(int1);
        int1.setText("Int");

        buttonGroup2.add(int2);
        int2.setText("Int");

        buttonGroup3.add(int3);
        int3.setText("Int");

        buttonGroup4.add(int4);
        int4.setText("Int");

        buttonGroup5.add(int5);
        int5.setText("Int");

        buttonGroup6.add(int6);
        int6.setText("Int");

        buttonGroup1.add(wis1);
        wis1.setText("Wis");

        buttonGroup2.add(wis2);
        wis2.setText("Wis");

        buttonGroup3.add(wis3);
        wis3.setText("Wis");

        buttonGroup4.add(wis4);
        wis4.setText("Wis");

        buttonGroup5.add(wis5);
        wis5.setText("Wis");

        buttonGroup6.add(wis6);
        wis6.setText("Wis");

        buttonGroup1.add(cha1);
        cha1.setText("Cha");

        buttonGroup2.add(cha2);
        cha2.setText("Cha");

        buttonGroup3.add(cha3);
        cha3.setText("Cha");

        buttonGroup4.add(cha4);
        cha4.setText("Cha");

        buttonGroup5.add(cha5);
        cha5.setText("Cha");

        buttonGroup6.add(cha6);
        cha6.setText("Cha");

        toBackgroundAlignmentPanel.setText("Next");
        toBackgroundAlignmentPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toBackgroundAlignmentPanelActionPerformed();
            }
        });

        jLabel47.setText("Racial Bonuses:");

        raceStatLabel3.setText("jLabel48");

        raceStatLabel4.setText("jLabel48");

        javax.swing.GroupLayout assignStatPanelLayout = new javax.swing.GroupLayout(assignStatPanel);
        assignStatPanel.setLayout(assignStatPanelLayout);
        assignStatPanelLayout.setHorizontalGroup(
                assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel47)
                                        .addComponent(raceStatLabel3)
                                        .addComponent(raceStatLabel4))
                                .addGap(65, 65, 65)
                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(assignStat5)
                                                        .addComponent(assignStat6))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                                .addComponent(str6)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(dex6))
                                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                                .addComponent(str5)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(dex5)
                                                                .addGap(0, 0, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                                .addComponent(con6)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(int6)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(wis6)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(cha6))
                                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                                .addComponent(con5)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(int5)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(wis5)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(cha5))))
                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                .addComponent(assignStat4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(str4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dex4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(con4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(int4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(wis4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cha4))
                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                .addComponent(assignStat3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(str3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dex3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(con3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(int3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(wis3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cha3))
                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                .addComponent(assignStat1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(str1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dex1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(con1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(int1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(wis1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cha1))
                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                .addComponent(assignStat2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(str2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dex2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(con2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(int2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(wis2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cha2)))
                                .addContainerGap(151, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, assignStatPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(toBackgroundAlignmentPanel)
                                .addGap(116, 116, 116))
        );
        assignStatPanelLayout.setVerticalGroup(
                assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(assignStat1)
                                        .addComponent(str1)
                                        .addComponent(dex1)
                                        .addComponent(con1)
                                        .addComponent(int1)
                                        .addComponent(wis1)
                                        .addComponent(cha1)
                                        .addComponent(jLabel47))
                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(assignStat2)
                                                        .addComponent(str2)
                                                        .addComponent(dex2)
                                                        .addComponent(con2)
                                                        .addComponent(int2)
                                                        .addComponent(wis2)
                                                        .addComponent(cha2))
                                                .addGap(18, 18, 18)
                                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(assignStat3)
                                                        .addComponent(str3)
                                                        .addComponent(dex3)
                                                        .addComponent(con3)
                                                        .addComponent(int3)
                                                        .addComponent(wis3)
                                                        .addComponent(cha3))
                                                .addGap(18, 18, 18)
                                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(assignStat4)
                                                        .addComponent(str4)
                                                        .addComponent(dex4)
                                                        .addComponent(con4)
                                                        .addComponent(int4)
                                                        .addComponent(wis4)
                                                        .addComponent(cha4))
                                                .addGap(18, 18, 18)
                                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(assignStat5)
                                                        .addComponent(str5)
                                                        .addComponent(dex5)
                                                        .addComponent(con5)
                                                        .addComponent(int5)
                                                        .addComponent(wis5)
                                                        .addComponent(cha5))
                                                .addGap(18, 18, 18)
                                                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(assignStat6)
                                                        .addComponent(str6)
                                                        .addComponent(dex6)
                                                        .addComponent(con6)
                                                        .addComponent(int6)
                                                        .addComponent(wis6)
                                                        .addComponent(cha6))
                                                .addGap(18, 18, 18)
                                                .addComponent(toBackgroundAlignmentPanel))
                                        .addGroup(assignStatPanelLayout.createSequentialGroup()
                                                .addGap(4, 4, 4)
                                                .addComponent(raceStatLabel3)
                                                .addGap(10, 10, 10)
                                                .addComponent(raceStatLabel4)))
                                .addContainerGap(80, Short.MAX_VALUE))
        );

        mainPanel.add(assignStatPanel, "assignStatPanel");

        jLabel5.setText("Choose alignment:");

        jLabel6.setText("Choose Background:");

        buttonGroup7.add(neutralGoodRadio);
        neutralGoodRadio.setText("Neutral Good");

        buttonGroup7.add(chaoticGoodRadio);
        chaoticGoodRadio.setText("Chaotic Good");

        buttonGroup7.add(lawfulNeutralRadio);
        lawfulNeutralRadio.setText("Lawful Neutral");

        buttonGroup7.add(trueNeutralRadio);
        trueNeutralRadio.setText("True Neutral");

        buttonGroup7.add(chaoticNeutralRadio);
        chaoticNeutralRadio.setText("Chaotic Neutral");

        buttonGroup7.add(lawfulEvilRadio);
        lawfulEvilRadio.setText("Lawful Evil");

        buttonGroup7.add(chaoticEvilRadio);
        chaoticEvilRadio.setText("Chaotic Evil");

        buttonGroup7.add(lawfulGoodRadio);
        lawfulGoodRadio.setText("Lawful Good");

        buttonGroup7.add(neutralEvilRadio);
        neutralEvilRadio.setText("Neutral Evil");

        backgroundList.setModel(new javax.swing.AbstractListModel() {
            final String[] strings = {"Acolyte", "Charlatan", "Criminal", "Entertainer", "Folk Hero", "Guild Artisan", "Hermit", "Noble", "Outlander", "Sage", "Sailor", "Soldier", "Urchin", " "};

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        backgroundScrollPanel.setViewportView(backgroundList);

        toSkillsPanelButton.setText("Next");
        toSkillsPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toSkillsPanelButtonActionPerformed();
            }
        });

        javax.swing.GroupLayout backgroundAlignmentPanelLayout = new javax.swing.GroupLayout(backgroundAlignmentPanel);
        backgroundAlignmentPanel.setLayout(backgroundAlignmentPanelLayout);
        backgroundAlignmentPanelLayout.setHorizontalGroup(
                backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel6))
                                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                                .addGap(35, 35, 35)
                                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel5)
                                                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundAlignmentPanelLayout.createSequentialGroup()
                                                                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(lawfulNeutralRadio)
                                                                                        .addComponent(lawfulEvilRadio))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                                                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                                                                .addComponent(lawfulGoodRadio)
                                                                                .addGap(23, 23, 23)))
                                                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(neutralGoodRadio)
                                                                        .addComponent(neutralEvilRadio)
                                                                        .addComponent(trueNeutralRadio))))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                                                .addComponent(chaoticEvilRadio)
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                                .addComponent(chaoticNeutralRadio))
                                                                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                                                                .addComponent(chaoticGoodRadio)
                                                                                .addGap(0, 0, Short.MAX_VALUE)))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(backgroundScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(211, 211, 211))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundAlignmentPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(toSkillsPanelButton)
                                .addGap(132, 132, 132))
        );
        backgroundAlignmentPanelLayout.setVerticalGroup(
                backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6))
                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(backgroundScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lawfulGoodRadio)
                                                        .addComponent(neutralGoodRadio)
                                                        .addComponent(chaoticGoodRadio))
                                                .addGap(33, 33, 33)
                                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lawfulNeutralRadio)
                                                        .addComponent(trueNeutralRadio)
                                                        .addComponent(chaoticNeutralRadio))
                                                .addGap(41, 41, 41)
                                                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lawfulEvilRadio)
                                                        .addComponent(neutralEvilRadio)
                                                        .addComponent(chaoticEvilRadio))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toSkillsPanelButton)
                                .addContainerGap(84, Short.MAX_VALUE))
        );

        mainPanel.add(backgroundAlignmentPanel, "backgroundAlignmentPanel");

        jLabel7.setText("Choose Proficiencies:");

        acrobaticsCheck.setText("Acrobatics");

        arcanaCheck.setText("Arcana");

        historyCheck.setText("History");

        animalHandlingCheck.setText("Animal Handling");

        athleticsCheck.setText("Athletics");

        deceptionCheck.setText("Deception");

        insightCheck.setText("Insight");

        intimidationCheck.setText("Intimidation");

        investigationCheck.setText("Investigation");

        medicineCheck.setText("Medicine");

        natureCheck.setText("Nature");

        perceptionCheck.setText("Perception");

        performanceCheck.setText("Performance");

        persuasionCheck.setText("Persuasion");

        religionCheck.setText("Religion");

        sleightOfHandCheck.setText("Sleight of Hand");

        stealthCheck.setText("Stealth");

        survivalCheck.setText("Survival");

        jLabel8.setForeground(new Color(255, 0, 0));
        jLabel8.setText("Skills in RED are proficiencies given by your previous choices");

        jLabel9.setText("Select this many:");

        profAmountLabel.setText("jLabel10");

        toLanguagesPanel.setText("Next");
        toLanguagesPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toLanguagesPanelActionPerformed();
            }
        });

        javax.swing.GroupLayout skillsPanelLayout = new javax.swing.GroupLayout(skillsPanel);
        skillsPanel.setLayout(skillsPanelLayout);
        skillsPanelLayout.setHorizontalGroup(
                skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(skillsPanelLayout.createSequentialGroup()
                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(skillsPanelLayout.createSequentialGroup()
                                                .addGap(300, 300, 300)
                                                .addComponent(jLabel7))
                                        .addGroup(skillsPanelLayout.createSequentialGroup()
                                                .addGap(174, 174, 174)
                                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(skillsPanelLayout.createSequentialGroup()
                                                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(animalHandlingCheck)
                                                                        .addComponent(acrobaticsCheck)
                                                                        .addComponent(arcanaCheck)
                                                                        .addComponent(athleticsCheck)
                                                                        .addComponent(deceptionCheck)
                                                                        .addComponent(historyCheck))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(intimidationCheck)
                                                                        .addComponent(investigationCheck)
                                                                        .addComponent(insightCheck)
                                                                        .addComponent(medicineCheck)
                                                                        .addComponent(natureCheck)
                                                                        .addComponent(perceptionCheck))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(survivalCheck)
                                                                        .addComponent(stealthCheck)
                                                                        .addComponent(sleightOfHandCheck)
                                                                        .addComponent(religionCheck)
                                                                        .addComponent(persuasionCheck)
                                                                        .addComponent(performanceCheck)))
                                                        .addComponent(jLabel8)))
                                        .addGroup(skillsPanelLayout.createSequentialGroup()
                                                .addGap(284, 284, 284)
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(profAmountLabel)))
                                .addContainerGap(193, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, skillsPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(toLanguagesPanel)
                                .addGap(125, 125, 125))
        );
        skillsPanelLayout.setVerticalGroup(
                skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(skillsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel9)
                                        .addComponent(profAmountLabel))
                                .addGap(18, 18, 18)
                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(acrobaticsCheck)
                                        .addComponent(insightCheck)
                                        .addComponent(performanceCheck))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(persuasionCheck)
                                        .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(animalHandlingCheck)
                                                .addComponent(intimidationCheck)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(arcanaCheck)
                                        .addComponent(investigationCheck)
                                        .addComponent(religionCheck))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(athleticsCheck)
                                        .addComponent(medicineCheck)
                                        .addComponent(sleightOfHandCheck))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(deceptionCheck)
                                        .addComponent(natureCheck)
                                        .addComponent(stealthCheck))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(historyCheck)
                                        .addComponent(perceptionCheck)
                                        .addComponent(survivalCheck))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(toLanguagesPanel)
                                .addGap(49, 49, 49))
        );

        mainPanel.add(skillsPanel, "skillsPanel");

        jLabel10.setText("Select two stats to increase by 1:");

        variantStrCheck.setText("Strength");

        variantDexCheck.setText("Dexterity");

        variantConCheck.setText("Constitution");

        variantChaCheck.setText("Charisma");

        variantWisCheck.setText("Wisdom");

        variantIntCheck.setText("Intelligence");

        toBackgroundAlignmentPanel2.setText("Next");
        toBackgroundAlignmentPanel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toBackgroundAlignmentPanel2ActionPerformed();
            }
        });

        javax.swing.GroupLayout HumanHalfElfStatPanelLayout = new javax.swing.GroupLayout(humanHalfElfStatPanel);
        humanHalfElfStatPanel.setLayout(HumanHalfElfStatPanelLayout);
        HumanHalfElfStatPanelLayout.setHorizontalGroup(
                HumanHalfElfStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HumanHalfElfStatPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(toBackgroundAlignmentPanel2)
                                .addGap(148, 148, 148))
                        .addGroup(HumanHalfElfStatPanelLayout.createSequentialGroup()
                                .addGap(259, 259, 259)
                                .addGroup(HumanHalfElfStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel10)
                                        .addGroup(HumanHalfElfStatPanelLayout.createSequentialGroup()
                                                .addGroup(HumanHalfElfStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(variantDexCheck)
                                                        .addComponent(variantConCheck)
                                                        .addComponent(variantStrCheck))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(HumanHalfElfStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(variantWisCheck)
                                                        .addComponent(variantIntCheck)
                                                        .addComponent(variantChaCheck))))
                                .addContainerGap(290, Short.MAX_VALUE))
        );
        HumanHalfElfStatPanelLayout.setVerticalGroup(
                HumanHalfElfStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(HumanHalfElfStatPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(HumanHalfElfStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(HumanHalfElfStatPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addGap(18, 18, 18)
                                                .addComponent(variantStrCheck)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(variantDexCheck)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(variantConCheck))
                                        .addGroup(HumanHalfElfStatPanelLayout.createSequentialGroup()
                                                .addComponent(variantIntCheck)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(variantWisCheck)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(variantChaCheck)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 170, Short.MAX_VALUE)
                                .addComponent(toBackgroundAlignmentPanel2)
                                .addGap(57, 57, 57))
        );

        mainPanel.add(humanHalfElfStatPanel, "HumanHalfElfStatPanel");

        commonCheck.setText("Common");

        dwarvishCheck.setText("Dwarvish");

        giantCheck.setText("Giant");

        elvishCheck.setText("Elvish");

        gnomishCheck.setText("Gnomish");

        orcCheck.setText("Orc");

        halflingCheck.setText("Halfling");

        goblinCheck.setText("Goblin");

        primordialCheck.setText("Primordial");

        undercommonCheck.setText("Undercommon");

        sylvanCheck.setText("Sylvan");

        infernalCheck.setText("Infernal");

        deepspeechCheck.setText("Deep Speech");

        draconicCheck.setText("Draconic");

        celestialCheck.setText("Celestial");

        abyssalCheck.setText("Abyssal");

        languageAmountLabel.setText("Choose this many Languages: ");

        toNamePanelButton.setText("Next");
        toNamePanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toNamePanelButtonActionPerformed();
            }
        });

        jLabel20.setForeground(new Color(255, 0, 0));
        jLabel20.setText("Languages in RED are given by selected race");

        javax.swing.GroupLayout languagePanelLayout = new javax.swing.GroupLayout(languagePanel);
        languagePanel.setLayout(languagePanelLayout);
        languagePanelLayout.setHorizontalGroup(
                languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(languagePanelLayout.createSequentialGroup()
                                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(languagePanelLayout.createSequentialGroup()
                                                .addGap(282, 282, 282)
                                                .addComponent(languageAmountLabel))
                                        .addGroup(languagePanelLayout.createSequentialGroup()
                                                .addGap(243, 243, 243)
                                                .addComponent(jLabel20)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, languagePanelLayout.createSequentialGroup()
                                .addContainerGap(172, Short.MAX_VALUE)
                                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, languagePanelLayout.createSequentialGroup()
                                                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(dwarvishCheck)
                                                        .addComponent(elvishCheck)
                                                        .addComponent(giantCheck)
                                                        .addComponent(commonCheck))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(goblinCheck)
                                                        .addComponent(halflingCheck)
                                                        .addComponent(orcCheck)
                                                        .addComponent(gnomishCheck))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(celestialCheck)
                                                        .addComponent(draconicCheck)
                                                        .addComponent(deepspeechCheck)
                                                        .addComponent(abyssalCheck))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(primordialCheck)
                                                        .addComponent(sylvanCheck)
                                                        .addComponent(undercommonCheck)
                                                        .addComponent(infernalCheck))
                                                .addGap(167, 167, 167))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, languagePanelLayout.createSequentialGroup()
                                                .addComponent(toNamePanelButton)
                                                .addGap(151, 151, 151))))
        );
        languagePanelLayout.setVerticalGroup(
                languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(languagePanelLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(languageAmountLabel)
                                .addGap(18, 18, 18)
                                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(languagePanelLayout.createSequentialGroup()
                                                .addComponent(commonCheck)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dwarvishCheck)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(elvishCheck)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(giantCheck))
                                        .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(languagePanelLayout.createSequentialGroup()
                                                        .addComponent(abyssalCheck)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(celestialCheck)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(draconicCheck)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(deepspeechCheck))
                                                .addGroup(languagePanelLayout.createSequentialGroup()
                                                        .addComponent(gnomishCheck)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(goblinCheck)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(halflingCheck)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(orcCheck))
                                                .addGroup(languagePanelLayout.createSequentialGroup()
                                                        .addComponent(infernalCheck)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(primordialCheck)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(sylvanCheck)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(undercommonCheck))))
                                .addGap(26, 26, 26)
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                                .addComponent(toNamePanelButton)
                                .addGap(52, 52, 52))
        );

        mainPanel.add(languagePanel, "languagePanel");

        jLabel11.setText("Choose a Cleric Domain:");

        jLabel12.setText("If Nature Domain, Choose 1 proficiency:");

        jLabel13.setText("If Knowledge Domain, Choose 2 to double prof bonus in:");

        domainList.setModel(new javax.swing.AbstractListModel() {
            final String[] strings = {"Knowledge", "Life", "Light", "Nature", "Tempest", "Trickery", "War"};

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        domainList.addListSelectionListener(this::domainListValueChanged);
        clericDomainScrollPane.setViewportView(domainList);

        clericArcanaCheck.setText("Arcana");

        clericHistoryCheck.setText("History");

        clericNatureCheck.setText("Nature");

        clericReligionCheck.setText("Religion");

        buttonGroup8.add(clericAnimalHandlingRadio);
        clericAnimalHandlingRadio.setText("Animal Handling");

        buttonGroup8.add(clericSurvivalRadio);
        clericSurvivalRadio.setText("Survival");

        buttonGroup8.add(clericNatureRadio);
        clericNatureRadio.setText("Nature");

        toStatPanelButton2.setText("Next");
        toStatPanelButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toStatPanelButton2ActionPerformed();
            }
        });

        javax.swing.GroupLayout clericDomainPanelLayout = new javax.swing.GroupLayout(clericDomainPanel);
        clericDomainPanel.setLayout(clericDomainPanelLayout);
        clericDomainPanelLayout.setHorizontalGroup(
                clericDomainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(clericDomainPanelLayout.createSequentialGroup()
                                .addContainerGap(139, Short.MAX_VALUE)
                                .addGroup(clericDomainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clericDomainPanelLayout.createSequentialGroup()
                                                .addComponent(clericDomainScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(83, 83, 83)
                                                .addGroup(clericDomainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clericDomainPanelLayout.createSequentialGroup()
                                                                .addGroup(clericDomainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(clericDomainPanelLayout.createSequentialGroup()
                                                                                .addComponent(clericArcanaCheck)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(clericNatureCheck))
                                                                        .addGroup(clericDomainPanelLayout.createSequentialGroup()
                                                                                .addComponent(clericHistoryCheck)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(clericReligionCheck)))
                                                                .addGap(200, 200, 200))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clericDomainPanelLayout.createSequentialGroup()
                                                                .addGroup(clericDomainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(clericNatureRadio)
                                                                        .addComponent(clericAnimalHandlingRadio)
                                                                        .addComponent(clericSurvivalRadio))
                                                                .addGap(235, 235, 235))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clericDomainPanelLayout.createSequentialGroup()
                                                                .addComponent(jLabel12)
                                                                .addGap(169, 169, 169))))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clericDomainPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel13)
                                                .addGap(101, 101, 101))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clericDomainPanelLayout.createSequentialGroup()
                                                .addComponent(toStatPanelButton2)
                                                .addGap(144, 144, 144))))
        );
        clericDomainPanelLayout.setVerticalGroup(
                clericDomainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(clericDomainPanelLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(clericDomainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel11)
                                        .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(clericDomainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(clericDomainPanelLayout.createSequentialGroup()
                                                .addGroup(clericDomainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(clericArcanaCheck)
                                                        .addComponent(clericNatureCheck))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(clericDomainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(clericHistoryCheck)
                                                        .addComponent(clericReligionCheck))
                                                .addGap(39, 39, 39)
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(clericAnimalHandlingRadio))
                                        .addComponent(clericDomainScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clericNatureRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clericSurvivalRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                                .addComponent(toStatPanelButton2)
                                .addGap(49, 49, 49))
        );

        mainPanel.add(clericDomainPanel, "clericDomainPanel");

        jLabel14.setText("Select a Fighting Style for your Fighter:");

        fightingStyleList.setModel(new javax.swing.AbstractListModel() {
            final String[] strings = {"Archery", "Defense", "Dueling", "Great Weapon Fighting", "Protection", "2-Weapon Fighting"};

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        fightingStyleScrollPane.setViewportView(fightingStyleList);

        toStatPanelButton3.setText("Next");
        toStatPanelButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toStatPanelButton3ActionPerformed();
            }
        });

        javax.swing.GroupLayout fightingStylePanelLayout = new javax.swing.GroupLayout(fightingStylePanel);
        fightingStylePanel.setLayout(fightingStylePanelLayout);
        fightingStylePanelLayout.setHorizontalGroup(
                fightingStylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(fightingStylePanelLayout.createSequentialGroup()
                                .addGroup(fightingStylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(fightingStylePanelLayout.createSequentialGroup()
                                                .addGap(262, 262, 262)
                                                .addComponent(jLabel14))
                                        .addGroup(fightingStylePanelLayout.createSequentialGroup()
                                                .addGap(294, 294, 294)
                                                .addComponent(fightingStyleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(265, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fightingStylePanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(toStatPanelButton3)
                                .addGap(166, 166, 166))
        );
        fightingStylePanelLayout.setVerticalGroup(
                fightingStylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(fightingStylePanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fightingStyleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                                .addComponent(toStatPanelButton3)
                                .addGap(57, 57, 57))
        );

        mainPanel.add(fightingStylePanel, "fightingStylePanel");

        jLabel15.setText("Choose your Sorcerous Origin:");

        jLabel16.setText("If Draconic Bloodline, Choose Ancestry:");

        buttonGroup9.add(draconicBloodlineRadio);
        draconicBloodlineRadio.setText("Draconic Bloodline");
        draconicBloodlineRadio.addActionListener(this::draconicBloodlineRadioActionPerformed);

        buttonGroup9.add(wildMagicRadio);
        wildMagicRadio.setText("Wild Magic");
        wildMagicRadio.addActionListener(this::wildMagicRadioActionPerformed);

        buttonGroup10.add(blackRadio);
        blackRadio.setText("Black");

        buttonGroup10.add(blueRadio);
        blueRadio.setText("Blue");

        buttonGroup10.add(whiteRadio);
        whiteRadio.setText("White");

        buttonGroup10.add(brassRadio);
        brassRadio.setText("Brass");

        buttonGroup10.add(bronzeRadio);
        bronzeRadio.setText("Bronze");

        buttonGroup10.add(silverRadio);
        silverRadio.setText("Silver");

        buttonGroup10.add(goldRadio);
        goldRadio.setText("Gold");

        buttonGroup10.add(greenRadio);
        greenRadio.setText("Green");

        buttonGroup10.add(redRadio);
        redRadio.setText("Red");

        buttonGroup10.add(copperRadio);
        copperRadio.setText("Copper");

        toStatPanel4.setText("Next");
        toStatPanel4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toStatPanel4ActionPerformed();
            }
        });

        javax.swing.GroupLayout sorcerousOriginPanelLayout = new javax.swing.GroupLayout(sorcerousOriginPanel);
        sorcerousOriginPanel.setLayout(sorcerousOriginPanelLayout);
        sorcerousOriginPanelLayout.setHorizontalGroup(
                sorcerousOriginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(sorcerousOriginPanelLayout.createSequentialGroup()
                                .addGroup(sorcerousOriginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(sorcerousOriginPanelLayout.createSequentialGroup()
                                                .addGap(132, 132, 132)
                                                .addComponent(jLabel15)
                                                .addGap(62, 62, 62)
                                                .addComponent(jLabel16))
                                        .addGroup(sorcerousOriginPanelLayout.createSequentialGroup()
                                                .addGap(149, 149, 149)
                                                .addGroup(sorcerousOriginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(draconicBloodlineRadio)
                                                        .addComponent(wildMagicRadio))
                                                .addGap(86, 86, 86)
                                                .addGroup(sorcerousOriginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(brassRadio)
                                                        .addComponent(blueRadio)
                                                        .addComponent(blackRadio)
                                                        .addComponent(bronzeRadio)
                                                        .addComponent(copperRadio))
                                                .addGap(18, 18, 18)
                                                .addGroup(sorcerousOriginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(goldRadio, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(greenRadio, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(redRadio, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(silverRadio, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(whiteRadio, javax.swing.GroupLayout.Alignment.LEADING)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sorcerousOriginPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(toStatPanel4)
                                                .addGap(28, 28, 28)))
                                .addContainerGap(136, Short.MAX_VALUE))
        );
        sorcerousOriginPanelLayout.setVerticalGroup(
                sorcerousOriginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(sorcerousOriginPanelLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(sorcerousOriginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel16)
                                        .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(sorcerousOriginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(sorcerousOriginPanelLayout.createSequentialGroup()
                                                .addComponent(goldRadio)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(greenRadio)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(silverRadio)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(redRadio)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(whiteRadio))
                                        .addGroup(sorcerousOriginPanelLayout.createSequentialGroup()
                                                .addGroup(sorcerousOriginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(blackRadio)
                                                        .addComponent(draconicBloodlineRadio))
                                                .addGroup(sorcerousOriginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(sorcerousOriginPanelLayout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(blueRadio)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(brassRadio))
                                                        .addGroup(sorcerousOriginPanelLayout.createSequentialGroup()
                                                                .addGap(18, 18, 18)
                                                                .addComponent(wildMagicRadio)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(bronzeRadio)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(copperRadio)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                                .addComponent(toStatPanel4)
                                .addGap(64, 64, 64))
        );

        mainPanel.add(sorcerousOriginPanel, "sorcerousOriginPanel");

        jLabel17.setText("Choose a Favored Enemy for your Ranger:");

        favoredEnemyList.setModel(new javax.swing.AbstractListModel() {
            final String[] strings = {"Aberrations", "Beasts", "Celestials", "Constructs", "Dragons", "Elementals", "Fey", "Fiends", "Giants", "Monstrosities", "Oozes", "Plants", "Undead", "Humanoid Races (2)"};

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        favoredEnemyScrollPane.setViewportView(favoredEnemyList);

        toStatPanel5.setText("Next");
        toStatPanel5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toStatPanel5ActionPerformed();
            }
        });

        javax.swing.GroupLayout favoredEnemyPanelLayout = new javax.swing.GroupLayout(favoredEnemyPanel);
        favoredEnemyPanel.setLayout(favoredEnemyPanelLayout);
        favoredEnemyPanelLayout.setHorizontalGroup(
                favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(favoredEnemyPanelLayout.createSequentialGroup()
                                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(favoredEnemyPanelLayout.createSequentialGroup()
                                                .addGap(250, 250, 250)
                                                .addComponent(jLabel17))
                                        .addGroup(favoredEnemyPanelLayout.createSequentialGroup()
                                                .addGap(293, 293, 293)
                                                .addComponent(favoredEnemyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(78, 78, 78)
                                                .addComponent(toStatPanel5)))
                                .addContainerGap(158, Short.MAX_VALUE))
        );
        favoredEnemyPanelLayout.setVerticalGroup(
                favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(favoredEnemyPanelLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel17)
                                .addGroup(favoredEnemyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(favoredEnemyPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(favoredEnemyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(97, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, favoredEnemyPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(toStatPanel5)
                                                .addGap(52, 52, 52))))
        );

        mainPanel.add(favoredEnemyPanel, "favoredEnemyPanel");

        jLabel18.setText("Choose an Otherworldly Patron for your Warlock:");

        buttonGroup11.add(archFeyRadio);
        archFeyRadio.setText("the Archfey");

        buttonGroup11.add(fiendRadio);
        fiendRadio.setText("the Fiend");

        buttonGroup11.add(greatOldOneRadio);
        greatOldOneRadio.setText("the Great Old One");

        toStatPanel6.setText("Next");
        toStatPanel6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toStatPanel6ActionPerformed();
            }
        });

        javax.swing.GroupLayout otherworldlyPatronPanelLayout = new javax.swing.GroupLayout(otherworldlyPatronPanel);
        otherworldlyPatronPanel.setLayout(otherworldlyPatronPanelLayout);
        otherworldlyPatronPanelLayout.setHorizontalGroup(
                otherworldlyPatronPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(otherworldlyPatronPanelLayout.createSequentialGroup()
                                .addGap(229, 229, 229)
                                .addComponent(jLabel18)
                                .addGap(0, 235, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, otherworldlyPatronPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(otherworldlyPatronPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, otherworldlyPatronPanelLayout.createSequentialGroup()
                                                .addGroup(otherworldlyPatronPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(fiendRadio)
                                                        .addComponent(archFeyRadio)
                                                        .addComponent(greatOldOneRadio))
                                                .addGap(302, 302, 302))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, otherworldlyPatronPanelLayout.createSequentialGroup()
                                                .addComponent(toStatPanel6)
                                                .addGap(180, 180, 180))))
        );
        otherworldlyPatronPanelLayout.setVerticalGroup(
                otherworldlyPatronPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(otherworldlyPatronPanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel18)
                                .addGap(18, 18, 18)
                                .addComponent(archFeyRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fiendRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(greatOldOneRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                                .addComponent(toStatPanel6)
                                .addGap(67, 67, 67))
        );

        mainPanel.add(otherworldlyPatronPanel, "otherworldlyPatronPanel");

        expertiseList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        expertiseScrollPanel1.setViewportView(expertiseList1);

        jLabel19.setText("Choose two proficiencies for Rogue Expertise:");

        expertiseScrollPanel2.setViewportView(expertiseList2);

        toLanguagePanel2.setText("Next");
        toLanguagePanel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toLanguagePanel2ActionPerformed();
            }
        });

        javax.swing.GroupLayout rogueExpertisePanelLayout = new javax.swing.GroupLayout(rogueExpertisePanel);
        rogueExpertisePanel.setLayout(rogueExpertisePanelLayout);
        rogueExpertisePanelLayout.setHorizontalGroup(
                rogueExpertisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(rogueExpertisePanelLayout.createSequentialGroup()
                                .addGroup(rogueExpertisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(rogueExpertisePanelLayout.createSequentialGroup()
                                                .addGap(211, 211, 211)
                                                .addComponent(expertiseScrollPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(98, 98, 98)
                                                .addComponent(expertiseScrollPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(rogueExpertisePanelLayout.createSequentialGroup()
                                                .addGap(240, 240, 240)
                                                .addComponent(jLabel19)))
                                .addContainerGap(212, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rogueExpertisePanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(toLanguagePanel2)
                                .addGap(173, 173, 173))
        );
        rogueExpertisePanelLayout.setVerticalGroup(
                rogueExpertisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(rogueExpertisePanelLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel19)
                                .addGap(12, 12, 12)
                                .addGroup(rogueExpertisePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(expertiseScrollPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                        .addComponent(expertiseScrollPanel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                                .addComponent(toLanguagePanel2)
                                .addGap(64, 64, 64))
        );

        mainPanel.add(rogueExpertisePanel, "rogueExpertisePanel");

        jLabel21.setText("Enter your Name:");

        jLabel22.setText("Enter Character's Name:");

        toCantripOrEquipmentPanel.setText("Next");
        toCantripOrEquipmentPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toCantripOrEquipmentPanelActionPerformed();
            }
        });

        javax.swing.GroupLayout namePanelLayout = new javax.swing.GroupLayout(namePanel);
        namePanel.setLayout(namePanelLayout);
        namePanelLayout.setHorizontalGroup(
                namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(namePanelLayout.createSequentialGroup()
                                .addGap(196, 196, 196)
                                .addGroup(namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(namePanelLayout.createSequentialGroup()
                                                .addComponent(jLabel21)
                                                .addGap(18, 18, 18)
                                                .addComponent(playerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(namePanelLayout.createSequentialGroup()
                                                .addComponent(jLabel22)
                                                .addGap(18, 18, 18)
                                                .addComponent(characterNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(191, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, namePanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(toCantripOrEquipmentPanel)
                                .addGap(161, 161, 161))
        );
        namePanelLayout.setVerticalGroup(
                namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(namePanelLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(playerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel21))
                                .addGap(33, 33, 33)
                                .addGroup(namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel22)
                                        .addComponent(characterNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                                .addComponent(toCantripOrEquipmentPanel)
                                .addGap(65, 65, 65))
        );

        mainPanel.add(namePanel, "namePanel");

        jLabel23.setText("Select a Dwarven Tool Proficiency:");

        buttonGroup12.add(smithToolRadio);
        smithToolRadio.setText("Smith's Tools");

        buttonGroup12.add(brewerSuppliesRadio);
        brewerSuppliesRadio.setText("Brewer's Supplies");

        buttonGroup12.add(masonToolsRadio);
        masonToolsRadio.setText("Mason's Tools");

        toNamePanel2.setText("Next");
        toNamePanel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toNamePanel2ActionPerformed();
            }
        });

        javax.swing.GroupLayout dwarfToolPanelLayout = new javax.swing.GroupLayout(dwarfToolPanel);
        dwarfToolPanel.setLayout(dwarfToolPanelLayout);
        dwarfToolPanelLayout.setHorizontalGroup(
                dwarfToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(dwarfToolPanelLayout.createSequentialGroup()
                                .addGroup(dwarfToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(dwarfToolPanelLayout.createSequentialGroup()
                                                .addGap(271, 271, 271)
                                                .addComponent(jLabel23))
                                        .addGroup(dwarfToolPanelLayout.createSequentialGroup()
                                                .addGap(314, 314, 314)
                                                .addGroup(dwarfToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(brewerSuppliesRadio)
                                                        .addComponent(smithToolRadio)
                                                        .addComponent(masonToolsRadio))))
                                .addContainerGap(285, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dwarfToolPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(toNamePanel2)
                                .addGap(185, 185, 185))
        );
        dwarfToolPanelLayout.setVerticalGroup(
                dwarfToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(dwarfToolPanelLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(smithToolRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(brewerSuppliesRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(masonToolsRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                                .addComponent(toNamePanel2)
                                .addGap(66, 66, 66))
        );

        mainPanel.add(dwarfToolPanel, "dwarfToolPanel");

        jLabel24.setText("Pick 2 Druid Cantrips to Learn:");

        druidcraftDruid.setText("Druidcraft");

        guidanceDruid.setText("Guidance");

        poisonSprayDruid.setText("Poison Spray");

        resistanceDruid.setText("Resistance");

        shillelaghDruid.setText("Shillelagh");

        mendingDruid.setText("Mending");

        thornWhipDruid.setText("Thorn Whip");

        produceFlameDruid.setText("Produce Flame");

        toDruidEquipmentPanel.setText("Next");
        toDruidEquipmentPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDruidEquipmentPanelActionPerformed();
            }
        });

        javax.swing.GroupLayout druidSpellPanelLayout = new javax.swing.GroupLayout(druidSpellPanel);
        druidSpellPanel.setLayout(druidSpellPanelLayout);
        druidSpellPanelLayout.setHorizontalGroup(
                druidSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(druidSpellPanelLayout.createSequentialGroup()
                                .addGap(284, 284, 284)
                                .addComponent(jLabel24)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(druidSpellPanelLayout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addGroup(druidSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(druidSpellPanelLayout.createSequentialGroup()
                                                .addComponent(guidanceDruid)
                                                .addGap(6, 6, 6))
                                        .addComponent(druidcraftDruid))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(druidSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(druidSpellPanelLayout.createSequentialGroup()
                                                .addComponent(mendingDruid)
                                                .addGap(32, 32, 32)
                                                .addComponent(produceFlameDruid))
                                        .addGroup(druidSpellPanelLayout.createSequentialGroup()
                                                .addComponent(poisonSprayDruid)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(resistanceDruid)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(druidSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(thornWhipDruid)
                                        .addComponent(shillelaghDruid))
                                .addContainerGap(166, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, druidSpellPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(toDruidEquipmentPanel)
                                .addGap(181, 181, 181))
        );
        druidSpellPanelLayout.setVerticalGroup(
                druidSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(druidSpellPanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel24)
                                .addGap(27, 27, 27)
                                .addGroup(druidSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(druidcraftDruid)
                                        .addComponent(mendingDruid)
                                        .addComponent(produceFlameDruid)
                                        .addComponent(shillelaghDruid))
                                .addGap(18, 18, 18)
                                .addGroup(druidSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(guidanceDruid)
                                        .addComponent(poisonSprayDruid)
                                        .addComponent(resistanceDruid)
                                        .addComponent(thornWhipDruid))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                                .addComponent(toDruidEquipmentPanel)
                                .addGap(71, 71, 71))
        );

        mainPanel.add(druidSpellPanel, "druidSpellPanel");

        jLabel33.setText("Make Equipment choices for your Druid:");

        buttonGroup13.add(woodenShieldDruid);
        woodenShieldDruid.setText("Wooden Shield");
        woodenShieldDruid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                woodenShieldDruidActionPerformed();
            }
        });

        buttonGroup13.add(simpleWeaponDruid1);
        simpleWeaponDruid1.setText("One Simple Weapon");
        simpleWeaponDruid1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleWeaponDruid1ActionPerformed();
            }
        });

        simpleWeaponDruidScroll1.setViewportView(simpleWeaponDruidList1);

        buttonGroup14.add(scimitarDruid);
        scimitarDruid.setText("Scimitar");
        scimitarDruid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scimitarDruidActionPerformed();
            }
        });

        buttonGroup14.add(simpleWeaponDruid2);
        simpleWeaponDruid2.setText("One Simple Melee Weapon");
        simpleWeaponDruid2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleWeaponDruid2ActionPerformed();
            }
        });

        simpleWeaponDruidScroll2.setViewportView(simpleWeaponDruidList2);

        toMiscFromDruid.setText("Next");
        toMiscFromDruid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromDruidActionPerformed();
            }
        });

        javax.swing.GroupLayout druidEquipmentPanelLayout = new javax.swing.GroupLayout(druidEquipmentPanel);
        druidEquipmentPanel.setLayout(druidEquipmentPanelLayout);
        druidEquipmentPanelLayout.setHorizontalGroup(
                druidEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(druidEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(druidEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(druidEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(druidEquipmentPanelLayout.createSequentialGroup()
                                                        .addGroup(druidEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(druidEquipmentPanelLayout.createSequentialGroup()
                                                                        .addGap(224, 224, 224)
                                                                        .addComponent(jLabel33))
                                                                .addGroup(druidEquipmentPanelLayout.createSequentialGroup()
                                                                        .addGap(123, 123, 123)
                                                                        .addComponent(woodenShieldDruid)
                                                                        .addGap(95, 95, 95)
                                                                        .addComponent(simpleWeaponDruid1)))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(simpleWeaponDruidScroll1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(druidEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(127, 127, 127)
                                                .addComponent(scimitarDruid)
                                                .addGroup(druidEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(druidEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(333, 333, 333)
                                                                .addComponent(toMiscFromDruid))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, druidEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(52, 52, 52)
                                                                .addComponent(simpleWeaponDruid2)
                                                                .addGap(45, 45, 45)
                                                                .addComponent(simpleWeaponDruidScroll2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addContainerGap(138, Short.MAX_VALUE))
        );
        druidEquipmentPanelLayout.setVerticalGroup(
                druidEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(druidEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(druidEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(simpleWeaponDruidScroll1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(druidEquipmentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel33)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(druidEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(woodenShieldDruid)
                                                        .addComponent(simpleWeaponDruid1))))
                                .addGap(14, 14, 14)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(druidEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(druidEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(32, 32, 32)
                                                .addGroup(druidEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(scimitarDruid)
                                                        .addComponent(simpleWeaponDruid2)))
                                        .addComponent(simpleWeaponDruidScroll2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toMiscFromDruid)
                                .addContainerGap(106, Short.MAX_VALUE))
        );

        mainPanel.add(druidEquipmentPanel, "druidEquipmentPanel");

        jLabel25.setText("Choose 3 Cleric Cantrips:");

        guidanceCleric.setText("Guidance");

        lightCleric.setText("Light");

        mendingCleric.setText("Mending");

        resistanceCleric.setText("Resistance");

        sacredFlameCleric.setText("Sacred Flame");

        spareTheDyingCleric.setText("Spare the Dying");

        thaumaturgyCleric.setText("Thaumaturgy");

        toClericEquipmentPanel.setText("Next");
        toClericEquipmentPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toClericEquipmentPanelActionPerformed();
            }
        });

        javax.swing.GroupLayout clericSpellPanelLayout = new javax.swing.GroupLayout(clericSpellPanel);
        clericSpellPanel.setLayout(clericSpellPanelLayout);
        clericSpellPanelLayout.setHorizontalGroup(
                clericSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(clericSpellPanelLayout.createSequentialGroup()
                                .addGroup(clericSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(clericSpellPanelLayout.createSequentialGroup()
                                                .addGap(197, 197, 197)
                                                .addGroup(clericSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(clericSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(guidanceCleric)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(sacredFlameCleric)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(spareTheDyingCleric))
                                                        .addGroup(clericSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(mendingCleric)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(clericSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(lightCleric)
                                                                        .addGroup(clericSpellPanelLayout.createSequentialGroup()
                                                                                .addComponent(resistanceCleric)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(thaumaturgyCleric))))))
                                        .addGroup(clericSpellPanelLayout.createSequentialGroup()
                                                .addGap(284, 284, 284)
                                                .addComponent(jLabel25)))
                                .addContainerGap(227, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clericSpellPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(toClericEquipmentPanel)
                                .addGap(173, 173, 173))
        );
        clericSpellPanelLayout.setVerticalGroup(
                clericSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(clericSpellPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(clericSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(guidanceCleric)
                                        .addComponent(sacredFlameCleric)
                                        .addComponent(spareTheDyingCleric))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(clericSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(mendingCleric)
                                        .addComponent(resistanceCleric)
                                        .addComponent(thaumaturgyCleric))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lightCleric)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                                .addComponent(toClericEquipmentPanel)
                                .addGap(70, 70, 70))
        );

        mainPanel.add(clericSpellPanel, "clericSpellPanel");

        jLabel26.setText("Choose 3 Wizard Cantrips:");

        acidSplashWizard.setText("Acid Splash");

        bladeWardWizard.setText("Blade Ward");

        chillTouchWizard.setText("Chill Touch");

        dancingLightsWizard.setText("Dancing Lights");

        mageHandWizard.setText("Mage Hand");

        lightWizard.setText("Light");

        friendsWizard.setText("Friends");

        fireBoltWizard.setText("Fire Bolt");

        trueStrikeWizard.setText("True Strike");

        rayOfFrostWizard.setText("Ray of Frost");

        shockingGraspWizard.setText("Shocking Grasp");

        prestidigitationWizard.setText("Prestidigitation");

        poisonSprayWizard.setText("Poison Spray");

        minorIllusionWizard.setText("Minor Illusion");

        messageWizard.setText("Message");

        mendingWizard.setText("Mending");

        toWizardEquipmentPanel.setText("Next");
        toWizardEquipmentPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toWizardEquipmentPanelActionPerformed();
            }
        });

        javax.swing.GroupLayout wizardSpellPanelLayout = new javax.swing.GroupLayout(wizardSpellPanel);
        wizardSpellPanel.setLayout(wizardSpellPanelLayout);
        wizardSpellPanelLayout.setHorizontalGroup(
                wizardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(wizardSpellPanelLayout.createSequentialGroup()
                                .addGroup(wizardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(wizardSpellPanelLayout.createSequentialGroup()
                                                .addGap(295, 295, 295)
                                                .addComponent(jLabel26))
                                        .addGroup(wizardSpellPanelLayout.createSequentialGroup()
                                                .addGap(133, 133, 133)
                                                .addGroup(wizardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(dancingLightsWizard)
                                                        .addComponent(acidSplashWizard)
                                                        .addComponent(chillTouchWizard)
                                                        .addComponent(bladeWardWizard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(wizardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(mageHandWizard)
                                                        .addComponent(fireBoltWizard)
                                                        .addComponent(lightWizard)
                                                        .addComponent(friendsWizard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(wizardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(poisonSprayWizard)
                                                        .addComponent(mendingWizard)
                                                        .addComponent(minorIllusionWizard)
                                                        .addComponent(messageWizard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(wizardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(trueStrikeWizard)
                                                        .addComponent(prestidigitationWizard)
                                                        .addComponent(shockingGraspWizard)
                                                        .addComponent(rayOfFrostWizard))))
                                .addContainerGap(142, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wizardSpellPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(toWizardEquipmentPanel)
                                .addGap(156, 156, 156))
        );
        wizardSpellPanelLayout.setVerticalGroup(
                wizardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(wizardSpellPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel26)
                                .addGap(18, 18, 18)
                                .addGroup(wizardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(wizardSpellPanelLayout.createSequentialGroup()
                                                .addComponent(acidSplashWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(bladeWardWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(chillTouchWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dancingLightsWizard))
                                        .addGroup(wizardSpellPanelLayout.createSequentialGroup()
                                                .addComponent(fireBoltWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(friendsWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lightWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(mageHandWizard))
                                        .addGroup(wizardSpellPanelLayout.createSequentialGroup()
                                                .addComponent(mendingWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(messageWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(minorIllusionWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(poisonSprayWizard))
                                        .addGroup(wizardSpellPanelLayout.createSequentialGroup()
                                                .addComponent(prestidigitationWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(rayOfFrostWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(shockingGraspWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(trueStrikeWizard)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                                .addComponent(toWizardEquipmentPanel)
                                .addGap(59, 59, 59))
        );

        mainPanel.add(wizardSpellPanel, "wizardSpellPanel");

        jLabel37.setText("Make Wizard Equipment Selection:");

        buttonGroup23.add(quarterstaffWizard);
        quarterstaffWizard.setText("Quarterstaff");

        buttonGroup23.add(daggerWizard);
        daggerWizard.setText("Dagger");

        buttonGroup24.add(compWizard);
        compWizard.setText("Component Pouch");

        buttonGroup24.add(arcaneFocusWizard);
        arcaneFocusWizard.setText("Arcane Focus");

        buttonGroup25.add(scholarPackWizard);
        scholarPackWizard.setText("Scholar Pack");

        buttonGroup25.add(explorerPackWizard);
        explorerPackWizard.setText("Explorer Pack");

        toMiscFromWizard.setText("Next");
        toMiscFromWizard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromWizardActionPerformed();
            }
        });

        javax.swing.GroupLayout wizardEquipmentPanelLayout = new javax.swing.GroupLayout(wizardEquipmentPanel);
        wizardEquipmentPanel.setLayout(wizardEquipmentPanelLayout);
        wizardEquipmentPanelLayout.setHorizontalGroup(
                wizardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(wizardEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(wizardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(wizardEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(68, 68, 68)
                                                .addGroup(wizardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(wizardEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(272, 272, 272)
                                                .addComponent(jLabel37)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wizardEquipmentPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(toMiscFromWizard)
                                .addGap(182, 182, 182))
                        .addGroup(wizardEquipmentPanelLayout.createSequentialGroup()
                                .addGap(178, 178, 178)
                                .addComponent(quarterstaffWizard)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(daggerWizard)
                                .addGap(201, 201, 201))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wizardEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(wizardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(wizardEquipmentPanelLayout.createSequentialGroup()
                                                .addContainerGap(176, Short.MAX_VALUE)
                                                .addComponent(compWizard)
                                                .addGap(170, 170, 170)
                                                .addComponent(arcaneFocusWizard))
                                        .addGroup(wizardEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(176, 176, 176)
                                                .addComponent(scholarPackWizard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(explorerPackWizard)))
                                .addGap(162, 162, 162))
        );
        wizardEquipmentPanelLayout.setVerticalGroup(
                wizardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(wizardEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel37)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(wizardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(quarterstaffWizard)
                                        .addComponent(daggerWizard))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(wizardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(compWizard)
                                        .addComponent(arcaneFocusWizard))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(wizardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(scholarPackWizard)
                                        .addComponent(explorerPackWizard))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                                .addComponent(toMiscFromWizard)
                                .addGap(56, 56, 56))
        );

        mainPanel.add(wizardEquipmentPanel, "wizardEquipmentPanel");

        jLabel27.setText("Choose 2 Warlock Cantrips");

        jLabel28.setText("Choose 2 Warlock 1st-Level Spells");

        bladeWardWarlock.setText("Blade Ward");

        eldritchBlastWarlock.setText("Eldritch Blast");

        friendsWarlock.setText("Friends");

        chillTouchWarlock.setText("Chill Touch");

        prestidigitationWarlock.setText("Prestidigitation");

        minorIllusionWarlock.setText("Minor Illusion");

        mageHandWarlock.setText("Mage Hand");

        poisonSprayWarlock.setText("Poison Spray");

        trueStrikeWarlock.setText("True Strike");

        illusoryScriptWarlock.setText("Illusory Script");

        hellishRebukeWarlock.setText("Hellish Rebuke");

        comprehendLanguagesWarlock.setText("Comprehend Languages");

        armsOfHadarWarlock.setText("Arms of Hadar");

        armorOfAgathysWarlock.setText("Armor of Agathys");

        charmPersonWarlock.setText("Charm Person");

        expeditiousRetreatWarlock.setText("Expeditious Retreat");

        unseenServantWarlock.setText("Unseen Servant");

        hexWarlock.setText("Hex");

        protectionWarlock.setText("Protection from Evil and Good");

        witchBoltWarlock.setText("Witch Bolt");

        toWarlockEquipmentPanel.setText("Next");
        toWarlockEquipmentPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toWarlockEquipmentPanelActionPerformed();
            }
        });

        patronSpell1.setText("jCheckBox1");

        patronSpell2.setText("jCheckBox1");

        javax.swing.GroupLayout warlockSpellPanelLayout = new javax.swing.GroupLayout(warlockSpellPanel);
        warlockSpellPanel.setLayout(warlockSpellPanelLayout);
        warlockSpellPanelLayout.setHorizontalGroup(
                warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, warlockSpellPanelLayout.createSequentialGroup()
                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                .addGap(74, 74, 74)
                                                .addComponent(jLabel27))
                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                .addGap(20, 20, 20)
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                                        .addComponent(poisonSprayWarlock)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(prestidigitationWarlock))
                                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, warlockSpellPanelLayout.createSequentialGroup()
                                                                        .addComponent(mageHandWarlock)
                                                                        .addGap(18, 18, 18)
                                                                        .addComponent(minorIllusionWarlock)))
                                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(bladeWardWarlock, javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(eldritchBlastWarlock, javax.swing.GroupLayout.Alignment.TRAILING))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(friendsWarlock)
                                                                        .addComponent(chillTouchWarlock)))))
                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                .addGap(71, 71, 71)
                                                .addComponent(trueStrikeWarlock)))
                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(hexWarlock)
                                                                        .addComponent(charmPersonWarlock)
                                                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                                                .addGap(98, 98, 98)
                                                                                .addComponent(jLabel28)))
                                                                .addGap(22, 22, 22))
                                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(expeditiousRetreatWarlock)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(illusoryScriptWarlock)
                                                                .addGap(47, 47, 47)))
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(armsOfHadarWarlock)
                                                        .addComponent(patronSpell1)
                                                        .addComponent(patronSpell2))
                                                .addGap(17, 17, 17))
                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(armorOfAgathysWarlock)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(hellishRebukeWarlock)
                                                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                                                .addComponent(comprehendLanguagesWarlock)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(witchBoltWarlock))
                                                                        .addComponent(unseenServantWarlock)))
                                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(protectionWarlock)
                                                                .addGap(101, 101, 101)))
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, warlockSpellPanelLayout.createSequentialGroup()
                                .addGap(182, 533, Short.MAX_VALUE)
                                .addComponent(toWarlockEquipmentPanel)
                                .addGap(163, 163, 163))
        );
        warlockSpellPanelLayout.setVerticalGroup(
                warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel27)
                                        .addComponent(jLabel28))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(bladeWardWarlock)
                                                        .addComponent(chillTouchWarlock))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(friendsWarlock)
                                                        .addComponent(eldritchBlastWarlock))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(mageHandWarlock)
                                                        .addComponent(minorIllusionWarlock))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(prestidigitationWarlock)
                                                        .addComponent(poisonSprayWarlock)
                                                        .addComponent(hexWarlock)))
                                        .addGroup(warlockSpellPanelLayout.createSequentialGroup()
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(armorOfAgathysWarlock)
                                                        .addComponent(comprehendLanguagesWarlock)
                                                        .addComponent(witchBoltWarlock))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(charmPersonWarlock)
                                                        .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(hellishRebukeWarlock)
                                                                .addComponent(armsOfHadarWarlock)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(expeditiousRetreatWarlock)
                                                        .addComponent(illusoryScriptWarlock)
                                                        .addComponent(patronSpell1))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(unseenServantWarlock)
                                                        .addComponent(patronSpell2))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(warlockSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(trueStrikeWarlock)
                                        .addComponent(protectionWarlock))
                                .addGap(86, 86, 86)
                                .addComponent(toWarlockEquipmentPanel)
                                .addContainerGap(86, Short.MAX_VALUE))
        );

        mainPanel.add(warlockSpellPanel, "warlockSpellPanel");

        jLabel42.setText("Make Warlock Equipment Selections:");

        buttonGroup23.add(lightCrossbowWarlock);
        lightCrossbowWarlock.setText("Light Crossbow + 20 bolts");
        lightCrossbowWarlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightCrossbowWarlockActionPerformed();
            }
        });

        buttonGroup23.add(simpleWeaponWarlock);
        simpleWeaponWarlock.setText("Any Simple Weapon");
        simpleWeaponWarlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleWeaponWarlockActionPerformed();
            }
        });

        buttonGroup24.add(arcaneFocusWarlock);
        arcaneFocusWarlock.setText("Arcane Focus");

        buttonGroup24.add(componentPouchWarlock);
        componentPouchWarlock.setText("Component Pouch");

        buttonGroup25.add(dungeoneerPackWarlock);
        dungeoneerPackWarlock.setText("Dungeoneer Pack");

        buttonGroup25.add(scholarPackWarlock);
        scholarPackWarlock.setText("Scholar Pack");

        toMiscFromWarlock.setText("Next");
        toMiscFromWarlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromWarlockActionPerformed();
            }
        });

        jScrollPane8.setViewportView(simpleWeaponWarlockList);

        javax.swing.GroupLayout warlockEquipmentPanelLayout = new javax.swing.GroupLayout(warlockEquipmentPanel);
        warlockEquipmentPanel.setLayout(warlockEquipmentPanelLayout);
        warlockEquipmentPanelLayout.setHorizontalGroup(
                warlockEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, warlockEquipmentPanelLayout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(lightCrossbowWarlock)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                                .addComponent(simpleWeaponWarlock)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(142, 142, 142))
                        .addGroup(warlockEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(warlockEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(warlockEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(254, 254, 254)
                                                .addComponent(jLabel42))
                                        .addGroup(warlockEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(166, 166, 166)
                                                .addComponent(arcaneFocusWarlock)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(componentPouchWarlock)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, warlockEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jSeparator18)
                                .addGap(92, 92, 92))
                        .addGroup(warlockEquipmentPanelLayout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jSeparator19)
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, warlockEquipmentPanelLayout.createSequentialGroup()
                                .addGap(177, 177, 177)
                                .addComponent(scholarPackWarlock)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(warlockEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(warlockEquipmentPanelLayout.createSequentialGroup()
                                                .addComponent(dungeoneerPackWarlock)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, warlockEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(toMiscFromWarlock)
                                                .addGap(172, 172, 172))))
        );
        warlockEquipmentPanelLayout.setVerticalGroup(
                warlockEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(warlockEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel42)
                                .addGroup(warlockEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(warlockEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(37, 37, 37)
                                                .addGroup(warlockEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lightCrossbowWarlock)
                                                        .addComponent(simpleWeaponWarlock)))
                                        .addGroup(warlockEquipmentPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(warlockEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(arcaneFocusWarlock)
                                        .addComponent(componentPouchWarlock))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addGroup(warlockEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(scholarPackWarlock)
                                        .addComponent(dungeoneerPackWarlock))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                                .addComponent(toMiscFromWarlock)
                                .addGap(59, 59, 59))
        );

        mainPanel.add(warlockEquipmentPanel, "warlockEquipmentPanel");

        jLabel29.setText("Choose 2 Bard Cantrips:");

        jLabel30.setText("Choose 4 1st-Level Spells:");

        bladeWardBard.setText("Blade Ward");

        mendingBard.setText("Mending");

        dancingLightsBard.setText("Dancing Lights");

        messageBard.setText("Message");

        friendsBard.setText("Friends");

        minorIllusionBard.setText("Minor Illusion");

        lightBard.setText("Light");

        prestidigitationBard.setText("Prestidigitation");

        trueStrikeBard.setText("True Strike");

        mageHandBard.setText("Mage Hand");

        viciousMockeryBard.setText("Vicious Mockery");

        animalFriendshipBard.setText("Animal Friendship");

        baneBard.setText("Bane");

        charmPersonBard.setText("Charm Person");

        comprehendLanguagesBard.setText("Comp. Languages");

        cureWoundsBard.setText("Cure Wounds");

        detectMagicBard.setText("Detect Magic");

        disguiseSelfBard.setText("Disguise Self");

        identifyBard.setText("Identify");

        illusoryScriptBard.setText("Illusory Script");

        heroismBard.setText("Heroism");

        healingWordBard.setText("Healing Word");

        featherFallBard.setText("Feather Fall");

        faerieFireBard.setText("Faerie Fire");

        dissonantWhispersBard.setText("Dissonant Whispers");

        thunderwaveBard.setText("Thunderwave");

        unseenServantBard.setText("Unseen Servant");

        tashasHideousLaughterBard.setText("Tasha's Hideous Laughter");

        speakWithAnimalsBard.setText("Speak with Animals");

        sleepBard.setText("Sleep");

        silentImageBard.setText("Silent Image");

        longstriderBard.setText("Longstrider");

        toBardEquipmentPanel.setText("Next");
        toBardEquipmentPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toBardEquipmentPanelActionPerformed();
            }
        });

        javax.swing.GroupLayout bardSpellPanelLayout = new javax.swing.GroupLayout(bardSpellPanel);
        bardSpellPanel.setLayout(bardSpellPanelLayout);
        bardSpellPanelLayout.setHorizontalGroup(
                bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                .addGap(52, 52, 52)
                                                .addComponent(jLabel29))
                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                .addGap(53, 53, 53)
                                                .addComponent(viciousMockeryBard))
                                        .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                        .addComponent(dancingLightsBard)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(messageBard))
                                                .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                        .addComponent(bladeWardBard)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(mendingBard))
                                                .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                        .addComponent(friendsBard)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(minorIllusionBard))
                                                .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                        .addComponent(lightBard)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(prestidigitationBard))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bardSpellPanelLayout.createSequentialGroup()
                                                        .addComponent(mageHandBard)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(trueStrikeBard))))
                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                .addGap(127, 127, 127)
                                                .addComponent(jLabel30))
                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                                .addGap(14, 14, 14)
                                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(detectMagicBard)
                                                                                .addComponent(disguiseSelfBard, javax.swing.GroupLayout.Alignment.TRAILING))
                                                                        .addComponent(baneBard, javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(animalFriendshipBard, javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(charmPersonBard, javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(comprehendLanguagesBard, javax.swing.GroupLayout.Alignment.LEADING)))
                                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(cureWoundsBard)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(dissonantWhispersBard)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(longstriderBard))
                                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(heroismBard)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(tashasHideousLaughterBard))
                                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(healingWordBard)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(speakWithAnimalsBard))
                                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(featherFallBard)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(sleepBard))
                                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(faerieFireBard)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(silentImageBard))
                                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(identifyBard)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(thunderwaveBard))
                                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(illusoryScriptBard)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(unseenServantBard)))))
                                .addContainerGap(95, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bardSpellPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(toBardEquipmentPanel)
                                .addGap(118, 118, 118))
        );
        bardSpellPanelLayout.setVerticalGroup(
                bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                .addComponent(animalFriendshipBard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(baneBard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(charmPersonBard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comprehendLanguagesBard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cureWoundsBard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(detectMagicBard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(disguiseSelfBard))
                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(dissonantWhispersBard)
                                                        .addComponent(longstriderBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(faerieFireBard)
                                                        .addComponent(silentImageBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(featherFallBard)
                                                        .addComponent(sleepBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(healingWordBard)
                                                        .addComponent(speakWithAnimalsBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(heroismBard)
                                                        .addComponent(tashasHideousLaughterBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(identifyBard)
                                                        .addComponent(thunderwaveBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(illusoryScriptBard)
                                                        .addComponent(unseenServantBard)))
                                        .addGroup(bardSpellPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel29)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(bladeWardBard)
                                                        .addComponent(mendingBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(dancingLightsBard)
                                                        .addComponent(messageBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(friendsBard)
                                                        .addComponent(minorIllusionBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lightBard)
                                                        .addComponent(prestidigitationBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(trueStrikeBard)
                                                        .addComponent(mageHandBard))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(viciousMockeryBard)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toBardEquipmentPanel)
                                .addContainerGap(111, Short.MAX_VALUE))
        );

        mainPanel.add(bardSpellPanel, "bardSpellPanel");

        jLabel39.setText("Make Bard Equipment Selections:");

        buttonGroup23.add(diplomatPackBard);
        diplomatPackBard.setText("Diplomat Pack");

        buttonGroup23.add(entertainerPackBard);
        entertainerPackBard.setText("Entertainer Pack");

        buttonGroup24.add(rapierBard);
        rapierBard.setText("Rapier");
        rapierBard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rapierBardActionPerformed();
            }
        });

        buttonGroup24.add(simpleWeaponBard);
        simpleWeaponBard.setText("Any Simple Weapon");
        simpleWeaponBard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleWeaponBardActionPerformed();
            }
        });

        buttonGroup24.add(longswordBard);
        longswordBard.setText("Longsword");
        longswordBard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longswordBardActionPerformed();
            }
        });

        jScrollPane2.setViewportView(simpleWeaponBardList);

        buttonGroup25.add(luteBard);
        luteBard.setText("Lute");
        luteBard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                luteBardActionPerformed();
            }
        });

        buttonGroup25.add(instrumentBard);
        instrumentBard.setText("Any Other Musical Instrument");
        instrumentBard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrumentBardActionPerformed();
            }
        });

        jScrollPane3.setViewportView(instrumentBardList);

        toMiscFromBard.setText("Next");
        toMiscFromBard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromBardActionPerformed();
            }
        });

        javax.swing.GroupLayout bardEquipmentPanelLayout = new javax.swing.GroupLayout(bardEquipmentPanel);
        bardEquipmentPanel.setLayout(bardEquipmentPanelLayout);
        bardEquipmentPanelLayout.setHorizontalGroup(
                bardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bardEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(bardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(bardEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(251, 251, 251)
                                                .addComponent(jLabel39))
                                        .addGroup(bardEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(123, 123, 123)
                                                .addComponent(diplomatPackBard)
                                                .addGap(148, 148, 148)
                                                .addComponent(entertainerPackBard))
                                        .addGroup(bardEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(109, 109, 109)
                                                .addGroup(bardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(bardEquipmentPanelLayout.createSequentialGroup()
                                                                .addComponent(rapierBard)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(longswordBard)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(simpleWeaponBard)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(bardEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(96, 96, 96)
                                                .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(bardEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(110, 110, 110)
                                                .addComponent(luteBard)
                                                .addGap(57, 57, 57)
                                                .addComponent(instrumentBard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(toMiscFromBard)))
                                .addContainerGap(111, Short.MAX_VALUE))
        );
        bardEquipmentPanelLayout.setVerticalGroup(
                bardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bardEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel39)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(diplomatPackBard)
                                        .addComponent(entertainerPackBard))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(bardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(bardEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(35, 35, 35)
                                                .addGroup(bardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(simpleWeaponBard)
                                                        .addComponent(longswordBard)
                                                        .addComponent(rapierBard)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bardEquipmentPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(bardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(bardEquipmentPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(bardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(bardEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(luteBard)
                                                                .addComponent(instrumentBard))
                                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addContainerGap(66, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bardEquipmentPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(toMiscFromBard)
                                                .addGap(15, 15, 15))))
        );

        mainPanel.add(bardEquipmentPanel, "bardEquipmentPanel");

        jLabel31.setText("Choose 4 Cantrips:");

        jLabel32.setText("Choose 2 1st-Level Spells:");

        acidSplashSorcerer.setText("Acid Splash");

        bladeWardSorcerer.setText("Blade Ward");

        chillTouchSorcerer.setText("Chill Touch");

        dancingLightsSorcerer.setText("Dancing Lights");

        fireBoltSorcerer.setText("Fire Bolt");

        friendsSorcerer.setText("Friends");

        lightSorcerer.setText("Light");

        mageHandSorcerer.setText("Mage Hand");

        mendingSorcerer.setText("Mending");

        messageSorcerer.setText("Message");

        minorIllusionSorcerer.setText("Minor Illusion");

        poisonSpraySorcerer.setText("Poison Spray");

        prestidigitationSorcerer.setText("Prestidigitation");

        rayOfFrostSorcerer.setText("Ray of Frost");

        shockingGraspSorcerer.setText("Shocking Grasp");

        trueStrikeSorcerer.setText("True Strike");

        burningHandsSorcerer.setText("Burning Hands");

        charmPersonSorcerer.setText("Charm Person");

        chromaticOrbSorcerer.setText("Chromatic Orb");

        colorSpraySorcerer.setText("Color Spray");

        comprehendLanguagesSorcerer.setText("Comprehend Languages");

        detectMagicSorcerer.setText("Detect Magic");

        disguiseSelfSorcerer.setText("Disguise Self");

        expeditiousRetreatSorcerer.setText("Expeditious Retreat");

        falseLifeSorcerer.setText("False Life");

        featherFallSorcerer.setText("Feather Fall");

        fogCloudSorcerer.setText("Fog Cloud");

        jumpSorcerer.setText("Jump");

        mageArmorSorcerer.setText("Mage Armor");

        magicMissileSorcerer.setText("Magic Missile");

        rayOfSicknessSorcerer.setText("Ray of Sickness");

        shieldSorcerer.setText("Shield");

        silentImageSorcerer.setText("Silent Image");

        toSorcererEquipmentPanel.setText("Next");
        toSorcererEquipmentPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toSorcererEquipmentPanelActionPerformed();
            }
        });

        javax.swing.GroupLayout sorcererSpellPanelLayout = new javax.swing.GroupLayout(sorcererSpellPanel);
        sorcererSpellPanel.setLayout(sorcererSpellPanelLayout);
        sorcererSpellPanelLayout.setHorizontalGroup(
                sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel32)
                                .addGap(201, 201, 201))
                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(acidSplashSorcerer)
                                        .addComponent(bladeWardSorcerer)
                                        .addComponent(chillTouchSorcerer)
                                        .addComponent(dancingLightsSorcerer)
                                        .addComponent(fireBoltSorcerer)
                                        .addComponent(friendsSorcerer)
                                        .addComponent(lightSorcerer)
                                        .addComponent(mageHandSorcerer))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(trueStrikeSorcerer)
                                        .addComponent(shockingGraspSorcerer)
                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(mendingSorcerer)
                                                        .addComponent(messageSorcerer)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(minorIllusionSorcerer)
                                                                .addComponent(poisonSpraySorcerer)
                                                                .addComponent(prestidigitationSorcerer)
                                                                .addComponent(rayOfFrostSorcerer)))
                                                .addGap(22, 22, 22)
                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                .addGap(5, 5, 5)
                                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                                .addComponent(chromaticOrbSorcerer)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(expeditiousRetreatSorcerer))
                                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                                .addComponent(colorSpraySorcerer)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(falseLifeSorcerer)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(shieldSorcerer))
                                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                                .addComponent(comprehendLanguagesSorcerer)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(fogCloudSorcerer))
                                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                                .addComponent(mageArmorSorcerer)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                                                .addComponent(silentImageSorcerer)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                                .addComponent(toSorcererEquipmentPanel))
                                                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                                                .addComponent(magicMissileSorcerer)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(rayOfSicknessSorcerer))))))
                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(charmPersonSorcerer)
                                                                        .addComponent(burningHandsSorcerer))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                                .addComponent(disguiseSelfSorcerer)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(jumpSorcerer))
                                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                                .addComponent(detectMagicSorcerer)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(featherFallSorcerer)))))))
                                .addContainerGap(110, Short.MAX_VALUE))
        );
        sorcererSpellPanelLayout.setVerticalGroup(
                sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel31)
                                        .addComponent(jLabel32))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(acidSplashSorcerer)
                                                        .addComponent(mendingSorcerer))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(bladeWardSorcerer)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(chillTouchSorcerer)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dancingLightsSorcerer)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(friendsSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(fireBoltSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lightSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(mageHandSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(burningHandsSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(detectMagicSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(featherFallSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                .addComponent(messageSorcerer)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(minorIllusionSorcerer)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(poisonSpraySorcerer)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(prestidigitationSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(rayOfFrostSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(shockingGraspSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(trueStrikeSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(sorcererSpellPanelLayout.createSequentialGroup()
                                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(charmPersonSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(disguiseSelfSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jumpSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(chromaticOrbSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(expeditiousRetreatSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(colorSpraySorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(falseLifeSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(shieldSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(comprehendLanguagesSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(fogCloudSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(mageArmorSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(magicMissileSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(rayOfSicknessSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(sorcererSpellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(silentImageSorcerer, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(toSorcererEquipmentPanel))))))
                                .addContainerGap(73, Short.MAX_VALUE))
        );

        mainPanel.add(sorcererSpellPanel, "sorcererSpellPanel");

        jLabel41.setText("Make Sorcerer Equipment Choices:");

        buttonGroup23.add(lightCrossbowSorcerer);
        lightCrossbowSorcerer.setText("Light Crossbow + 20 bolts");
        lightCrossbowSorcerer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightCrossbowSorcererActionPerformed();
            }
        });

        buttonGroup23.add(simpleWeaponSorcerer);
        simpleWeaponSorcerer.setText("Any Simple Weapon");
        simpleWeaponSorcerer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleWeaponSorcererActionPerformed();
            }
        });

        jScrollPane7.setViewportView(simpleWeaponSorcererList);

        buttonGroup24.add(componentPouchSorcerer);
        componentPouchSorcerer.setText("Component Pouch");

        buttonGroup24.add(arcaneFocusSorcerer);
        arcaneFocusSorcerer.setText("Arcane Focus");

        buttonGroup25.add(explorerPackSorcerer);
        explorerPackSorcerer.setText("Explorer Pack");

        buttonGroup25.add(dungeoneerPackSorcerer);
        dungeoneerPackSorcerer.setText("Dungeoneer Pack");

        toMiscFromSorcerer.setText("Next");
        toMiscFromSorcerer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromSorcererActionPerformed();
            }
        });

        javax.swing.GroupLayout sorcererEquipmentPanelLayout = new javax.swing.GroupLayout(sorcererEquipmentPanel);
        sorcererEquipmentPanel.setLayout(sorcererEquipmentPanelLayout);
        sorcererEquipmentPanelLayout.setHorizontalGroup(
                sorcererEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(sorcererEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(sorcererEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(sorcererEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(77, 77, 77)
                                                .addComponent(lightCrossbowSorcerer)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(sorcererEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(sorcererEquipmentPanelLayout.createSequentialGroup()
                                                                .addComponent(simpleWeaponSorcerer)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jLabel41)))
                                        .addGroup(sorcererEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(160, 160, 160)
                                                .addComponent(componentPouchSorcerer)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(arcaneFocusSorcerer))
                                        .addGroup(sorcererEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(93, 93, 93)
                                                .addGroup(sorcererEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jSeparator16, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                                                        .addComponent(jSeparator17)))
                                        .addGroup(sorcererEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(165, 165, 165)
                                                .addComponent(dungeoneerPackSorcerer)
                                                .addGap(31, 31, 31)
                                                .addComponent(explorerPackSorcerer)
                                                .addGap(85, 85, 85)
                                                .addComponent(toMiscFromSorcerer)))
                                .addContainerGap(157, Short.MAX_VALUE))
        );
        sorcererEquipmentPanelLayout.setVerticalGroup(
                sorcererEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(sorcererEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(sorcererEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(sorcererEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(34, 34, 34)
                                                .addGroup(sorcererEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(simpleWeaponSorcerer)
                                                        .addComponent(lightCrossbowSorcerer)))
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(13, 13, 13)
                                .addComponent(jSeparator16, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(sorcererEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(componentPouchSorcerer)
                                        .addComponent(arcaneFocusSorcerer))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(sorcererEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(explorerPackSorcerer)
                                        .addComponent(dungeoneerPackSorcerer)
                                        .addComponent(toMiscFromSorcerer))
                                .addContainerGap(144, Short.MAX_VALUE))
        );

        mainPanel.add(sorcererEquipmentPanel, "sorcererEquipmentPanel");

        jLabel35.setText("Make Equipment Choices for Barbarian:");

        buttonGroup19.add(greataxeBarbarian);
        greataxeBarbarian.setText("Greataxe");
        greataxeBarbarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greataxeBarbarianActionPerformed();
            }
        });

        buttonGroup19.add(martialWeaponBarbarian);
        martialWeaponBarbarian.setText("Any Martial Weapon");
        martialWeaponBarbarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                martialWeaponBarbarianActionPerformed();
            }
        });

        martialWeaponBarbarianScroll.setViewportView(martialWeaponBarbarianList);

        buttonGroup20.add(handaxeBarbarian);
        handaxeBarbarian.setText("2 Handaxes");
        handaxeBarbarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handaxeBarbarianActionPerformed();
            }
        });

        buttonGroup20.add(simpleWeaponBarbarian);
        simpleWeaponBarbarian.setText("Any Simple Weapon");
        simpleWeaponBarbarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleWeaponBarbarianActionPerformed();
            }
        });

        simpleWeaponBarbarianScroll.setViewportView(simpleWeaponBarbarianList);

        toMiscFromBarbarian.setText("Next");
        toMiscFromBarbarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromBarbarianActionPerformed();
            }
        });

        javax.swing.GroupLayout barbarianEquipmentPanelLayout = new javax.swing.GroupLayout(barbarianEquipmentPanel);
        barbarianEquipmentPanel.setLayout(barbarianEquipmentPanelLayout);
        barbarianEquipmentPanelLayout.setHorizontalGroup(
                barbarianEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, barbarianEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(barbarianEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(barbarianEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(0, 131, Short.MAX_VALUE)
                                                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(barbarianEquipmentPanelLayout.createSequentialGroup()
                                                .addGroup(barbarianEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(barbarianEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(128, 128, 128)
                                                                .addComponent(greataxeBarbarian)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(martialWeaponBarbarian))
                                                        .addGroup(barbarianEquipmentPanelLayout.createSequentialGroup()
                                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jLabel35)))
                                                .addGap(29, 29, 29)
                                                .addComponent(martialWeaponBarbarianScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, barbarianEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(126, 126, 126)
                                                .addComponent(handaxeBarbarian)
                                                .addGap(119, 119, 119)
                                                .addComponent(simpleWeaponBarbarian)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(barbarianEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(barbarianEquipmentPanelLayout.createSequentialGroup()
                                                                .addComponent(toMiscFromBarbarian)
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addComponent(simpleWeaponBarbarianScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                                .addGap(65, 65, 65))
        );
        barbarianEquipmentPanelLayout.setVerticalGroup(
                barbarianEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(barbarianEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(barbarianEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(martialWeaponBarbarianScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(barbarianEquipmentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel35)
                                                .addGap(18, 18, 18)
                                                .addGroup(barbarianEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(greataxeBarbarian)
                                                        .addComponent(martialWeaponBarbarian))))
                                .addGap(11, 11, 11)
                                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(barbarianEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(barbarianEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(barbarianEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(handaxeBarbarian)
                                                        .addComponent(simpleWeaponBarbarian)))
                                        .addGroup(barbarianEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addComponent(simpleWeaponBarbarianScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(toMiscFromBarbarian)
                                .addContainerGap(96, Short.MAX_VALUE))
        );

        mainPanel.add(barbarianEquipmentPanel, "barbarianEquipmentPanel");

        jLabel40.setText("Make Fighter Equipment Selections:");

        buttonGroup22.add(chainMailFighter);
        chainMailFighter.setText("Chain Mail");

        buttonGroup22.add(leatherArmorFighter);
        leatherArmorFighter.setText("Leather Armor, Longbow + 20 arrows");

        buttonGroup23.add(lightCrossbowFighter);
        lightCrossbowFighter.setText("Light Crossbow + 20 bolts");

        buttonGroup23.add(handaxeFighter);
        handaxeFighter.setText("2 Handaxes");

        buttonGroup24.add(dungeoneerPackFighter);
        dungeoneerPackFighter.setText("Dungeoneer Pack");

        buttonGroup24.add(explorerPackFighter);
        explorerPackFighter.setText("Explorer Pack");

        buttonGroup25.add(shieldFighter);
        shieldFighter.setText("Martial Weapon + Shield");
        shieldFighter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shieldFighterActionPerformed();
            }
        });

        jScrollPane4.setViewportView(martialWeaponFighterList1);

        buttonGroup25.add(martialWeaponsFighter);
        martialWeaponsFighter.setText("2 Martial Weapons");
        martialWeaponsFighter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                martialWeaponsFighterActionPerformed();
            }
        });

        jScrollPane5.setViewportView(martialWeaponFighterList2);

        jScrollPane6.setViewportView(martialWeaponFighterList3);

        toMiscFromFighter.setText("Next");
        toMiscFromFighter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromFighterActionPerformed();
            }
        });

        javax.swing.GroupLayout fighterEquipmentPanelLayout = new javax.swing.GroupLayout(fighterEquipmentPanel);
        fighterEquipmentPanel.setLayout(fighterEquipmentPanelLayout);
        fighterEquipmentPanelLayout.setHorizontalGroup(
                fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fighterEquipmentPanelLayout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                                .addComponent(chainMailFighter)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(leatherArmorFighter))
                                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                                .addComponent(dungeoneerPackFighter)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(explorerPackFighter))
                                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                                .addComponent(lightCrossbowFighter)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(handaxeFighter)))
                                .addGap(180, 180, 180))
                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(81, 81, 81)
                                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jSeparator15, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(shieldFighter)
                                                                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                                                                .addGap(29, 29, 29)
                                                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(33, 33, 33)
                                                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(martialWeaponsFighter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(toMiscFromFighter))))
                                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(224, 224, 224)
                                                .addComponent(jLabel40)))
                                .addContainerGap(116, Short.MAX_VALUE))
        );
        fighterEquipmentPanelLayout.setVerticalGroup(
                fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(toMiscFromFighter)
                                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel40)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(chainMailFighter)
                                                        .addComponent(leatherArmorFighter))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(2, 2, 2)
                                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lightCrossbowFighter)
                                                        .addComponent(handaxeFighter))
                                                .addGap(5, 5, 5)
                                                .addComponent(jSeparator15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(1, 1, 1)
                                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(dungeoneerPackFighter)
                                                        .addComponent(explorerPackFighter))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(fighterEquipmentPanelLayout.createSequentialGroup()
                                                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(shieldFighter)
                                                                        .addComponent(martialWeaponsFighter))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(fighterEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(85, Short.MAX_VALUE))
        );

        mainPanel.add(fighterEquipmentPanel, "fighterEquipmentPanel");

        jLabel43.setText("Make Ranger Equipment Selections:");

        buttonGroup25.add(leatherArmorRanger);
        leatherArmorRanger.setText("Leather Armor");

        buttonGroup25.add(scaleMailRanger);
        scaleMailRanger.setText("Scale Mail");

        buttonGroup24.add(dungeoneerPackRanger);
        dungeoneerPackRanger.setText("Dungeoneer Pack");

        buttonGroup24.add(explorerPackRanger);
        explorerPackRanger.setText("Explorer Pack");

        buttonGroup23.add(shortswordsRanger);
        shortswordsRanger.setText("2 Shortswords");
        shortswordsRanger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortswordsRangerActionPerformed();
            }
        });

        buttonGroup23.add(simpleWeaponsRanger);
        simpleWeaponsRanger.setText("2 Simple Melee Weapons");
        simpleWeaponsRanger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleWeaponsRangerActionPerformed();
            }
        });

        jScrollPane9.setViewportView(simpleWeaponRangerList1);

        jScrollPane10.setViewportView(simpleWeaponRangerList2);

        toMiscFromRanger.setText("Next");
        toMiscFromRanger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromRangerActionPerformed();
            }
        });

        javax.swing.GroupLayout rangerEquipmentPanelLayout = new javax.swing.GroupLayout(rangerEquipmentPanel);
        rangerEquipmentPanel.setLayout(rangerEquipmentPanelLayout);
        rangerEquipmentPanelLayout.setHorizontalGroup(
                rangerEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(rangerEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(rangerEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(rangerEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(219, 219, 219)
                                                .addGroup(rangerEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(rangerEquipmentPanelLayout.createSequentialGroup()
                                                                .addComponent(dungeoneerPackRanger)
                                                                .addGap(34, 34, 34)
                                                                .addComponent(explorerPackRanger))
                                                        .addGroup(rangerEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addComponent(jLabel43)
                                                                .addGroup(rangerEquipmentPanelLayout.createSequentialGroup()
                                                                        .addComponent(scaleMailRanger)
                                                                        .addGap(34, 34, 34)
                                                                        .addComponent(leatherArmorRanger)))))
                                        .addGroup(rangerEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(98, 98, 98)
                                                .addGroup(rangerEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jSeparator20, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                                                        .addComponent(jSeparator21)))
                                        .addGroup(rangerEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(150, 150, 150)
                                                .addComponent(shortswordsRanger)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(simpleWeaponsRanger)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rangerEquipmentPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(toMiscFromRanger)
                                                .addGap(144, 144, 144)))
                                .addContainerGap(61, Short.MAX_VALUE))
        );
        rangerEquipmentPanelLayout.setVerticalGroup(
                rangerEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(rangerEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel43)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(rangerEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(leatherArmorRanger)
                                        .addComponent(scaleMailRanger))
                                .addGap(3, 3, 3)
                                .addComponent(jSeparator20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addGroup(rangerEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(explorerPackRanger)
                                        .addComponent(dungeoneerPackRanger))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(rangerEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(rangerEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(shortswordsRanger)
                                                .addComponent(simpleWeaponsRanger))
                                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(toMiscFromRanger)
                                .addContainerGap(108, Short.MAX_VALUE))
        );

        mainPanel.add(rangerEquipmentPanel, "rangerEquipmentPanel");

        jLabel44.setText("Make Paladin Equipment Selections:");

        buttonGroup23.add(explorerPackPaladin);
        explorerPackPaladin.setText("Explorer's Pack");

        buttonGroup23.add(priestPackPaladin);
        priestPackPaladin.setText("Priest's Pack");

        buttonGroup24.add(javelinPaladin);
        javelinPaladin.setText("5 Javelins");
        javelinPaladin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                javelinPaladinActionPerformed();
            }
        });

        buttonGroup24.add(simpleWeaponPaladin);
        simpleWeaponPaladin.setText("Any Simple Melee Weapon");
        simpleWeaponPaladin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleWeaponPaladinActionPerformed();
            }
        });

        jScrollPane11.setViewportView(simpleWeaponPaladinList);

        buttonGroup25.add(martialWeaponPaladin2);
        martialWeaponPaladin2.setText("2 Martial Weapons");
        martialWeaponPaladin2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                martialWeaponPaladin2ActionPerformed();
            }
        });

        buttonGroup25.add(martialWeaponPaladin1);
        martialWeaponPaladin1.setText("Martial Weapon + Shield");
        martialWeaponPaladin1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                martialWeaponPaladin1ActionPerformed();
            }
        });

        jScrollPane12.setViewportView(martialWeaponPaladinList1);

        jScrollPane13.setViewportView(martialWeaponPaladinList2);

        jScrollPane14.setViewportView(martialWeaponPaladinList3);

        toMiscFromPaladin.setText("Next");
        toMiscFromPaladin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromPaladinActionPerformed();
            }
        });

        javax.swing.GroupLayout paladinEquipmentPanelLayout = new javax.swing.GroupLayout(paladinEquipmentPanel);
        paladinEquipmentPanel.setLayout(paladinEquipmentPanelLayout);
        paladinEquipmentPanelLayout.setHorizontalGroup(
                paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paladinEquipmentPanelLayout.createSequentialGroup()
                                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                                                .addComponent(priestPackPaladin)
                                                                .addGap(129, 129, 129)
                                                                .addComponent(explorerPackPaladin)
                                                                .addGap(73, 73, 73))
                                                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                                                .addComponent(javelinPaladin)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(simpleWeaponPaladin)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paladinEquipmentPanelLayout.createSequentialGroup()
                                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(martialWeaponPaladin1)
                                                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(29, 29, 29)
                                                                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(19, 19, 19)
                                                                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(31, 31, 31)
                                                                .addComponent(toMiscFromPaladin))
                                                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(58, 58, 58)
                                                                .addComponent(martialWeaponPaladin2)))))
                                .addGap(39, 39, 39))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paladinEquipmentPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel44)
                                .addGap(272, 272, 272))
                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                .addGap(123, 123, 123)
                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jSeparator23, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSeparator22, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(114, Short.MAX_VALUE))
        );
        paladinEquipmentPanelLayout.setVerticalGroup(
                paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel44)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(explorerPackPaladin)
                                        .addComponent(priestPackPaladin))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(javelinPaladin)
                                                        .addComponent(simpleWeaponPaladin)))
                                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                                .addComponent(toMiscFromPaladin)
                                                .addGap(41, 41, 41))
                                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(martialWeaponPaladin1)
                                                        .addComponent(martialWeaponPaladin2))
                                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(1, 1, 1)
                                                                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(paladinEquipmentPanelLayout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(paladinEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGap(18, 18, 18))))
        );

        mainPanel.add(paladinEquipmentPanel, "paladinEquipmentPanel");

        buttonGroup25.add(explorerPackRogue);
        explorerPackRogue.setText("Explorer Pack");

        buttonGroup25.add(burglerPackRogue);
        burglerPackRogue.setText(" Burgler's Pack");

        buttonGroup24.add(shortbowRogue);
        shortbowRogue.setText("Shortbow + 20 arrows");

        buttonGroup24.add(shortswordRogue2);
        shortswordRogue2.setText("Shortsword");

        buttonGroup23.add(shortswordRogue);
        shortswordRogue.setText("Shortsword");

        buttonGroup23.add(rapierRogue);
        rapierRogue.setText("Rapier");

        jLabel38.setText("Make Rogue Equipment Selection:");

        toMiscFromRogue.setText("Next");
        toMiscFromRogue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromRogueActionPerformed();
            }
        });

        buttonGroup25.add(dungeoneerPackRogue);
        dungeoneerPackRogue.setText("Dungeoneer Pack");

        javax.swing.GroupLayout rogueEquipmentPanelLayout = new javax.swing.GroupLayout(rogueEquipmentPanel);
        rogueEquipmentPanel.setLayout(rogueEquipmentPanelLayout);
        rogueEquipmentPanelLayout.setHorizontalGroup(
                rogueEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(rogueEquipmentPanelLayout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(rogueEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(rogueEquipmentPanelLayout.createSequentialGroup()
                                                .addGroup(rogueEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(rogueEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(177, 177, 177)
                                                                .addComponent(jLabel38))
                                                        .addGroup(rogueEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(57, 57, 57)
                                                                .addComponent(rapierRogue)
                                                                .addGap(149, 149, 149)
                                                                .addComponent(shortswordRogue))
                                                        .addGroup(rogueEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(57, 57, 57)
                                                                .addComponent(shortbowRogue)
                                                                .addGap(110, 110, 110)
                                                                .addComponent(shortswordRogue2))
                                                        .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(rogueEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(58, 58, 58)
                                                                .addComponent(dungeoneerPackRogue)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(burglerPackRogue)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(explorerPackRogue)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rogueEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(472, 472, 472)
                                                .addComponent(toMiscFromRogue)))
                                .addContainerGap(150, Short.MAX_VALUE))
        );
        rogueEquipmentPanelLayout.setVerticalGroup(
                rogueEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(rogueEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel38)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(rogueEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rapierRogue)
                                        .addComponent(shortswordRogue))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(rogueEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(shortbowRogue)
                                        .addComponent(shortswordRogue2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(rogueEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(burglerPackRogue)
                                        .addComponent(explorerPackRogue)
                                        .addComponent(dungeoneerPackRogue))
                                .addGap(46, 46, 46)
                                .addComponent(toMiscFromRogue)
                                .addContainerGap(159, Short.MAX_VALUE))
        );

        mainPanel.add(rogueEquipmentPanel, "rogueEquipmentPanel");

        jLabel36.setText("Make Equipment Selections for Monk:");

        buttonGroup21.add(shortswordMonk);
        shortswordMonk.setText("Shortsword");
        shortswordMonk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortswordMonkActionPerformed();
            }
        });

        buttonGroup21.add(simpleWeaponMonk);
        simpleWeaponMonk.setText("Any Simple Weapon");
        simpleWeaponMonk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleWeaponMonkActionPerformed();
            }
        });

        jScrollPane1.setViewportView(simpleWeaponMonkList);

        buttonGroup22.add(dungeoneerPackMonk);
        dungeoneerPackMonk.setText("Dungeoneer's Pack");

        buttonGroup22.add(explorersPackMonk);
        explorersPackMonk.setText("Explorer's Pack");

        toMiscFromMonk.setText("Next");
        toMiscFromMonk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromMonkActionPerformed();
            }
        });

        javax.swing.GroupLayout monkEquipmentPanelLayout = new javax.swing.GroupLayout(monkEquipmentPanel);
        monkEquipmentPanel.setLayout(monkEquipmentPanelLayout);
        monkEquipmentPanelLayout.setHorizontalGroup(
                monkEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(monkEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(monkEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(monkEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(monkEquipmentPanelLayout.createSequentialGroup()
                                                        .addGroup(monkEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(monkEquipmentPanelLayout.createSequentialGroup()
                                                                        .addGap(234, 234, 234)
                                                                        .addComponent(jLabel36))
                                                                .addGroup(monkEquipmentPanelLayout.createSequentialGroup()
                                                                        .addGap(150, 150, 150)
                                                                        .addComponent(shortswordMonk)
                                                                        .addGap(111, 111, 111)
                                                                        .addComponent(simpleWeaponMonk)))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(monkEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(144, 144, 144)
                                                .addComponent(dungeoneerPackMonk)
                                                .addGap(71, 71, 71)
                                                .addComponent(explorersPackMonk)))
                                .addContainerGap(115, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, monkEquipmentPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(toMiscFromMonk)
                                .addGap(68, 68, 68))
        );
        monkEquipmentPanelLayout.setVerticalGroup(
                monkEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(monkEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(monkEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(monkEquipmentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel36)
                                                .addGap(18, 18, 18)
                                                .addGroup(monkEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(shortswordMonk)
                                                        .addComponent(simpleWeaponMonk))))
                                .addGap(32, 32, 32)
                                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addGroup(monkEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dungeoneerPackMonk)
                                        .addComponent(explorersPackMonk))
                                .addGap(26, 26, 26)
                                .addComponent(toMiscFromMonk)
                                .addContainerGap(123, Short.MAX_VALUE))
        );

        mainPanel.add(monkEquipmentPanel, "monkEquipmentPanel");

        finalizeButton.setText("Finalize Character");
        finalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizeButtonActionPerformed();
            }
        });

        saveCharacterFile.setText("Save to File");
        saveCharacterFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCharacterFileActionPerformed();
            }
        });

        javax.swing.GroupLayout miscellaneousPanelLayout = new javax.swing.GroupLayout(miscellaneousPanel);
        miscellaneousPanel.setLayout(miscellaneousPanelLayout);
        miscellaneousPanelLayout.setHorizontalGroup(
                miscellaneousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(miscellaneousPanelLayout.createSequentialGroup()
                                .addGroup(miscellaneousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(miscellaneousPanelLayout.createSequentialGroup()
                                                .addGap(286, 286, 286)
                                                .addComponent(finalizeButton))
                                        .addGroup(miscellaneousPanelLayout.createSequentialGroup()
                                                .addGap(306, 306, 306)
                                                .addComponent(saveCharacterFile)))
                                .addContainerGap(329, Short.MAX_VALUE))
        );
        miscellaneousPanelLayout.setVerticalGroup(
                miscellaneousPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(miscellaneousPanelLayout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(finalizeButton)
                                .addGap(34, 34, 34)
                                .addComponent(saveCharacterFile)
                                .addContainerGap(192, Short.MAX_VALUE))
        );

        mainPanel.add(miscellaneousPanel, "miscellaneousPanel");

        buttonGroup26.add(acidSplashWizard1);
        acidSplashWizard1.setText("Acid Splash");

        buttonGroup26.add(bladeWardWizard1);
        bladeWardWizard1.setText("Blade Ward");

        buttonGroup26.add(chillTouchWizard1);
        chillTouchWizard1.setText("Chill Touch");

        buttonGroup26.add(dancingLightsWizard1);
        dancingLightsWizard1.setText("Dancing Lights");

        buttonGroup26.add(mageHandWizard1);
        mageHandWizard1.setText("Mage Hand");

        buttonGroup26.add(lightWizard1);
        lightWizard1.setText("Light");

        buttonGroup26.add(friendsWizard1);
        friendsWizard1.setText("Friends");

        buttonGroup26.add(fireBoltWizard1);
        fireBoltWizard1.setText("Fire Bolt");

        buttonGroup26.add(mendingWizard1);
        mendingWizard1.setText("Mending");

        buttonGroup26.add(messageWizard1);
        messageWizard1.setText("Message");

        buttonGroup26.add(minorIllusionWizard1);
        minorIllusionWizard1.setText("Minor Illusion");

        buttonGroup26.add(poisonSprayWizard1);
        poisonSprayWizard1.setText("Poison Spray");

        buttonGroup26.add(trueStrikeWizard1);
        trueStrikeWizard1.setText("True Strike");

        buttonGroup26.add(shockingGraspWizard1);
        shockingGraspWizard1.setText("Shocking Grasp");

        buttonGroup26.add(rayOfFrostWizard1);
        rayOfFrostWizard1.setText("Ray of Frost");

        buttonGroup26.add(prestidigitationWizard1);
        prestidigitationWizard1.setText("Prestidigitation");

        jLabel45.setText("Choose 1 Wizard Cantrip for your High Elf:");

        fromHighElfPanel.setText("Next");
        fromHighElfPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromHighElfPanelActionPerformed();
            }
        });

        javax.swing.GroupLayout highElfWizardCantripPanelLayout = new javax.swing.GroupLayout(highElfWizardCantripPanel);
        highElfWizardCantripPanel.setLayout(highElfWizardCantripPanelLayout);
        highElfWizardCantripPanelLayout.setHorizontalGroup(
                highElfWizardCantripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(highElfWizardCantripPanelLayout.createSequentialGroup()
                                .addContainerGap(139, Short.MAX_VALUE)
                                .addGroup(highElfWizardCantripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, highElfWizardCantripPanelLayout.createSequentialGroup()
                                                .addGroup(highElfWizardCantripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel45)
                                                        .addGroup(highElfWizardCantripPanelLayout.createSequentialGroup()
                                                                .addGroup(highElfWizardCantripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(prestidigitationWizard1)
                                                                        .addComponent(rayOfFrostWizard1)
                                                                        .addComponent(shockingGraspWizard1)
                                                                        .addComponent(trueStrikeWizard1))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(highElfWizardCantripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(dancingLightsWizard1)
                                                                        .addComponent(acidSplashWizard1)
                                                                        .addComponent(chillTouchWizard1)
                                                                        .addComponent(bladeWardWizard1))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(highElfWizardCantripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(mageHandWizard1)
                                                                        .addComponent(fireBoltWizard1)
                                                                        .addComponent(lightWizard1)
                                                                        .addComponent(friendsWizard1))))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(highElfWizardCantripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(poisonSprayWizard1)
                                                        .addComponent(mendingWizard1)
                                                        .addComponent(minorIllusionWizard1)
                                                        .addComponent(messageWizard1))
                                                .addGap(136, 136, 136))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, highElfWizardCantripPanelLayout.createSequentialGroup()
                                                .addComponent(fromHighElfPanel)
                                                .addGap(55, 55, 55))))
        );
        highElfWizardCantripPanelLayout.setVerticalGroup(
                highElfWizardCantripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, highElfWizardCantripPanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel45)
                                .addGap(43, 43, 43)
                                .addGroup(highElfWizardCantripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(highElfWizardCantripPanelLayout.createSequentialGroup()
                                                .addComponent(acidSplashWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(bladeWardWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(chillTouchWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dancingLightsWizard1))
                                        .addGroup(highElfWizardCantripPanelLayout.createSequentialGroup()
                                                .addComponent(fireBoltWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(friendsWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lightWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(mageHandWizard1))
                                        .addGroup(highElfWizardCantripPanelLayout.createSequentialGroup()
                                                .addComponent(mendingWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(messageWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(minorIllusionWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(poisonSprayWizard1))
                                        .addGroup(highElfWizardCantripPanelLayout.createSequentialGroup()
                                                .addGap(58, 58, 58)
                                                .addComponent(shockingGraspWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(trueStrikeWizard1))
                                        .addGroup(highElfWizardCantripPanelLayout.createSequentialGroup()
                                                .addComponent(prestidigitationWizard1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(rayOfFrostWizard1)))
                                .addGap(18, 18, 18)
                                .addComponent(fromHighElfPanel)
                                .addContainerGap(133, Short.MAX_VALUE))
        );

        mainPanel.add(highElfWizardCantripPanel, "highElfWizardCantripPanel");

        jLabel34.setText("Make selections for Cleric Equipment:");

        buttonGroup15.add(maceCleric);
        maceCleric.setText("Mace");

        buttonGroup15.add(warhammerCleric);
        warhammerCleric.setText("Warhammer (if proficient)");

        buttonGroup16.add(scaleMailCleric);
        scaleMailCleric.setText("Scale Mail");

        buttonGroup16.add(leatherArmorCleric);
        leatherArmorCleric.setText("Leather Armor");

        buttonGroup16.add(chainMailCleric);
        chainMailCleric.setText("Chain Mail (if proficient in heavy armor)");

        buttonGroup17.add(lightCrossBowCleric);
        lightCrossBowCleric.setText("Light Crossbow + 20 bolts");
        lightCrossBowCleric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightCrossBowClericActionPerformed();
            }
        });

        buttonGroup17.add(simpleWeaponCleric);
        simpleWeaponCleric.setText("Any simple weapon");
        simpleWeaponCleric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleWeaponClericActionPerformed();
            }
        });

        simpleWeaponClericScroll.setViewportView(simpleWeaponClericList);

        buttonGroup18.add(priestPackCleric);
        priestPackCleric.setText("Priest's Pack");

        buttonGroup18.add(explorerPackCleric);
        explorerPackCleric.setText("Explorer's Pack");

        toMiscFromCleric.setText("Next");
        toMiscFromCleric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMiscFromClericActionPerformed();
            }
        });

        javax.swing.GroupLayout clericEquipmentPanelLayout = new javax.swing.GroupLayout(clericEquipmentPanel);
        clericEquipmentPanel.setLayout(clericEquipmentPanelLayout);
        clericEquipmentPanelLayout.setHorizontalGroup(
                clericEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clericEquipmentPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(toMiscFromCleric)
                                .addGap(151, 151, 151))
                        .addGroup(clericEquipmentPanelLayout.createSequentialGroup()
                                .addGroup(clericEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(clericEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(61, 61, 61)
                                                .addGroup(clericEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(clericEquipmentPanelLayout.createSequentialGroup()
                                                                .addGroup(clericEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(clericEquipmentPanelLayout.createSequentialGroup()
                                                                                .addGap(61, 61, 61)
                                                                                .addComponent(lightCrossBowCleric)
                                                                                .addGap(49, 49, 49)
                                                                                .addComponent(simpleWeaponCleric))
                                                                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(simpleWeaponClericScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(clericEquipmentPanelLayout.createSequentialGroup()
                                                                .addGap(6, 6, 6)
                                                                .addComponent(scaleMailCleric)
                                                                .addGap(59, 59, 59)
                                                                .addComponent(leatherArmorCleric)
                                                                .addGap(64, 64, 64)
                                                                .addComponent(chainMailCleric))
                                                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(clericEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(118, 118, 118)
                                                .addComponent(priestPackCleric)
                                                .addGap(65, 65, 65)
                                                .addComponent(explorerPackCleric))
                                        .addGroup(clericEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(262, 262, 262)
                                                .addComponent(jLabel34))
                                        .addGroup(clericEquipmentPanelLayout.createSequentialGroup()
                                                .addGap(237, 237, 237)
                                                .addComponent(maceCleric)
                                                .addGap(75, 75, 75)
                                                .addComponent(warhammerCleric)))
                                .addContainerGap(85, Short.MAX_VALUE))
        );
        clericEquipmentPanelLayout.setVerticalGroup(
                clericEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(clericEquipmentPanelLayout.createSequentialGroup()
                                .addComponent(jLabel34)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(clericEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(maceCleric)
                                        .addComponent(warhammerCleric))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(clericEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(scaleMailCleric)
                                        .addComponent(leatherArmorCleric)
                                        .addComponent(chainMailCleric))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(clericEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(clericEquipmentPanelLayout.createSequentialGroup()
                                                .addGroup(clericEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lightCrossBowCleric)
                                                        .addComponent(simpleWeaponCleric))
                                                .addGap(57, 57, 57)
                                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(simpleWeaponClericScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(clericEquipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(priestPackCleric)
                                        .addComponent(explorerPackCleric))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toMiscFromCleric)
                                .addGap(0, 85, Short.MAX_VALUE))
        );

        mainPanel.add(clericEquipmentPanel, "clericEquipmentPanel");

        jLabel4.setText("Ability Scores:");

        firstStatLabel.setText("0");

        secondStatLabel.setText("0");

        thirdStatLabel.setText("0");

        fourthStatLabel.setText("0");

        fifthStatLabel.setText("0");

        sixthStatLabel.setText("0");

        toAssignStatPanel.setText("Next");
        toAssignStatPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toAssignStatPanelActionPerformed();
            }
        });

        rollStatsButton.setText("Roll");
        rollStatsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollStatsButtonActionPerformed();
            }
        });

        buttonGroup27.add(defaultArray);
        defaultArray.setText("Default Array");
        defaultArray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultArrayActionPerformed();
            }
        });

        buttonGroup27.add(rollForScores);
        rollForScores.setText("Roll for Scores (4d6, drop lowest)");
        rollForScores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollForScoresActionPerformed();
            }
        });

        jLabel46.setText("Choose Score Selection Method:");

        buttonGroup27.add(manualEntry);
        manualEntry.setText("Manual Entry");
        manualEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualEntryActionPerformed();
            }
        });

        javax.swing.GroupLayout statPanelLayout = new javax.swing.GroupLayout(statPanel);
        statPanel.setLayout(statPanelLayout);
        statPanelLayout.setHorizontalGroup(
                statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(toAssignStatPanel)
                                .addGap(149, 149, 149))
                        .addGroup(statPanelLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(statPanelLayout.createSequentialGroup()
                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(rollForScores)
                                                        .addComponent(defaultArray)
                                                        .addComponent(manualEntry)
                                                        .addComponent(jLabel46))
                                                .addGap(79, 79, 79)
                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel4)
                                                        .addGroup(statPanelLayout.createSequentialGroup()
                                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(firstStatField, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                                                                        .addComponent(secondStatField)
                                                                        .addComponent(thirdStatField)
                                                                        .addComponent(fourthStatField)
                                                                        .addComponent(fifthStatField))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(firstStatLabel)
                                                                        .addComponent(secondStatLabel)
                                                                        .addComponent(thirdStatLabel)
                                                                        .addComponent(fourthStatLabel)
                                                                        .addComponent(fifthStatLabel)))
                                                        .addGroup(statPanelLayout.createSequentialGroup()
                                                                .addComponent(sixthStatField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(sixthStatLabel))))
                                        .addGroup(statPanelLayout.createSequentialGroup()
                                                .addComponent(rollStatsButton)
                                                .addGap(23, 23, 23)))
                                .addContainerGap(305, Short.MAX_VALUE))
        );
        statPanelLayout.setVerticalGroup(
                statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(statPanelLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel46)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(statPanelLayout.createSequentialGroup()
                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(firstStatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(firstStatLabel))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(secondStatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(secondStatLabel))
                                                .addGap(8, 8, 8)
                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(thirdStatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(thirdStatLabel))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(fourthStatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(fourthStatLabel))
                                                .addGap(7, 7, 7)
                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(fifthStatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(fifthStatLabel))
                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(statPanelLayout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(sixthStatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(sixthStatLabel))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(rollStatsButton)
                                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statPanelLayout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                                                                .addComponent(toAssignStatPanel)
                                                                .addGap(73, 73, 73))))
                                        .addGroup(statPanelLayout.createSequentialGroup()
                                                .addComponent(rollForScores)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(defaultArray)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(manualEntry)
                                                .addContainerGap())))
        );

        mainPanel.add(statPanel, "statPanel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        mainPanel.getAccessibleContext().setAccessibleName("mainPanel");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void startButtonActionPerformed() {//GEN-FIRST:event_startButtonActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "raceClassPanel");
        //create Character object and set up some UI elements for later
        this.newCharacter = new DnDCharacter();
        this.initialLangsSelected = 0;
        this.commonCheck.setSelected(true);
        this.newCharacter.addThisLanguage("Common");
        this.saveCharacterFile.setEnabled(false);
        this.rollStatsButton.setEnabled(false);
        this.firstStatField.setEditable(false);
        this.secondStatField.setEditable(false);
        this.thirdStatField.setEditable(false);
        this.fourthStatField.setEditable(false);
        this.fifthStatField.setEditable(false);
        this.sixthStatField.setEditable(false);
    }//GEN-LAST:event_startButtonActionPerformed

    private void toStatPanelButtonActionPerformed() {//GEN-FIRST:event_toStatPanelButtonActionPerformed

        if (this.raceList.isSelectionEmpty() || this.classList.isSelectionEmpty())
            JOptionPane.showMessageDialog(null, "Select a class and race before continuing.");
        else {
            //set race and class strings in Character object
            this.newCharacter.setRace(this.raceList.getSelectedValue().toString());
            this.newCharacter.setClass(this.classList.getSelectedValue().toString());

            //add racial languages amount to be chosen
            if (this.newCharacter.getRace().equals("Half-Elf"))
                this.newCharacter.setLanguageAmount(1);
            if (this.newCharacter.getRace().equals("Human") || this.newCharacter.getRace().equals("Human (Variant)"))
                this.newCharacter.setLanguageAmount(1);
            if (this.newCharacter.getRace().equals("High Elf"))
                this.newCharacter.setLanguageAmount(1);

            //change labels on assignstatpanel to reflect racial bonuses
            this.raceStatLabel3.setText(this.raceStatLabel1.getText());
            this.raceStatLabel4.setText(this.raceStatLabel2.getText());

            if (this.newCharacter.getRace().equals("High Elf")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "highElfWizardCantripPanel");
            } else {
                switch (this.newCharacter.getPlayerClass()) {
                    case "Cleric": {
                        this.clericArcanaCheck.setEnabled(false);
                        this.clericHistoryCheck.setEnabled(false);
                        this.clericNatureCheck.setEnabled(false);
                        this.clericReligionCheck.setEnabled(false);
                        this.clericAnimalHandlingRadio.setEnabled(false);
                        this.clericSurvivalRadio.setEnabled(false);
                        this.clericNatureRadio.setEnabled(false);
                        CardLayout card = (CardLayout) mainPanel.getLayout();
                        card.show(mainPanel, "clericDomainPanel");
                        break;
                    }
                    case "Fighter": {
                        CardLayout card = (CardLayout) mainPanel.getLayout();
                        card.show(mainPanel, "fightingStylePanel");
                        break;
                    }
                    case "Sorcerer": {
                        CardLayout card = (CardLayout) mainPanel.getLayout();
                        card.show(mainPanel, "sorcerousOriginPanel");
                        this.blueRadio.setEnabled(false);
                        this.blackRadio.setEnabled(false);
                        this.redRadio.setEnabled(false);
                        this.whiteRadio.setEnabled(false);
                        this.brassRadio.setEnabled(false);
                        this.bronzeRadio.setEnabled(false);
                        this.copperRadio.setEnabled(false);
                        this.goldRadio.setEnabled(false);
                        this.silverRadio.setEnabled(false);
                        this.greenRadio.setEnabled(false);
                        break;
                    }
                    case "Ranger": {
                        CardLayout card = (CardLayout) mainPanel.getLayout();
                        card.show(mainPanel, "favoredEnemyPanel");
                        break;
                    }
                    case "Warlock": {
                        CardLayout card = (CardLayout) mainPanel.getLayout();
                        card.show(mainPanel, "otherworldlyPatronPanel");
                        break;
                    }
                    default: {
                        CardLayout card = (CardLayout) mainPanel.getLayout();
                        card.show(mainPanel, "statPanel");
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_toStatPanelButtonActionPerformed

    private void rollStatsButtonActionPerformed() {//GEN-FIRST:event_rollStatsButtonActionPerformed
        // TODO add your handling code here:
        //roll 6 stat values and save to Character object
        ArrayList firstStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(0, (int)firstStat.get(4));
        this.firstStatLabel.setText(firstStat.get(4) + " (" + firstStat.get(0) + ", " + firstStat.get(1) + ", " + firstStat.get(2) + ", " + firstStat.get(3) + ")");

        ArrayList secondStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(0, (int)secondStat.get(4));
        this.secondStatLabel.setText(secondStat.get(4) + " (" + secondStat.get(0) + ", " + secondStat.get(1) + ", " + secondStat.get(2) + ", " + secondStat.get(3) + ")");

        ArrayList thirdStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(0, (int)thirdStat.get(4));
        this.thirdStatLabel.setText(thirdStat.get(4) + " (" + thirdStat.get(0) + ", " + thirdStat.get(1) + ", " + thirdStat.get(2) + ", " + thirdStat.get(3) + ")");

        ArrayList fourthStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(0, (int)fourthStat.get(4));
        this.fourthStatLabel.setText(fourthStat.get(4) + " (" + fourthStat.get(0) + ", " + fourthStat.get(1) + ", " + fourthStat.get(2) + ", " + fourthStat.get(3) + ")");

        ArrayList fifthStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(0, (int)fifthStat.get(4));
        this.fifthStatLabel.setText(fifthStat.get(4) + " (" + fifthStat.get(0) + ", " + fifthStat.get(1) + ", " + fifthStat.get(2) + ", " + fifthStat.get(3) + ")");

        ArrayList sixthStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(0, (int)sixthStat.get(4));
        this.sixthStatLabel.setText(sixthStat.get(4) + " (" + sixthStat.get(0) + ", " + sixthStat.get(1) + ", " + sixthStat.get(2) + ", " + sixthStat.get(3) + ")");
    }//GEN-LAST:event_rollStatsButtonActionPerformed

    private void toAssignStatPanelActionPerformed() {//GEN-FIRST:event_toAssignStatPanelActionPerformed
        // TODO add your handling code here:
        //checks for error if manual entry is selected
        boolean error1 = false;
        boolean error2 = false;
        if (this.manualEntry.isSelected()) {
            if (this.firstStatField.getText().equals(""))
                error1 = true;
            if (this.secondStatField.getText().equals(""))
                error1 = true;
            if (this.thirdStatField.getText().equals(""))
                error1 = true;
            if (this.fourthStatField.getText().equals(""))
                error1 = true;
            if (this.fifthStatField.getText().equals(""))
                error1 = true;
            if (this.sixthStatField.getText().equals(""))
                error1 = true;

            //check for error2 (if entries are numbers and are between 3&30 inclusive)
            String[] possibleValues = new String[28];
            int j = 3;
            for (int i = 0; i < 28; i++) {
                possibleValues[i] = j + "";
                j++;
            }
            j = 0;
            for (String value : possibleValues) {
                if (this.firstStatField.getText().equals(value))
                    j++;
                if (this.secondStatField.getText().equals(value))
                    j++;
                if (this.thirdStatField.getText().equals(value))
                    j++;
                if (this.fourthStatField.getText().equals(value))
                    j++;
                if (this.fifthStatField.getText().equals(value))
                    j++;
                if (this.sixthStatField.getText().equals(value))
                    j++;
            }
            if (j != 6)
                error2 = true;
        }
        if (this.firstStatLabel.getText().equals("0"))
            JOptionPane.showMessageDialog(null, "Must roll scores before continuing,");
        else if (this.manualEntry.isSelected() && error1)
            JOptionPane.showMessageDialog(null, "Must enter value for each score.");
        else if (this.manualEntry.isSelected() && error2)
            JOptionPane.showMessageDialog(null, "Values must be numbers between 3-30");
        else {
            if (this.manualEntry.isSelected()) {
                int stat1 = Integer.parseInt(this.firstStatField.getText());
                int stat2 = Integer.parseInt(this.secondStatField.getText());
                int stat3 = Integer.parseInt(this.thirdStatField.getText());
                int stat4 = Integer.parseInt(this.fourthStatField.getText());
                int stat5 = Integer.parseInt(this.fifthStatField.getText());
                int stat6 = Integer.parseInt(this.sixthStatField.getText());
                this.newCharacter.setStatRolls(0, stat1);
                this.newCharacter.setStatRolls(1, stat2);
                this.newCharacter.setStatRolls(2, stat3);
                this.newCharacter.setStatRolls(3, stat4);
                this.newCharacter.setStatRolls(4, stat5);
                this.newCharacter.setStatRolls(5, stat6);
            }
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "assignStatPanel");
            this.assignStat1.setText("" + this.newCharacter.getThisStatRoll(0));
            this.assignStat2.setText("" + this.newCharacter.getThisStatRoll(1));
            this.assignStat3.setText("" + this.newCharacter.getThisStatRoll(2));
            this.assignStat4.setText("" + this.newCharacter.getThisStatRoll(3));
            this.assignStat5.setText("" + this.newCharacter.getThisStatRoll(4));
            this.assignStat6.setText("" + this.newCharacter.getThisStatRoll(5));
        }
    }//GEN-LAST:event_toAssignStatPanelActionPerformed

    private void toBackgroundAlignmentPanelActionPerformed() {//GEN-FIRST:event_toBackgroundAlignmentPanelActionPerformed
        // TODO add your handling code here:
        //TRUE IF CAN'T CONTINUE B/C OF USER MISTAKE
        boolean error1 = false;
        boolean error2 = false;
        //used to count occurences
        int strnum = 0;
        int dexnum = 0;
        int connum = 0;
        int intnum = 0;
        int wisnum = 0;
        int chanum = 0;

        //arrays of buttons
        JRadioButton[] strarray = new JRadioButton[6];
        JRadioButton[] dexarray = new JRadioButton[6];
        JRadioButton[] conarray = new JRadioButton[6];
        JRadioButton[] intarray = new JRadioButton[6];
        JRadioButton[] wisarray = new JRadioButton[6];
        JRadioButton[] chaarray = new JRadioButton[6];

        //populate radiobutton arrays with buttons
        strarray[0] = this.str1;
        strarray[1] = this.str2;
        strarray[2] = this.str3;
        strarray[3] = this.str4;
        strarray[4] = this.str5;
        strarray[5] = this.str6;

        dexarray[0] = this.dex1;
        dexarray[1] = this.dex2;
        dexarray[2] = this.dex3;
        dexarray[3] = this.dex4;
        dexarray[4] = this.dex5;
        dexarray[5] = this.dex6;

        conarray[0] = this.con1;
        conarray[1] = this.con2;
        conarray[2] = this.con3;
        conarray[3] = this.con4;
        conarray[4] = this.con5;
        conarray[5] = this.con6;

        intarray[0] = this.int1;
        intarray[1] = this.int2;
        intarray[2] = this.int3;
        intarray[3] = this.int4;
        intarray[4] = this.int5;
        intarray[5] = this.int6;

        wisarray[0] = this.wis1;
        wisarray[1] = this.wis2;
        wisarray[2] = this.wis3;
        wisarray[3] = this.wis4;
        wisarray[4] = this.wis5;
        wisarray[5] = this.wis6;

        chaarray[0] = this.cha1;
        chaarray[1] = this.cha2;
        chaarray[2] = this.cha3;
        chaarray[3] = this.cha4;
        chaarray[4] = this.cha5;
        chaarray[5] = this.cha6;

        for (int i = 0; i < 6; i++) {
            if (strarray[i].isSelected())
                strnum++;
        }
        for (int i = 0; i < 6; i++) {
            if (dexarray[i].isSelected())
                dexnum++;
        }
        for (int i = 0; i < 6; i++) {
            if (conarray[i].isSelected())
                connum++;
        }
        for (int i = 0; i < 6; i++) {
            if (intarray[i].isSelected())
                intnum++;
        }
        for (int i = 0; i < 6; i++) {
            if (wisarray[i].isSelected())
                wisnum++;
        }
        for (int i = 0; i < 6; i++) {
            if (chaarray[i].isSelected())
                chanum++;
        }
        //checks if more than one instance of stat assignment, if so makes dialog
        if (strnum > 1)
            error1 = true;
        if (dexnum > 1)
            error1 = true;
        if (connum > 1)
            error1 = true;
        if (intnum > 1)
            error1 = true;
        if (wisnum > 1)
            error1 = true;
        if (chanum > 1)
            error1 = true;

        //checks if not all fields have been accounted for, if so makes dialog
        if (strnum == 0)
            error2 = true;
        if (dexnum == 0)
            error2 = true;
        if (connum == 0)
            error2 = true;
        if (intnum == 0)
            error2 = true;
        if (wisnum == 0)
            error2 = true;
        if (chanum == 0)
            error2 = true;

        //shows dialog message if a user error has been made
        if (error1) {
            JOptionPane.showMessageDialog(null, "Only one value can be assigned to a stat");
        } else if (error2) {
            JOptionPane.showMessageDialog(null, "Each stat must have a value assigned to it.");
        } else {
            //the following saves values in character object
            String group1String = "";
            String group2String = "";
            String group3String = "";
            String group4String = "";
            String group5String = "";
            String group6String = "";

            Enumeration<AbstractButton> buttons1 = buttonGroup1.getElements();
            while (buttons1.hasMoreElements()) {
                AbstractButton button = buttons1.nextElement();
                if (button.isSelected())
                    group1String = button.getText();
            }

            Enumeration<AbstractButton> buttons2 = buttonGroup2.getElements();
            while (buttons2.hasMoreElements()) {
                AbstractButton button = buttons2.nextElement();
                if (button.isSelected())
                    group2String = button.getText();
            }

            Enumeration<AbstractButton> buttons3 = buttonGroup3.getElements();
            while (buttons3.hasMoreElements()) {
                AbstractButton button = buttons3.nextElement();
                if (button.isSelected())
                    group3String = button.getText();
            }

            Enumeration<AbstractButton> buttons4 = buttonGroup4.getElements();
            while (buttons4.hasMoreElements()) {
                AbstractButton button = buttons4.nextElement();
                if (button.isSelected())
                    group4String = button.getText();
            }

            Enumeration<AbstractButton> buttons5 = buttonGroup5.getElements();
            while (buttons5.hasMoreElements()) {
                AbstractButton button = buttons5.nextElement();
                if (button.isSelected())
                    group5String = button.getText();
            }

            Enumeration<AbstractButton> buttons6 = buttonGroup6.getElements();
            while (buttons6.hasMoreElements()) {
                AbstractButton button = buttons6.nextElement();
                if (button.isSelected())
                    group6String = button.getText();
            }

            String[] selections = new String[6];
            selections[0] = group1String;
            selections[1] = group2String;
            selections[2] = group3String;
            selections[3] = group4String;
            selections[4] = group5String;
            selections[5] = group6String;

            int[] values = new int[6];
            values[0] = Integer.parseInt(assignStat1.getText());
            values[1] = Integer.parseInt(assignStat2.getText());
            values[2] = Integer.parseInt(assignStat3.getText());
            values[3] = Integer.parseInt(assignStat4.getText());
            values[4] = Integer.parseInt(assignStat5.getText());
            values[5] = Integer.parseInt(assignStat6.getText());

            for (int i = 0; i < 6; i++) {
                String selection = selections[i];
                switch (selection) {
                    case "Str":
                        this.newCharacter.setStrength(values[i]);
                        break;
                    case "Dex":
                        this.newCharacter.setDexterity(values[i]);
                        break;
                    case "Con":
                        this.newCharacter.setConstitution(values[i]);
                        break;
                    case "Int":
                        this.newCharacter.setIntelligence(values[i]);
                        break;
                    case "Wis":
                        this.newCharacter.setWisdom(values[i]);
                        break;
                    case "Cha":
                        this.newCharacter.setCharisma(values[i]);
                        break;
                }
            }

            //sets stat mod values
            this.newCharacter.setStrMod(StatRoller.getStatMod(this.newCharacter.getStrength()));
            this.newCharacter.setDexMod(StatRoller.getStatMod(this.newCharacter.getDexterity()));
            this.newCharacter.setConMod(StatRoller.getStatMod(this.newCharacter.getConstitution()));
            this.newCharacter.setIntMod(StatRoller.getStatMod(this.newCharacter.getIntelligence()));
            this.newCharacter.setWisMod(StatRoller.getStatMod(this.newCharacter.getWisdom()));
            this.newCharacter.setChaMod(StatRoller.getStatMod(this.newCharacter.getCharisma()));

            //IF HALF-ELF OR HUMAN (VARIANT), GO TO A DIFFERENT PANEL TO SELECT STATS TO INCREASE
            if (this.newCharacter.getRace().equals("Human (Variant)") || this.newCharacter.getRace().equals("Half-Elf")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "HumanHalfElfStatPanel");
            } else {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "backgroundAlignmentPanel");
            }

        }
    }//GEN-LAST:event_toBackgroundAlignmentPanelActionPerformed

    private void toSkillsPanelButtonActionPerformed() {//GEN-FIRST:event_toSkillsPanelButtonActionPerformed

        String align = "";
        Enumeration<AbstractButton> buttons7 = buttonGroup7.getElements();
        while (buttons7.hasMoreElements()) {
            AbstractButton button = buttons7.nextElement();
            if (button.isSelected())
                align = button.getText();
        }
        if (this.backgroundList.getSelectedValue() == null)
            JOptionPane.showMessageDialog(null, "Must choose a background.");
        else if (align.equals(""))
            JOptionPane.showMessageDialog(null, "Must choose an alignment.");
        else {
            this.newCharacter.setBackground(this.backgroundList.getSelectedValue().toString());
            this.newCharacter.setAlignment(align);

            //configure next panel to reflect past choices
            Color color = new Color(255, 0, 0);
            String bg = this.newCharacter.getBackground();

            //disable all checkboxes
            this.acrobaticsCheck.setEnabled(false);
            this.animalHandlingCheck.setEnabled(false);
            this.arcanaCheck.setEnabled(false);
            this.athleticsCheck.setEnabled(false);
            this.deceptionCheck.setEnabled(false);
            this.historyCheck.setEnabled(false);
            this.insightCheck.setEnabled(false);
            this.intimidationCheck.setEnabled(false);
            this.investigationCheck.setEnabled(false);
            this.medicineCheck.setEnabled(false);
            this.natureCheck.setEnabled(false);
            this.perceptionCheck.setEnabled(false);
            this.performanceCheck.setEnabled(false);
            this.persuasionCheck.setEnabled(false);
            this.religionCheck.setEnabled(false);
            this.sleightOfHandCheck.setEnabled(false);
            this.stealthCheck.setEnabled(false);
            this.survivalCheck.setEnabled(false);

            //enable those buttons allowed by selected class
            if (this.newCharacter.getPlayerClass().equals("Barbarian")) {
                this.animalHandlingCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.natureCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.survivalCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if (this.newCharacter.getPlayerClass().equals("Bard")) {
                this.acrobaticsCheck.setEnabled(true);
                this.animalHandlingCheck.setEnabled(true);
                this.arcanaCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.deceptionCheck.setEnabled(true);
                this.historyCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.investigationCheck.setEnabled(true);
                this.medicineCheck.setEnabled(true);
                this.natureCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.performanceCheck.setEnabled(true);
                this.persuasionCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.sleightOfHandCheck.setEnabled(true);
                this.stealthCheck.setEnabled(true);
                this.survivalCheck.setEnabled(true);
                this.newCharacter.setProfAmount(3);
            }
            if (this.newCharacter.getPlayerClass().equals("Cleric")) {

                this.historyCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.medicineCheck.setEnabled(true);
                this.persuasionCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
                if (this.newCharacter.getClericDomain().equals("Knowledge"))
                    this.newCharacter.setLanguageAmount(this.newCharacter.getLanguageAmount() + 2);
            }
            if (this.newCharacter.getPlayerClass().equals("Druid")) {

                this.animalHandlingCheck.setEnabled(true);
                this.arcanaCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.medicineCheck.setEnabled(true);
                this.natureCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.survivalCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
                this.newCharacter.addThisLanguage("Druidic");
            }
            if (this.newCharacter.getPlayerClass().equals("Fighter")) {
                this.acrobaticsCheck.setEnabled(true);
                this.animalHandlingCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.historyCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.survivalCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if (this.newCharacter.getPlayerClass().equals("Monk")) {
                this.acrobaticsCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.historyCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.stealthCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if (this.newCharacter.getPlayerClass().equals("Paladin")) {

                this.athleticsCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.medicineCheck.setEnabled(true);
                this.persuasionCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if (this.newCharacter.getPlayerClass().equals("Ranger")) {

                this.animalHandlingCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.investigationCheck.setEnabled(true);
                this.natureCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.stealthCheck.setEnabled(true);
                this.survivalCheck.setEnabled(true);
                this.newCharacter.setProfAmount(3);
            }
            if (this.newCharacter.getPlayerClass().equals("Rogue")) {
                this.acrobaticsCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.deceptionCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.investigationCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.performanceCheck.setEnabled(true);
                this.persuasionCheck.setEnabled(true);
                this.sleightOfHandCheck.setEnabled(true);
                this.stealthCheck.setEnabled(true);
                this.newCharacter.setProfAmount(4);
                this.newCharacter.addThisLanguage("Thieves' Cant");
            }
            if (this.newCharacter.getPlayerClass().equals("Sorcerer")) {
                this.arcanaCheck.setEnabled(true);
                this.deceptionCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.persuasionCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
                if (this.newCharacter.getSorcerousOrigin().equals("Draconic Bloodline"))
                    this.newCharacter.addThisLanguage("Draconic");
            }
            if (this.newCharacter.getPlayerClass().equals("Warlock")) {
                this.arcanaCheck.setEnabled(true);
                this.deceptionCheck.setEnabled(true);
                this.historyCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.investigationCheck.setEnabled(true);
                this.natureCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if (this.newCharacter.getPlayerClass().equals("Wizard")) {
                this.arcanaCheck.setEnabled(true);
                this.historyCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.investigationCheck.setEnabled(true);
                this.medicineCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }

            //variant humans and half-elves get more profs
            if (this.newCharacter.getRace().equals("Half-Elf"))
                this.newCharacter.setProfAmount(this.newCharacter.getProfAmount() + 2);

            if (this.newCharacter.getRace().equals("Human (Variant)"))
                this.newCharacter.setProfAmount(this.newCharacter.getProfAmount() + 1);


            //disable and turn red those proficiencies given by background
            if (bg.equals("Acolyte")) {
                this.insightCheck.setForeground(color);
                this.insightCheck.setSelected(true);
                this.insightCheck.setEnabled(false);
                this.religionCheck.setForeground(color);
                this.religionCheck.setSelected(true);
                this.religionCheck.setEnabled(false);
                this.newCharacter.setLanguageAmount(this.newCharacter.getLanguageAmount() + 2);
            }
            if (bg.equals("Charlatan")) {
                this.deceptionCheck.setForeground(color);
                this.deceptionCheck.setSelected(true);
                this.deceptionCheck.setEnabled(false);
                this.sleightOfHandCheck.setForeground(color);
                this.sleightOfHandCheck.setSelected(true);
                this.sleightOfHandCheck.setEnabled(false);
            }
            if (bg.equals("Criminal")) {
                this.deceptionCheck.setForeground(color);
                this.deceptionCheck.setSelected(true);
                this.deceptionCheck.setEnabled(false);
                this.stealthCheck.setForeground(color);
                this.stealthCheck.setSelected(true);
                this.stealthCheck.setEnabled(false);
            }
            if (bg.equals("Entertainer")) {
                this.acrobaticsCheck.setForeground(color);
                this.acrobaticsCheck.setSelected(true);
                this.acrobaticsCheck.setEnabled(false);
                this.performanceCheck.setForeground(color);
                this.performanceCheck.setSelected(true);
                this.performanceCheck.setEnabled(false);
            }
            if (bg.equals("Folk Hero")) {
                this.animalHandlingCheck.setForeground(color);
                this.animalHandlingCheck.setSelected(true);
                this.animalHandlingCheck.setEnabled(false);
                this.survivalCheck.setForeground(color);
                this.survivalCheck.setSelected(true);
                this.survivalCheck.setEnabled(false);
            }
            if (bg.equals("Guild Artisan")) {
                this.insightCheck.setForeground(color);
                this.insightCheck.setSelected(true);
                this.insightCheck.setEnabled(false);
                this.persuasionCheck.setForeground(color);
                this.persuasionCheck.setSelected(true);
                this.persuasionCheck.setEnabled(false);
                this.newCharacter.setLanguageAmount(this.newCharacter.getLanguageAmount() + 1);
            }
            if (bg.equals("Hermit")) {
                this.medicineCheck.setForeground(color);
                this.medicineCheck.setSelected(true);
                this.medicineCheck.setEnabled(false);
                this.religionCheck.setForeground(color);
                this.religionCheck.setSelected(true);
                this.religionCheck.setEnabled(false);
                this.newCharacter.setLanguageAmount(this.newCharacter.getLanguageAmount() + 1);
            }
            if (bg.equals("Noble")) {
                this.historyCheck.setForeground(color);
                this.historyCheck.setSelected(true);
                this.historyCheck.setEnabled(false);
                this.persuasionCheck.setForeground(color);
                this.persuasionCheck.setSelected(true);
                this.persuasionCheck.setEnabled(false);
                this.newCharacter.setLanguageAmount(this.newCharacter.getLanguageAmount() + 1);
            }
            if (bg.equals("Outlander")) {
                this.athleticsCheck.setForeground(color);
                this.athleticsCheck.setSelected(true);
                this.athleticsCheck.setEnabled(false);
                this.survivalCheck.setForeground(color);
                this.survivalCheck.setSelected(true);
                this.survivalCheck.setEnabled(false);
                this.newCharacter.setLanguageAmount(this.newCharacter.getLanguageAmount() + 1);
            }
            if (bg.equals("Sage")) {
                this.arcanaCheck.setForeground(color);
                this.arcanaCheck.setSelected(true);
                this.arcanaCheck.setEnabled(false);
                this.historyCheck.setForeground(color);
                this.historyCheck.setSelected(true);
                this.historyCheck.setEnabled(false);
                this.newCharacter.setLanguageAmount(this.newCharacter.getLanguageAmount() + 2);
            }
            if (bg.equals("Sailor")) {
                this.athleticsCheck.setForeground(color);
                this.athleticsCheck.setSelected(true);
                this.athleticsCheck.setEnabled(false);
                this.perceptionCheck.setForeground(color);
                this.perceptionCheck.setSelected(true);
                this.perceptionCheck.setEnabled(false);
            }
            if (bg.equals("Soldier")) {
                this.athleticsCheck.setForeground(color);
                this.athleticsCheck.setSelected(true);
                this.athleticsCheck.setEnabled(false);
                this.intimidationCheck.setForeground(color);
                this.intimidationCheck.setSelected(true);
                this.intimidationCheck.setEnabled(false);
            }
            if (bg.equals("Urchin")) {
                this.sleightOfHandCheck.setForeground(color);
                this.sleightOfHandCheck.setSelected(true);
                this.sleightOfHandCheck.setEnabled(false);
                this.stealthCheck.setForeground(color);
                this.stealthCheck.setSelected(true);
                this.stealthCheck.setEnabled(false);
            }
            //disable, check, and turn red those proficiencies given by CLERIC DOMAINS (If cleric)
            if (this.newCharacter.getClericDomain().equals("Knowledge")) {
                if (this.clericArcanaCheck.isSelected()) {
                    this.arcanaCheck.setForeground(color);
                    this.arcanaCheck.setSelected(true);
                    this.arcanaCheck.setEnabled(false);
                }
                if (this.clericHistoryCheck.isSelected()) {
                    this.historyCheck.setForeground(color);
                    this.historyCheck.setSelected(true);
                    this.historyCheck.setEnabled(false);
                }
                if (this.clericNatureCheck.isSelected()) {
                    this.natureCheck.setForeground(color);
                    this.natureCheck.setSelected(true);
                    this.natureCheck.setEnabled(false);
                }
                if (this.clericReligionCheck.isSelected()) {
                    this.religionCheck.setForeground(color);
                    this.religionCheck.setSelected(true);
                    this.religionCheck.setEnabled(false);
                }
            }
            if (this.newCharacter.getClericDomain().equals("Nature")) {
                if (this.clericAnimalHandlingRadio.isSelected()) {
                    this.animalHandlingCheck.setForeground(color);
                    this.animalHandlingCheck.setSelected(true);
                    this.animalHandlingCheck.setEnabled(false);
                }
                if (this.clericNatureRadio.isSelected()) {
                    this.natureCheck.setForeground(color);
                    this.natureCheck.setSelected(true);
                    this.natureCheck.setEnabled(false);
                }
                if (this.clericSurvivalRadio.isSelected()) {
                    this.survivalCheck.setForeground(color);
                    this.survivalCheck.setSelected(true);
                    this.survivalCheck.setEnabled(false);
                }
            }

            //if race=Half-Orc, check intimidation, turn red, disable it
            if (this.newCharacter.getRace().equals("Half-Orc")) {
                this.intimidationCheck.setForeground(color);
                this.intimidationCheck.setSelected(true);
                this.intimidationCheck.setEnabled(false);
            }
            String race = this.newCharacter.getRace();
            //if race==elf, check perception, etc.
            if (race.equals("High Elf") || race.equals("Wood Elf") || race.equals("Dark Elf (Drow)")) {
                this.perceptionCheck.setForeground(color);
                this.perceptionCheck.setSelected(true);
                this.perceptionCheck.setEnabled(false);
            }

            //gets initial amount of skills selected by previous choices
            //gets initial amount of skill checkboxes enabled
            this.initialProfsSelected = 0;
            int initialEnabled = 0;
            if (this.acrobaticsCheck.isSelected())
                this.initialProfsSelected++;
            if (this.acrobaticsCheck.isEnabled())
                initialEnabled++;
            if (this.animalHandlingCheck.isSelected())
                this.initialProfsSelected++;
            if (this.animalHandlingCheck.isEnabled())
                initialEnabled++;
            if (this.arcanaCheck.isSelected())
                this.initialProfsSelected++;
            if (this.arcanaCheck.isEnabled())
                initialEnabled++;
            if (this.athleticsCheck.isSelected())
                this.initialProfsSelected++;
            if (this.athleticsCheck.isEnabled())
                initialEnabled++;
            if (this.deceptionCheck.isSelected())
                this.initialProfsSelected++;
            if (this.deceptionCheck.isEnabled())
                initialEnabled++;
            if (this.historyCheck.isSelected())
                this.initialProfsSelected++;
            if (this.historyCheck.isEnabled())
                initialEnabled++;
            if (this.insightCheck.isSelected())
                this.initialProfsSelected++;
            if (this.insightCheck.isEnabled())
                initialEnabled++;
            if (this.intimidationCheck.isSelected())
                this.initialProfsSelected++;
            if (this.intimidationCheck.isEnabled())
                initialEnabled++;
            if (this.investigationCheck.isSelected())
                this.initialProfsSelected++;
            if (this.investigationCheck.isEnabled())
                initialEnabled++;
            if (this.medicineCheck.isSelected())
                this.initialProfsSelected++;
            if (this.medicineCheck.isEnabled())
                initialEnabled++;
            if (this.natureCheck.isSelected())
                this.initialProfsSelected++;
            if (this.natureCheck.isEnabled())
                initialEnabled++;
            if (this.perceptionCheck.isSelected())
                this.initialProfsSelected++;
            if (this.perceptionCheck.isEnabled())
                initialEnabled++;
            if (this.performanceCheck.isSelected())
                this.initialProfsSelected++;
            if (this.performanceCheck.isEnabled())
                initialEnabled++;
            if (this.persuasionCheck.isSelected())
                this.initialProfsSelected++;
            if (this.persuasionCheck.isEnabled())
                initialEnabled++;
            if (this.religionCheck.isSelected())
                this.initialProfsSelected++;
            if (this.religionCheck.isEnabled())
                initialEnabled++;
            if (this.sleightOfHandCheck.isSelected())
                this.initialProfsSelected++;
            if (this.sleightOfHandCheck.isEnabled())
                initialEnabled++;
            if (this.stealthCheck.isSelected())
                this.initialProfsSelected++;
            if (this.stealthCheck.isEnabled())
                initialEnabled++;
            if (this.survivalCheck.isSelected())
                this.initialProfsSelected++;
            if (this.survivalCheck.isEnabled())
                initialEnabled++;

            if (initialEnabled < this.newCharacter.getProfAmount())
                this.newCharacter.setProfAmount(initialEnabled);
            this.profAmountLabel.setText("" + this.newCharacter.getProfAmount());

            //continue to next panel
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "skillsPanel");
        }
    }//GEN-LAST:event_toSkillsPanelButtonActionPerformed

    private void toLanguagesPanelActionPerformed() {//GEN-FIRST:event_toLanguagesPanelActionPerformed
        // TODO add your handling code here:
        //CHECK IF # PROFS SELECTED IS CORRECT=====================

        int amountChecked = 0;
        if (this.acrobaticsCheck.isSelected())
            amountChecked++;
        if (this.animalHandlingCheck.isSelected())
            amountChecked++;
        if (this.arcanaCheck.isSelected())
            amountChecked++;
        if (this.athleticsCheck.isSelected())
            amountChecked++;
        if (this.deceptionCheck.isSelected())
            amountChecked++;
        if (this.historyCheck.isSelected())
            amountChecked++;
        if (this.insightCheck.isSelected())
            amountChecked++;
        if (this.intimidationCheck.isSelected())
            amountChecked++;
        if (this.investigationCheck.isSelected())
            amountChecked++;
        if (this.medicineCheck.isSelected())
            amountChecked++;
        if (this.natureCheck.isSelected())
            amountChecked++;
        if (this.perceptionCheck.isSelected())
            amountChecked++;
        if (this.performanceCheck.isSelected())
            amountChecked++;
        if (this.persuasionCheck.isSelected())
            amountChecked++;
        if (this.religionCheck.isSelected())
            amountChecked++;
        if (this.sleightOfHandCheck.isSelected())
            amountChecked++;
        if (this.stealthCheck.isSelected())
            amountChecked++;
        if (this.survivalCheck.isSelected())
            amountChecked++;

        //account for skill profs already chosen before this panel
        amountChecked = amountChecked - this.initialProfsSelected;

        if (amountChecked > this.newCharacter.getProfAmount()) {
            JOptionPane.showMessageDialog(null, "Too many proficiencies checked!");
        } else if (amountChecked < this.newCharacter.getProfAmount()) {
            int amountLeftToCheck = this.newCharacter.getProfAmount() - amountChecked;
            JOptionPane.showMessageDialog(null, "Must select " + amountLeftToCheck + " more before continuing");
        } else {
            JCheckBox[] checkBoxes = new JCheckBox[]{this.acrobaticsCheck, this.animalHandlingCheck, this.arcanaCheck,
                    this.athleticsCheck, this.deceptionCheck, this.historyCheck,
                    this.insightCheck, this.intimidationCheck, this.investigationCheck,
                    this.medicineCheck, this.natureCheck, this.perceptionCheck,
                    this.performanceCheck, this.persuasionCheck, this.religionCheck,
                    this.sleightOfHandCheck, this.stealthCheck, this.survivalCheck};

            for (int i = 0; i < 18; i++) {
                JCheckBox currentCheckBox = checkBoxes[i];
                if (currentCheckBox.isSelected())
                    this.newCharacter.setThisSkillProf(i, 1);
            }
            //SAVE SKILLS IN CHARACTER OBJECT
            this.newCharacter.setThisSkill(0, this.newCharacter.getDexMod());
            this.newCharacter.setThisSkill(1, this.newCharacter.getWisMod());
            this.newCharacter.setThisSkill(2, this.newCharacter.getIntMod());
            this.newCharacter.setThisSkill(3, this.newCharacter.getStrMod());
            this.newCharacter.setThisSkill(4, this.newCharacter.getChaMod());
            this.newCharacter.setThisSkill(5, this.newCharacter.getIntMod());
            this.newCharacter.setThisSkill(6, this.newCharacter.getWisMod());
            this.newCharacter.setThisSkill(7, this.newCharacter.getChaMod());
            this.newCharacter.setThisSkill(8, this.newCharacter.getIntMod());
            this.newCharacter.setThisSkill(9, this.newCharacter.getWisMod());
            this.newCharacter.setThisSkill(10, this.newCharacter.getIntMod());
            this.newCharacter.setThisSkill(11, this.newCharacter.getWisMod());
            this.newCharacter.setThisSkill(12, this.newCharacter.getChaMod());
            this.newCharacter.setThisSkill(13, this.newCharacter.getChaMod());
            this.newCharacter.setThisSkill(14, this.newCharacter.getIntMod());
            this.newCharacter.setThisSkill(15, this.newCharacter.getDexMod());
            this.newCharacter.setThisSkill(16, this.newCharacter.getDexMod());
            this.newCharacter.setThisSkill(17, this.newCharacter.getWisMod());

            //add proficiency bonus to skills selected
            for (int i = 0; i < 18; i++) {
                JCheckBox checkBox = checkBoxes[i];
                if (checkBox.isSelected())
                    this.newCharacter.setThisSkill(i, this.newCharacter.getThisSkill(i) + this.newCharacter.getProfBonus());
            }

            //add profs to rogueProfs if class==Rogue
            if (this.newCharacter.getPlayerClass().equals("Rogue")) {
                for (int i = 0; i < 18; i++) {
                    JCheckBox checkBox = checkBoxes[i];
                    if (checkBox.isSelected()) {
                        String profString = checkBox.getText();
                        this.newCharacter.addThisRogueProf(profString);
                    }
                }
            }

            //add prof bonus again for those skills that receive double the prof bonus
            for (int i = 0; i < 18; i++) {
                int[] doubles = this.newCharacter.getDoubleProfs();
                if (doubles[i] == 1)
                    this.newCharacter.setThisSkill(i, this.newCharacter.getThisSkill(i) + this.newCharacter.getProfBonus());
            }

            //if Rogue, move onto and setup expertise panel
            if (this.newCharacter.getPlayerClass().equals("Rogue")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "rogueExpertisePanel");

                //ADD ROGUE PROFS TO EACH EXPERTISELIST
                this.expertiseList1.setModel(new DefaultListModel());
                this.expertiseList2.setModel(new DefaultListModel());
                DefaultListModel listModel1 = (DefaultListModel) this.expertiseList1.getModel();
                DefaultListModel listModel2 = (DefaultListModel) this.expertiseList2.getModel();
                listModel1.addElement("Thief's Tools");
                listModel2.addElement("Thief's Tools");
                for (int i = 0; i < this.newCharacter.getRogueProfs().size(); i++) {
                    String rogueProf = this.newCharacter.getRogueProfs().get(i);
                    listModel1.addElement(rogueProf);
                    listModel2.addElement(rogueProf);
                }
            } else {
                //MOVE ONTO LANGUAGES PANEL

                this.languageAmountLabel.setText(this.languageAmountLabel.getText() + " " + this.newCharacter.getLanguageAmount());
                //disable all language check boxes if languageAmount == 0
                if (this.newCharacter.getLanguageAmount() == 0) {
                    this.commonCheck.setEnabled(false);
                    this.dwarvishCheck.setEnabled(false);
                    this.elvishCheck.setEnabled(false);
                    this.giantCheck.setEnabled(false);
                    this.gnomishCheck.setEnabled(false);
                    this.goblinCheck.setEnabled(false);
                    this.halflingCheck.setEnabled(false);
                    this.orcCheck.setEnabled(false);
                    this.abyssalCheck.setEnabled(false);
                    this.celestialCheck.setEnabled(false);
                    this.draconicCheck.setEnabled(false);
                    this.deepspeechCheck.setEnabled(false);
                    this.infernalCheck.setEnabled(false);
                    this.primordialCheck.setEnabled(false);
                    this.sylvanCheck.setEnabled(false);
                    this.undercommonCheck.setEnabled(false);
                }
                Color color = new Color(255, 0, 0);
                this.commonCheck.setEnabled(false);
                this.commonCheck.setForeground(color);
                //check each language that is known automatically by race
                //STOPPED HERE: DISABLE CHECKS AS WELL
                String race = this.newCharacter.getRace();
                if (race.equals("Hill Dwarf") || race.equals("Mountain Dwarf")) {
                    this.dwarvishCheck.setForeground(color);
                    this.dwarvishCheck.setSelected(true);
                    this.dwarvishCheck.setEnabled(false);
                }
                if (race.equals("High Elf") || race.equals("Wood Elf") || race.equals("Dark Elf (Drow)")) {
                    this.elvishCheck.setForeground(color);
                    this.elvishCheck.setSelected(true);
                    this.elvishCheck.setEnabled(false);
                }
                if (race.equals("Lightfoot Halfling") || race.equals("Stout Halfling")) {
                    this.halflingCheck.setForeground(color);
                    this.halflingCheck.setSelected(true);
                    this.halflingCheck.setEnabled(false);
                }
                if (race.equals("Forest Gnome") || race.equals("Rock Gnome")) {
                    this.gnomishCheck.setForeground(color);
                    this.gnomishCheck.setSelected(true);
                    this.gnomishCheck.setEnabled(false);
                }
                if (race.equals("Half-Elf")) {
                    this.elvishCheck.setForeground(color);
                    this.elvishCheck.setSelected(true);
                    this.elvishCheck.setEnabled(false);
                }
                if (race.equals("Half-Orc")) {
                    this.orcCheck.setForeground(color);
                    this.orcCheck.setSelected(true);
                    this.orcCheck.setEnabled(false);
                }
                if (race.equals("Tiefling")) {
                    this.infernalCheck.setForeground(color);
                    this.infernalCheck.setSelected(true);
                    this.infernalCheck.setEnabled(false);
                }
                if (this.newCharacter.getRace().equals("Dragonborn (Black)")) {
                    this.draconicCheck.setForeground(color);
                    this.draconicCheck.setSelected(true);
                    this.draconicCheck.setEnabled(false);
                }

                if (this.newCharacter.getRace().equals("Dragonborn (Blue)")) {
                    this.draconicCheck.setForeground(color);
                    this.draconicCheck.setSelected(true);
                    this.draconicCheck.setEnabled(false);
                }
                if (this.newCharacter.getRace().equals("Dragonborn (Brass)")) {
                    this.draconicCheck.setForeground(color);
                    this.draconicCheck.setSelected(true);
                    this.draconicCheck.setEnabled(false);
                }
                if (this.newCharacter.getRace().equals("Dragonborn (Bronze)")) {
                    this.draconicCheck.setForeground(color);
                    this.draconicCheck.setSelected(true);
                    this.draconicCheck.setEnabled(false);
                }
                if (this.newCharacter.getRace().equals("Dragonborn (Copper)")) {
                    this.draconicCheck.setForeground(color);
                    this.draconicCheck.setSelected(true);
                    this.draconicCheck.setEnabled(false);
                }
                if (this.newCharacter.getRace().equals("Dragonborn (Gold)")) {
                    this.draconicCheck.setForeground(color);
                    this.draconicCheck.setSelected(true);
                    this.draconicCheck.setEnabled(false);
                }
                if (this.newCharacter.getRace().equals("Dragonborn (Green)")) {
                    this.draconicCheck.setForeground(color);
                    this.draconicCheck.setSelected(true);
                    this.draconicCheck.setEnabled(false);
                }
                if (this.newCharacter.getRace().equals("Dragonborn (Red)")) {
                    this.draconicCheck.setForeground(color);
                    this.draconicCheck.setSelected(true);
                    this.draconicCheck.setEnabled(false);
                }
                if (this.newCharacter.getRace().equals("Dragonborn (Silver)")) {
                    this.draconicCheck.setForeground(color);
                    this.draconicCheck.setSelected(true);
                    this.draconicCheck.setEnabled(false);
                }
                if (this.newCharacter.getRace().equals("Dragonborn (White)")) {
                    this.draconicCheck.setForeground(color);
                    this.draconicCheck.setSelected(true);
                    this.draconicCheck.setEnabled(false);
                }

                //tally up initial languages checked
                JCheckBox[] languageChecks = new JCheckBox[16];
                languageChecks[0] = this.commonCheck;
                languageChecks[1] = this.dwarvishCheck;
                languageChecks[2] = this.elvishCheck;
                languageChecks[3] = this.giantCheck;
                languageChecks[4] = this.gnomishCheck;
                languageChecks[5] = this.goblinCheck;
                languageChecks[6] = this.halflingCheck;
                languageChecks[7] = this.orcCheck;
                languageChecks[8] = this.abyssalCheck;
                languageChecks[9] = this.celestialCheck;
                languageChecks[10] = this.draconicCheck;
                languageChecks[11] = this.deepspeechCheck;
                languageChecks[12] = this.infernalCheck;
                languageChecks[13] = this.primordialCheck;
                languageChecks[14] = this.sylvanCheck;
                languageChecks[15] = this.undercommonCheck;

                for (int i = 0; i < 16; i++) {
                    if (languageChecks[i].isSelected())
                        this.initialLangsSelected++;
                }

                //move onto language panel
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "languagePanel");
            }

        }
    }//GEN-LAST:event_toLanguagesPanelActionPerformed

    private void toBackgroundAlignmentPanel2ActionPerformed() {//GEN-FIRST:event_toBackgroundAlignmentPanel2ActionPerformed
        // TODO add your handling code here:
        int amountChecked = 0;
        if (this.variantChaCheck.isSelected())
            amountChecked++;
        if (this.variantConCheck.isSelected())
            amountChecked++;
        if (this.variantDexCheck.isSelected())
            amountChecked++;
        if (this.variantIntCheck.isSelected())
            amountChecked++;
        if (this.variantStrCheck.isSelected())
            amountChecked++;
        if (this.variantWisCheck.isSelected())
            amountChecked++;

        if (amountChecked > 2)
            JOptionPane.showMessageDialog(null, "Too many stats checked!");
        else if (amountChecked < 2)
            JOptionPane.showMessageDialog(null, "Must have 2 checked.");
        else {
            if (this.variantChaCheck.isSelected()) {
                this.newCharacter.setCharisma(this.newCharacter.getCharisma() + 1);
                this.newCharacter.setChaMod(StatRoller.getStatMod(this.newCharacter.getCharisma()));
            }
            if (this.variantConCheck.isSelected()) {
                this.newCharacter.setConstitution(this.newCharacter.getConstitution() + 1);
                this.newCharacter.setConMod(StatRoller.getStatMod(this.newCharacter.getConstitution()));
            }
            if (this.variantDexCheck.isSelected()) {
                this.newCharacter.setDexterity(this.newCharacter.getDexterity() + 1);
                this.newCharacter.setDexMod(StatRoller.getStatMod(this.newCharacter.getDexterity()));
            }
            if (this.variantIntCheck.isSelected()) {
                this.newCharacter.setIntelligence(this.newCharacter.getIntelligence() + 1);
                this.newCharacter.setIntMod(StatRoller.getStatMod(this.newCharacter.getIntelligence()));
            }
            if (this.variantStrCheck.isSelected()) {
                this.newCharacter.setStrength(this.newCharacter.getStrength() + 1);
                this.newCharacter.setStrMod(StatRoller.getStatMod(this.newCharacter.getStrength()));
            }
            if (this.variantWisCheck.isSelected()) {
                this.newCharacter.setWisdom(this.newCharacter.getWisdom() + 1);
                this.newCharacter.setWisMod(StatRoller.getStatMod(this.newCharacter.getWisdom()));
            }

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "backgroundAlignmentPanel");


        }


    }//GEN-LAST:event_toBackgroundAlignmentPanel2ActionPerformed

    private void domainListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_domainListValueChanged
        // TODO add your handling code here:
        JList source = (JList) evt.getSource();
        String selected = source.getSelectedValue().toString();
        if (selected.equals("Knowledge")) {
            this.clericArcanaCheck.setEnabled(true);
            this.clericHistoryCheck.setEnabled(true);
            this.clericNatureCheck.setEnabled(true);
            this.clericReligionCheck.setEnabled(true);
        } else {
            this.clericArcanaCheck.setEnabled(false);
            this.clericHistoryCheck.setEnabled(false);
            this.clericNatureCheck.setEnabled(false);
            this.clericReligionCheck.setEnabled(false);
            this.clericArcanaCheck.setSelected(false);
            this.clericHistoryCheck.setSelected(false);
            this.clericNatureCheck.setSelected(false);
            this.clericReligionCheck.setSelected(false);
        }
        if (selected.equals("Nature")) {
            this.clericAnimalHandlingRadio.setEnabled(true);
            this.clericNatureRadio.setEnabled(true);
            this.clericSurvivalRadio.setEnabled(true);
        } else {
            this.buttonGroup8.clearSelection();
            this.clericAnimalHandlingRadio.setEnabled(false);
            this.clericNatureRadio.setEnabled(false);
            this.clericSurvivalRadio.setEnabled(false);
        }
    }//GEN-LAST:event_domainListValueChanged

    private void toStatPanelButton2ActionPerformed() {//GEN-FIRST:event_toStatPanelButton2ActionPerformed
        // TODO add your handling code here:
        if (this.domainList.isSelectionEmpty())
            JOptionPane.showMessageDialog(null, "Must choose a domain.");
        else {
            String selection = this.domainList.getSelectedValue().toString();
            switch (selection) {
                case "Knowledge": {
                    int checked = 0;
                    if (this.clericArcanaCheck.isSelected())
                        checked++;
                    if (this.clericHistoryCheck.isSelected())
                        checked++;
                    if (this.clericNatureCheck.isSelected())
                        checked++;
                    if (this.clericReligionCheck.isSelected())
                        checked++;
                    if (checked > 2)
                        JOptionPane.showMessageDialog(null, "Can only choose 2 Knowledge Proficiencies!");
                    if (checked < 2)
                        JOptionPane.showMessageDialog(null, "Must choose 2 Knowledge Proficiencies");
                    if (checked == 2) {
                        //CHANGE PANELS AND SAVE
                        this.newCharacter.setClericDomain("Knowledge");
                        if (this.clericArcanaCheck.isSelected())
                            this.newCharacter.setThisDoubleProf(2);
                        if (this.clericHistoryCheck.isSelected())
                            this.newCharacter.setThisDoubleProf(5);
                        if (this.clericNatureCheck.isSelected())
                            this.newCharacter.setThisDoubleProf(10);
                        if (this.clericReligionCheck.isSelected())
                            this.newCharacter.setThisDoubleProf(14);

                        CardLayout card = (CardLayout) mainPanel.getLayout();
                        card.show(mainPanel, "statPanel");
                    }
                    break;
                }
                case "Nature": {
                    int checked = 0;
                    if (this.clericAnimalHandlingRadio.isSelected())
                        checked++;
                    if (this.clericNatureRadio.isSelected())
                        checked++;
                    if (this.clericSurvivalRadio.isSelected())
                        checked++;

                    if (checked == 0)
                        JOptionPane.showMessageDialog(null, "Must choose a Nature Proficiency");
                    else {
                        //MOVE TO NEXT PANEL AND SAVE SHIT
                        this.newCharacter.setClericDomain("Nature");
                        CardLayout card = (CardLayout) mainPanel.getLayout();
                        card.show(mainPanel, "statPanel");
                    }
                    break;
                }
                default:
                    this.newCharacter.setClericDomain(selection);
                    CardLayout card = (CardLayout) mainPanel.getLayout();
                    card.show(mainPanel, "statPanel");
                    break;
            }
        }
    }//GEN-LAST:event_toStatPanelButton2ActionPerformed

    private void toStatPanelButton3ActionPerformed() {//GEN-FIRST:event_toStatPanelButton3ActionPerformed
        // TODO add your handling code here:
        if (this.fightingStyleList.isSelectionEmpty())
            JOptionPane.showMessageDialog(null, "Must choose a Fighting Style");
        else {
            String selection = this.fightingStyleList.getSelectedValue().toString();
            this.newCharacter.setFightingStyle(selection);
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "statPanel");
        }
    }//GEN-LAST:event_toStatPanelButton3ActionPerformed

    private void toStatPanel4ActionPerformed() {//GEN-FIRST:event_toStatPanel4ActionPerformed
        // TODO add your handling code here:
        if (!this.wildMagicRadio.isSelected() && !this.draconicBloodlineRadio.isSelected())
            JOptionPane.showMessageDialog(null, "Must choose a Sorcerous Origin");
        else if (this.wildMagicRadio.isSelected()) {
            this.newCharacter.setSorcerousOrigin("Wild Magic");
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "statPanel");
        } else if (this.draconicBloodlineRadio.isSelected()) {
            int error = 0; //if none are selected error=0
            String ancestry = "";
            if (this.blueRadio.isSelected()) {
                error++;
                ancestry = "Blue";
            }
            if (this.blackRadio.isSelected()) {
                error++;
                ancestry = "Black";
            }
            if (this.redRadio.isSelected()) {
                error++;
                ancestry = "Red";
            }
            if (this.whiteRadio.isSelected()) {
                error++;
                ancestry = "White";
            }
            if (this.brassRadio.isSelected()) {
                error++;
                ancestry = "Brass";
            }
            if (this.bronzeRadio.isSelected()) {
                error++;
                ancestry = "Bronze";
            }
            if (this.copperRadio.isSelected()) {
                error++;
                ancestry = "Copper";
            }
            if (this.goldRadio.isSelected()) {
                error++;
                ancestry = "Gold";
            }
            if (this.silverRadio.isSelected()) {
                error++;
                ancestry = "Silver";
            }
            if (this.greenRadio.isSelected()) {
                error++;
                ancestry = "Green";
            }

            if (error == 0)
                JOptionPane.showMessageDialog(null, "Must choose a Draconic Ancestry (color)");
            else {
                this.newCharacter.setSorcerousOrigin("Draconic Bloodline");
                this.newCharacter.setDraconicAncestry(ancestry);
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "statPanel");
            }
        }
    }//GEN-LAST:event_toStatPanel4ActionPerformed

    private void draconicBloodlineRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_draconicBloodlineRadioActionPerformed
        // TODO add your handling code here:
        JRadioButton button = (JRadioButton) evt.getSource();
        if (button.isSelected()) {
            this.blueRadio.setEnabled(true);
            this.blackRadio.setEnabled(true);
            this.redRadio.setEnabled(true);
            this.whiteRadio.setEnabled(true);
            this.brassRadio.setEnabled(true);
            this.bronzeRadio.setEnabled(true);
            this.copperRadio.setEnabled(true);
            this.goldRadio.setEnabled(true);
            this.silverRadio.setEnabled(true);
            this.greenRadio.setEnabled(true);
        }

    }//GEN-LAST:event_draconicBloodlineRadioActionPerformed

    private void wildMagicRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wildMagicRadioActionPerformed
        // TODO add your handling code here:
        JRadioButton button = (JRadioButton) evt.getSource();
        if (button.isSelected()) {
            this.blueRadio.setEnabled(false);
            this.blackRadio.setEnabled(false);
            this.redRadio.setEnabled(false);
            this.whiteRadio.setEnabled(false);
            this.brassRadio.setEnabled(false);
            this.bronzeRadio.setEnabled(false);
            this.copperRadio.setEnabled(false);
            this.goldRadio.setEnabled(false);
            this.silverRadio.setEnabled(false);
            this.greenRadio.setEnabled(false);
        }
    }//GEN-LAST:event_wildMagicRadioActionPerformed

    private void toStatPanel5ActionPerformed() {//GEN-FIRST:event_toStatPanel5ActionPerformed
        // TODO add your handling code here:
        if (this.favoredEnemyList.isSelectionEmpty())
            JOptionPane.showMessageDialog(null, "Must choose a Favored Enemy");
        else {
            String selection = this.favoredEnemyList.getSelectedValue().toString();
            this.newCharacter.setFavoredEnemy(selection);
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "statPanel");
        }

    }//GEN-LAST:event_toStatPanel5ActionPerformed

    private void toStatPanel6ActionPerformed() {//GEN-FIRST:event_toStatPanel6ActionPerformed
        // TODO add your handling code here:
        int error = 0; //error = 1 if no radiobuttons selected
        if (this.archFeyRadio.isSelected())
            error++;
        if (this.greatOldOneRadio.isSelected())
            error++;
        if (this.fiendRadio.isSelected())
            error++;

        if (error == 0)
            JOptionPane.showMessageDialog(null, "Must choose an Otherworldly Patron");
        else {
            String selection = "";
            if (this.archFeyRadio.isSelected()) {
                selection = "the Archfey";
                this.patronSpell1.setText("Faerie Fire");
                this.patronSpell2.setText("Sleep");
            }
            if (this.greatOldOneRadio.isSelected()) {
                selection = "the Great Old One";
                this.patronSpell1.setText("Dissonant Whispers");
                this.patronSpell2.setText("Tasha's Hideous Laughter");
            }
            if (this.fiendRadio.isSelected()) {
                selection = "the Fiend";
                this.patronSpell1.setText("Burning Hands");
                this.patronSpell2.setText("Command");
            }
            this.newCharacter.setOtherworldlyPatron(selection);
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "statPanel");
        }
    }//GEN-LAST:event_toStatPanel6ActionPerformed

    private void toLanguagePanel2ActionPerformed() {//GEN-FIRST:event_toLanguagePanel2ActionPerformed
        // TODO add your handling code here:

        if (this.expertiseList1.isSelectionEmpty() || this.expertiseList2.isSelectionEmpty())
            JOptionPane.showMessageDialog(null, "Must make selection in each list");
        else if (this.expertiseList1.getSelectedValue().toString().equals(this.expertiseList2.getSelectedValue().toString()))
            JOptionPane.showMessageDialog(null, "First and second selection must be different.");
        else {
            //save selections, double prof bonus for them,move to languages panel
            if (this.expertiseList1.getSelectedValue().toString().equals("Thief's Tools") || this.expertiseList2.getSelectedValue().toString().equals("Thief's Tools"))
                this.newCharacter.addThisOtherProf("(Double) Proficiency with Thief's Tools");

            String selection1 = this.expertiseList1.getSelectedValue().toString();
            String selection2 = this.expertiseList2.getSelectedValue().toString();
            int profBonus = this.newCharacter.getProfBonus();
            if (selection1.equals("Acrobatics") || selection2.equals("Acrobatics"))
                this.newCharacter.setThisSkill(0, this.newCharacter.getThisSkill(0) + profBonus);
            if (selection1.equals("Animal Handling") || selection2.equals("Animal Handling"))
                this.newCharacter.setThisSkill(1, this.newCharacter.getThisSkill(1) + profBonus);
            if (selection1.equals("Arcana") || selection2.equals("Arcana"))
                this.newCharacter.setThisSkill(2, this.newCharacter.getThisSkill(2) + profBonus);
            if (selection1.equals("Athletics") || selection2.equals("Athletics"))
                this.newCharacter.setThisSkill(3, this.newCharacter.getThisSkill(3) + profBonus);
            if (selection1.equals("Deception") || selection2.equals("Deception"))
                this.newCharacter.setThisSkill(4, this.newCharacter.getThisSkill(4) + profBonus);
            if (selection1.equals("History") || selection2.equals("History"))
                this.newCharacter.setThisSkill(5, this.newCharacter.getThisSkill(5) + profBonus);
            if (selection1.equals("Insight") || selection2.equals("Insight"))
                this.newCharacter.setThisSkill(6, this.newCharacter.getThisSkill(6) + profBonus);
            if (selection1.equals("Intimidation") || selection2.equals("Intimidation"))
                this.newCharacter.setThisSkill(7, this.newCharacter.getThisSkill(7) + profBonus);
            if (selection1.equals("Investigation") || selection2.equals("Investigation"))
                this.newCharacter.setThisSkill(8, this.newCharacter.getThisSkill(8) + profBonus);
            if (selection1.equals("Medicine") || selection2.equals("Medicine"))
                this.newCharacter.setThisSkill(9, this.newCharacter.getThisSkill(9) + profBonus);
            if (selection1.equals("Nature") || selection2.equals("Nature"))
                this.newCharacter.setThisSkill(10, this.newCharacter.getThisSkill(10) + profBonus);
            if (selection1.equals("Perception") || selection2.equals("Perception"))
                this.newCharacter.setThisSkill(11, this.newCharacter.getThisSkill(11) + profBonus);
            if (selection1.equals("Performance") || selection2.equals("Performance"))
                this.newCharacter.setThisSkill(12, this.newCharacter.getThisSkill(12) + profBonus);
            if (selection1.equals("Persuasion") || selection2.equals("Persuasion"))
                this.newCharacter.setThisSkill(13, this.newCharacter.getThisSkill(13) + profBonus);
            if (selection1.equals("Religion") || selection2.equals("Religion"))
                this.newCharacter.setThisSkill(14, this.newCharacter.getThisSkill(14) + profBonus);
            if (selection1.equals("Sleight of Hand") || selection2.equals("Sleight of Hand"))
                this.newCharacter.setThisSkill(15, this.newCharacter.getThisSkill(15) + profBonus);
            if (selection1.equals("Stealth") || selection2.equals("Stealth"))
                this.newCharacter.setThisSkill(16, this.newCharacter.getThisSkill(16) + profBonus);
            if (selection1.equals("Survival") || selection2.equals("Survival"))
                this.newCharacter.setThisSkill(17, this.newCharacter.getThisSkill(17) + profBonus);

            //setup languages panel
            //MOVE ONTO LANGUAGES PANEL

            this.languageAmountLabel.setText(this.languageAmountLabel.getText() + " " + this.newCharacter.getLanguageAmount());
            //disable all language check boxes if languageAmount == 0
            if (this.newCharacter.getLanguageAmount() == 0) {
                this.commonCheck.setEnabled(false);
                this.dwarvishCheck.setEnabled(false);
                this.elvishCheck.setEnabled(false);
                this.giantCheck.setEnabled(false);
                this.gnomishCheck.setEnabled(false);
                this.goblinCheck.setEnabled(false);
                this.halflingCheck.setEnabled(false);
                this.orcCheck.setEnabled(false);
                this.abyssalCheck.setEnabled(false);
                this.celestialCheck.setEnabled(false);
                this.draconicCheck.setEnabled(false);
                this.deepspeechCheck.setEnabled(false);
                this.infernalCheck.setEnabled(false);
                this.primordialCheck.setEnabled(false);
                this.sylvanCheck.setEnabled(false);
                this.undercommonCheck.setEnabled(false);
            }
            Color color = new Color(255, 0, 0);
            this.commonCheck.setEnabled(false);
            this.commonCheck.setForeground(color);
            //check each language that is known automatically by race
            String race = this.newCharacter.getRace();
            if (race.equals("Hill Dwarf") || race.equals("Mountain Dwarf")) {
                this.dwarvishCheck.setForeground(color);
                this.dwarvishCheck.setSelected(true);
                this.dwarvishCheck.setEnabled(false);
            }
            if (race.equals("High Elf") || race.equals("Wood Elf") || race.equals("Dark Elf (Drow)")) {
                this.elvishCheck.setForeground(color);
                this.elvishCheck.setSelected(true);
                this.elvishCheck.setEnabled(false);
            }
            if (race.equals("Lightfoot Halfling") || race.equals("Stout Halfling")) {
                this.halflingCheck.setForeground(color);
                this.halflingCheck.setSelected(true);
                this.halflingCheck.setEnabled(false);
            }
            if (race.equals("Forest Gnome") || race.equals("Rock Gnome")) {
                this.gnomishCheck.setForeground(color);
                this.gnomishCheck.setSelected(true);
                this.gnomishCheck.setEnabled(false);
            }
            if (race.equals("Half-Elf")) {
                this.elvishCheck.setForeground(color);
                this.elvishCheck.setSelected(true);
                this.elvishCheck.setEnabled(false);
            }
            if (race.equals("Half-Orc")) {
                this.orcCheck.setForeground(color);
                this.orcCheck.setSelected(true);
                this.orcCheck.setEnabled(false);
            }
            if (race.equals("Tiefling")) {
                this.infernalCheck.setForeground(color);
                this.infernalCheck.setSelected(true);
                this.infernalCheck.setEnabled(false);
            }
            if (this.newCharacter.getRace().equals("Dragonborn (Black)")) {
                this.draconicCheck.setForeground(color);
                this.draconicCheck.setSelected(true);
                this.draconicCheck.setEnabled(false);
            }

            if (this.newCharacter.getRace().equals("Dragonborn (Blue)")) {
                this.draconicCheck.setForeground(color);
                this.draconicCheck.setSelected(true);
                this.draconicCheck.setEnabled(false);
            }
            if (this.newCharacter.getRace().equals("Dragonborn (Brass)")) {
                this.draconicCheck.setForeground(color);
                this.draconicCheck.setSelected(true);
                this.draconicCheck.setEnabled(false);
            }
            if (this.newCharacter.getRace().equals("Dragonborn (Bronze)")) {
                this.draconicCheck.setForeground(color);
                this.draconicCheck.setSelected(true);
                this.draconicCheck.setEnabled(false);
            }
            if (this.newCharacter.getRace().equals("Dragonborn (Copper)")) {
                this.draconicCheck.setForeground(color);
                this.draconicCheck.setSelected(true);
                this.draconicCheck.setEnabled(false);
            }
            if (this.newCharacter.getRace().equals("Dragonborn (Gold)")) {
                this.draconicCheck.setForeground(color);
                this.draconicCheck.setSelected(true);
                this.draconicCheck.setEnabled(false);
            }
            if (this.newCharacter.getRace().equals("Dragonborn (Green)")) {
                this.draconicCheck.setForeground(color);
                this.draconicCheck.setSelected(true);
                this.draconicCheck.setEnabled(false);
            }
            if (this.newCharacter.getRace().equals("Dragonborn (Red)")) {
                this.draconicCheck.setForeground(color);
                this.draconicCheck.setSelected(true);
                this.draconicCheck.setEnabled(false);
            }
            if (this.newCharacter.getRace().equals("Dragonborn (Silver)")) {
                this.draconicCheck.setForeground(color);
                this.draconicCheck.setSelected(true);
                this.draconicCheck.setEnabled(false);
            }
            if (this.newCharacter.getRace().equals("Dragonborn (White)")) {
                this.draconicCheck.setForeground(color);
                this.draconicCheck.setSelected(true);
                this.draconicCheck.setEnabled(false);
            }

            //tally up initial languages checked
            JCheckBox[] languageChecks = new JCheckBox[16];
            languageChecks[0] = this.commonCheck;
            languageChecks[1] = this.dwarvishCheck;
            languageChecks[2] = this.elvishCheck;
            languageChecks[3] = this.giantCheck;
            languageChecks[4] = this.gnomishCheck;
            languageChecks[5] = this.goblinCheck;
            languageChecks[6] = this.halflingCheck;
            languageChecks[7] = this.orcCheck;
            languageChecks[8] = this.abyssalCheck;
            languageChecks[9] = this.celestialCheck;
            languageChecks[10] = this.draconicCheck;
            languageChecks[11] = this.deepspeechCheck;
            languageChecks[12] = this.infernalCheck;
            languageChecks[13] = this.primordialCheck;
            languageChecks[14] = this.sylvanCheck;
            languageChecks[15] = this.undercommonCheck;

            for (int i = 0; i < 15; i++) {
                if (languageChecks[i].isSelected())
                    this.initialLangsSelected++;
            }
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "languagePanel");
        }
    }//GEN-LAST:event_toLanguagePanel2ActionPerformed

    private void toNamePanelButtonActionPerformed() {//GEN-FIRST:event_toNamePanelButtonActionPerformed
        // TODO add your handling code here:
        //tally up how many languages are selected:
        JCheckBox[] languageChecks = new JCheckBox[16];
        languageChecks[0] = this.commonCheck;
        languageChecks[1] = this.dwarvishCheck;
        languageChecks[2] = this.elvishCheck;
        languageChecks[3] = this.giantCheck;
        languageChecks[4] = this.gnomishCheck;
        languageChecks[5] = this.goblinCheck;
        languageChecks[6] = this.halflingCheck;
        languageChecks[7] = this.orcCheck;
        languageChecks[8] = this.abyssalCheck;
        languageChecks[9] = this.celestialCheck;
        languageChecks[10] = this.draconicCheck;
        languageChecks[11] = this.deepspeechCheck;
        languageChecks[12] = this.infernalCheck;
        languageChecks[13] = this.primordialCheck;
        languageChecks[14] = this.sylvanCheck;
        languageChecks[15] = this.undercommonCheck;

        int languagesChecked = 0;
        for (int i = 0; i < 16; i++) {
            if (languageChecks[i].isSelected())
                languagesChecked++;
        }

        int languagesSelected = languagesChecked - this.initialLangsSelected;
        if (languagesSelected != this.newCharacter.getLanguageAmount())
            JOptionPane.showMessageDialog(null, "Must select correct amount of languages.");
        else {
            //MOVE ONTO NEXT PANEL / SAVE LANGUAGES
            if (this.dwarvishCheck.isSelected())
                this.newCharacter.addThisLanguage("Dwarvish");
            if (this.elvishCheck.isSelected())
                this.newCharacter.addThisLanguage("Elvish");
            if (this.giantCheck.isSelected())
                this.newCharacter.addThisLanguage("Giant");
            if (this.gnomishCheck.isSelected())
                this.newCharacter.addThisLanguage("Gnomish");
            if (this.goblinCheck.isSelected())
                this.newCharacter.addThisLanguage("Goblin");
            if (this.halflingCheck.isSelected())
                this.newCharacter.addThisLanguage("Halfling");
            if (this.orcCheck.isSelected())
                this.newCharacter.addThisLanguage("Orc");
            if (this.abyssalCheck.isSelected())
                this.newCharacter.addThisLanguage("Abyssal");
            if (this.celestialCheck.isSelected())
                this.newCharacter.addThisLanguage("Celestial");
            if (this.draconicCheck.isSelected())
                this.newCharacter.addThisLanguage("Draconic");
            if (this.deepspeechCheck.isSelected())
                this.newCharacter.addThisLanguage("Deep Speech");
            if (this.infernalCheck.isSelected())
                this.newCharacter.addThisLanguage("Infernal");
            if (this.primordialCheck.isSelected())
                this.newCharacter.addThisLanguage("Primordial");
            if (this.sylvanCheck.isSelected())
                this.newCharacter.addThisLanguage("Sylvan");
            if (this.undercommonCheck.isSelected())
                this.newCharacter.addThisLanguage("Undercommon");

            //if dwarf, move to dwarfToolProficiencyPanel
            //else move to name panel
            if (this.newCharacter.getRace().equals("Hill Dwarf") || this.newCharacter.getRace().equals("Mountain Dwarf")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "dwarfToolPanel");
            } else {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "namePanel");
            }
        }
    }//GEN-LAST:event_toNamePanelButtonActionPerformed

    private void toCantripOrEquipmentPanelActionPerformed() {//GEN-FIRST:event_toCantripOrEquipmentPanelActionPerformed
        // TODO add your handling code here:
        String character = this.characterNameField.getText();
        String player = this.playerNameField.getText();
        if (character.equals("") || player.equals(""))
            JOptionPane.showMessageDialog(null, "Both fields require input");
        else {
            //save names and continue to cantrip panel (if spellcaster)
            //if not spellcaster, continue to Equipment Panel
            this.newCharacter.setPlayerName(player);
            this.newCharacter.setCharacterName(character);

            if (this.newCharacter.getPlayerClass().equals("Druid")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "druidSpellPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Cleric")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "clericSpellPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Wizard")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "wizardSpellPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Warlock")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "warlockSpellPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Bard")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "bardSpellPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Sorcerer")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "sorcererSpellPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Barbarian")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "barbarianEquipmentPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Fighter")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "fighterEquipmentPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Ranger")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "rangerEquipmentPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Paladin")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "paladinEquipmentPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Rogue")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "rogueEquipmentPanel");
            }
            if (this.newCharacter.getPlayerClass().equals("Monk")) {
                CardLayout card = (CardLayout) mainPanel.getLayout();
                card.show(mainPanel, "monkEquipmentPanel");
            }
        }
    }//GEN-LAST:event_toCantripOrEquipmentPanelActionPerformed

    private void toNamePanel2ActionPerformed() {//GEN-FIRST:event_toNamePanel2ActionPerformed
        // TODO add your handling code here:
        if (!this.smithToolRadio.isSelected() && !this.masonToolsRadio.isSelected() && !this.brewerSuppliesRadio.isSelected())
            JOptionPane.showMessageDialog(null, "Must select tool proficiency.");
        else {
            if (this.smithToolRadio.isSelected())
                this.newCharacter.addThisOtherProf("Smith's Tools");
            if (this.masonToolsRadio.isSelected())
                this.newCharacter.addThisOtherProf("Mason's Tools");
            if (this.brewerSuppliesRadio.isSelected())
                this.newCharacter.addThisOtherProf("Brewer's Supplies");

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "namePanel");
        }
    }//GEN-LAST:event_toNamePanel2ActionPerformed

    private void toDruidEquipmentPanelActionPerformed() {//GEN-FIRST:event_toDruidEquipmentPanelActionPerformed
        // TODO add your handling code here:
        int cantripsChosen = 0;
        if (this.druidcraftDruid.isSelected())
            cantripsChosen++;
        if (this.guidanceDruid.isSelected())
            cantripsChosen++;
        if (this.mendingDruid.isSelected())
            cantripsChosen++;
        if (this.poisonSprayDruid.isSelected())
            cantripsChosen++;
        if (this.produceFlameDruid.isSelected())
            cantripsChosen++;
        if (this.resistanceDruid.isSelected())
            cantripsChosen++;
        if (this.shillelaghDruid.isSelected())
            cantripsChosen++;
        if (this.thornWhipDruid.isSelected())
            cantripsChosen++;

        if (cantripsChosen != 2)
            JOptionPane.showMessageDialog(null, "Must select 2 Druid Cantrips");
        else {
            //save cantrips and move to equipment panel
            if (this.druidcraftDruid.isSelected())
                this.newCharacter.addThisCantrip("Druidcraft");
            if (this.guidanceDruid.isSelected())
                this.newCharacter.addThisCantrip("Guidance");
            if (this.mendingDruid.isSelected())
                this.newCharacter.addThisCantrip("Mending");
            if (this.poisonSprayDruid.isSelected())
                this.newCharacter.addThisCantrip("Poison Spray");
            if (this.produceFlameDruid.isSelected())
                this.newCharacter.addThisCantrip("Produce Flame");
            if (this.resistanceDruid.isSelected())
                this.newCharacter.addThisCantrip("Resistance");
            if (this.shillelaghDruid.isSelected())
                this.newCharacter.addThisCantrip("Shillelagh");
            if (this.thornWhipDruid.isSelected())
                this.newCharacter.addThisCantrip("Thorn Whip");

            //Move onto DruidEquipmentPanel
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "druidEquipmentPanel");
        }
    }//GEN-LAST:event_toDruidEquipmentPanelActionPerformed

    private void toClericEquipmentPanelActionPerformed() {//GEN-FIRST:event_toClericEquipmentPanelActionPerformed
        // TODO add your handling code here:
        int cantripsSelected = 0;

        if (this.guidanceCleric.isSelected())
            cantripsSelected++;
        if (this.lightCleric.isSelected())
            cantripsSelected++;
        if (this.mendingCleric.isSelected())
            cantripsSelected++;
        if (this.resistanceCleric.isSelected())
            cantripsSelected++;
        if (this.sacredFlameCleric.isSelected())
            cantripsSelected++;
        if (this.spareTheDyingCleric.isSelected())
            cantripsSelected++;
        if (this.thaumaturgyCleric.isSelected())
            cantripsSelected++;

        if (cantripsSelected != 3)
            JOptionPane.showMessageDialog(null, "Must select 3 Cleric Cantrips");
        else {
            //save cantrips
            if (this.guidanceCleric.isSelected())
                this.newCharacter.addThisCantrip("Guidance");
            if (this.lightCleric.isSelected())
                this.newCharacter.addThisCantrip("Light");
            if (this.mendingCleric.isSelected())
                this.newCharacter.addThisCantrip("Mending");
            if (this.resistanceCleric.isSelected())
                this.newCharacter.addThisCantrip("Resistance");
            if (this.sacredFlameCleric.isSelected())
                this.newCharacter.addThisCantrip("Sacred Flame");
            if (this.spareTheDyingCleric.isSelected())
                this.newCharacter.addThisCantrip("Spare the Dying");
            if (this.thaumaturgyCleric.isSelected())
                this.newCharacter.addThisCantrip("Thaumaturgy");

            //move onto cleric equipment panel
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "clericEquipmentPanel");
        }
    }//GEN-LAST:event_toClericEquipmentPanelActionPerformed

    private void toWizardEquipmentPanelActionPerformed() {//GEN-FIRST:event_toWizardEquipmentPanelActionPerformed
        // TODO add your handling code here:
        int cantripsChosen = 0;
        ArrayList<String> selected = new ArrayList<>();
        boolean alreadyChosen = false;

        if (this.acidSplashWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Acid Splash");
        }
        if (this.bladeWardWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Blade Ward");
        }
        if (this.chillTouchWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Chill Touch");
        }
        if (this.dancingLightsWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Dancing Lights");
        }
        if (this.fireBoltWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Firebolt");
        }
        if (this.friendsWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Friends");
        }
        if (this.lightWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Light");
        }
        if (this.mageHandWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Mage Hand");
        }
        if (this.mendingWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Mending");
        }
        if (this.messageWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Message");
        }
        if (this.minorIllusionWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Minor Illusion");
        }
        if (this.poisonSprayWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Poison Spray");
        }
        if (this.prestidigitationWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Prestidigitation");
        }
        if (this.rayOfFrostWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Ray of Frost");
        }
        if (this.shockingGraspWizard.isSelected()) {
            cantripsChosen++;
            selected.add("Shocking Grasp");
        }
        if (this.trueStrikeWizard.isSelected()) {
            cantripsChosen++;
            selected.add("True Strike");
        }
        //check if any chosen antrips are the same chosen for high elf
        if (this.newCharacter.getRace().equals("High Elf")) {

            String cantrip = this.newCharacter.getCantrips().get(0);
            for (String cant : selected) {
                if (cant.equals(cantrip))
                    alreadyChosen = true;
            }
        }
        if (cantripsChosen != 3)
            JOptionPane.showMessageDialog(null, "Must select 3 Wizard Cantrips");
        else if (alreadyChosen)
            JOptionPane.showMessageDialog(null, "One Cantrip was selected previously during High Elf Cantrip Selection");
        else {
            //save cantrips and move onto wizard equipment panel
            if (this.acidSplashWizard.isSelected())
                this.newCharacter.addThisCantrip("Acid Splash");
            if (this.bladeWardWizard.isSelected())
                this.newCharacter.addThisCantrip("Blade Ward");
            if (this.chillTouchWizard.isSelected())
                this.newCharacter.addThisCantrip("Chill Touch");
            if (this.dancingLightsWizard.isSelected())
                this.newCharacter.addThisCantrip("Dancing Lights");
            if (this.fireBoltWizard.isSelected())
                this.newCharacter.addThisCantrip("Fire Bolt");
            if (this.friendsWizard.isSelected())
                this.newCharacter.addThisCantrip("Friends");
            if (this.lightWizard.isSelected())
                this.newCharacter.addThisCantrip("Light");
            if (this.mageHandWizard.isSelected())
                this.newCharacter.addThisCantrip("Mage Hand");
            if (this.mendingWizard.isSelected())
                this.newCharacter.addThisCantrip("Mending");
            if (this.minorIllusionWizard.isSelected())
                this.newCharacter.addThisCantrip("Minor Illusion");
            if (this.poisonSprayWizard.isSelected())
                this.newCharacter.addThisCantrip("Poison Spray");
            if (this.prestidigitationWizard.isSelected())
                this.newCharacter.addThisCantrip("Prestidigitation");
            if (this.rayOfFrostWizard.isSelected())
                this.newCharacter.addThisCantrip("Ray of Frost");
            if (this.shockingGraspWizard.isSelected())
                this.newCharacter.addThisCantrip("Shocking Grasp");
            if (this.trueStrikeWizard.isSelected())
                this.newCharacter.addThisCantrip("True Strike");

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "wizardEquipmentPanel");
        }

    }//GEN-LAST:event_toWizardEquipmentPanelActionPerformed

    private void toWarlockEquipmentPanelActionPerformed() {//GEN-FIRST:event_toWarlockEquipmentPanelActionPerformed
        // TODO add your handling code here:
        int cantripsChosen = 0;
        int spellsChosen = 0;

        JCheckBox[] cantrips = new JCheckBox[9];
        cantrips[0] = this.bladeWardWarlock;
        cantrips[1] = this.chillTouchWarlock;
        cantrips[2] = this.eldritchBlastWarlock;
        cantrips[3] = this.friendsWarlock;
        cantrips[4] = this.mageHandWarlock;
        cantrips[5] = this.minorIllusionWarlock;
        cantrips[6] = this.poisonSprayWarlock;
        cantrips[7] = this.prestidigitationWarlock;
        cantrips[8] = this.trueStrikeWarlock;

        JCheckBox[] spells = new JCheckBox[13];
        spells[0] = this.armorOfAgathysWarlock;
        spells[1] = this.armsOfHadarWarlock;
        spells[2] = this.charmPersonWarlock;
        spells[3] = this.comprehendLanguagesWarlock;
        spells[4] = this.expeditiousRetreatWarlock;
        spells[5] = this.hellishRebukeWarlock;
        spells[6] = this.hexWarlock;
        spells[7] = this.illusoryScriptWarlock;
        spells[8] = this.protectionWarlock;
        spells[9] = this.unseenServantWarlock;
        spells[10] = this.witchBoltWarlock;
        spells[11] = this.patronSpell1;
        spells[12] = this.patronSpell2;

        for (int i = 0; i < 9; i++) {
            if (cantrips[i].isSelected())
                cantripsChosen++;
        }
        for (int i = 0; i < 13; i++) {
            if (spells[i].isSelected())
                spellsChosen++;
        }

        if (cantripsChosen != 2 || spellsChosen != 2)
            JOptionPane.showMessageDialog(null, "Must select 2 Warlock Cantrips and 2 1st-Level Spells.");
        else {
            //save cantrips, move to equipment panel
            for (int i = 0; i < 9; i++) {
                if (cantrips[i].isSelected())
                    this.newCharacter.addThisCantrip(cantrips[i].getText());
            }
            for (int i = 0; i < 13; i++) {
                if (spells[i].isSelected())
                    this.newCharacter.addThisFirstLevel(spells[i].getText());
            }
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "warlockEquipmentPanel");
        }
    }//GEN-LAST:event_toWarlockEquipmentPanelActionPerformed

    private void toBardEquipmentPanelActionPerformed() {//GEN-FIRST:event_toBardEquipmentPanelActionPerformed
        // TODO add your handling code here:
        int cantripsChosen = 0;
        int spellsChosen = 0;

        JCheckBox[] cantrips = new JCheckBox[11];
        JCheckBox[] spells = new JCheckBox[21];

        cantrips[0] = this.bladeWardBard;
        cantrips[1] = this.dancingLightsBard;
        cantrips[2] = this.friendsBard;
        cantrips[3] = this.lightBard;
        cantrips[4] = this.mageHandBard;
        cantrips[5] = this.mendingBard;
        cantrips[6] = this.messageBard;
        cantrips[7] = this.minorIllusionBard;
        cantrips[8] = this.prestidigitationBard;
        cantrips[9] = this.trueStrikeBard;
        cantrips[10] = this.viciousMockeryBard;

        spells[0] = this.animalFriendshipBard;
        spells[1] = this.baneBard;
        spells[2] = this.charmPersonBard;
        spells[3] = this.comprehendLanguagesBard;
        spells[4] = this.cureWoundsBard;
        spells[5] = this.detectMagicBard;
        spells[6] = this.disguiseSelfBard;
        spells[7] = this.dissonantWhispersBard;
        spells[8] = this.faerieFireBard;
        spells[9] = this.featherFallBard;
        spells[10] = this.healingWordBard;
        spells[11] = this.heroismBard;
        spells[12] = this.identifyBard;
        spells[13] = this.illusoryScriptBard;
        spells[14] = this.longstriderBard;
        spells[15] = this.silentImageBard;
        spells[16] = this.sleepBard;
        spells[17] = this.speakWithAnimalsBard;
        spells[18] = this.tashasHideousLaughterBard;
        spells[19] = this.thunderwaveBard;
        spells[20] = this.unseenServantBard;

        //count selections
        for (int i = 0; i < 11; i++) {
            if (cantrips[i].isSelected())
                cantripsChosen++;
        }

        for (int i = 0; i < 21; i++) {
            if (spells[i].isSelected())
                spellsChosen++;
        }

        if (cantripsChosen != 2 || spellsChosen != 4)
            JOptionPane.showMessageDialog(null, "Must select 2 Bard Cantrips and 4 1st-Level Spells.");
        else {
            //save cantrips and spells and move to equipment panel
            for (int i = 0; i < 11; i++) {
                if (cantrips[i].isSelected())
                    this.newCharacter.addThisCantrip(cantrips[i].getText());
            }
            for (int i = 0; i < 21; i++) {
                if (spells[i].isSelected())
                    this.newCharacter.addThisFirstLevel(spells[i].getText());
            }

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "bardEquipmentPanel");
        }
    }//GEN-LAST:event_toBardEquipmentPanelActionPerformed

    private void toSorcererEquipmentPanelActionPerformed() {//GEN-FIRST:event_toSorcererEquipmentPanelActionPerformed
        // TODO add your handling code here:
        int cantripsChosen = 0;
        int spellsChosen = 0;

        JCheckBox[] cantrips = new JCheckBox[16];
        JCheckBox[] spells = new JCheckBox[17];

        cantrips[0] = this.acidSplashSorcerer;
        cantrips[1] = this.bladeWardSorcerer;
        cantrips[2] = this.chillTouchSorcerer;
        cantrips[3] = this.dancingLightsSorcerer;
        cantrips[4] = this.fireBoltSorcerer;
        cantrips[5] = this.friendsSorcerer;
        cantrips[6] = this.lightSorcerer;
        cantrips[7] = this.mageHandSorcerer;
        cantrips[8] = this.mendingSorcerer;
        cantrips[9] = this.messageSorcerer;
        cantrips[10] = this.minorIllusionSorcerer;
        cantrips[11] = this.poisonSpraySorcerer;
        cantrips[12] = this.prestidigitationSorcerer;
        cantrips[13] = this.rayOfFrostSorcerer;
        cantrips[14] = this.shockingGraspSorcerer;
        cantrips[15] = this.trueStrikeSorcerer;

        spells[0] = this.burningHandsSorcerer;
        spells[1] = this.charmPersonSorcerer;
        spells[2] = this.chromaticOrbSorcerer;
        spells[3] = this.colorSpraySorcerer;
        spells[4] = this.comprehendLanguagesSorcerer;
        spells[5] = this.detectMagicSorcerer;
        spells[6] = this.disguiseSelfSorcerer;
        spells[7] = this.expeditiousRetreatSorcerer;
        spells[8] = this.falseLifeSorcerer;
        spells[9] = this.featherFallSorcerer;
        spells[10] = this.fogCloudSorcerer;
        spells[11] = this.jumpSorcerer;
        spells[12] = this.mageArmorSorcerer;
        spells[13] = this.magicMissileSorcerer;
        spells[14] = this.rayOfSicknessSorcerer;
        spells[15] = this.shieldSorcerer;
        spells[16] = this.silentImageSorcerer;

        //count selections
        for (int i = 0; i < 16; i++) {
            if (cantrips[i].isSelected())
                cantripsChosen++;
        }
        for (int i = 0; i < 17; i++) {
            if (spells[i].isSelected())
                spellsChosen++;
        }

        if (cantripsChosen != 4 || spellsChosen != 2)
            JOptionPane.showMessageDialog(null, "Must select 4 Sorcerer Cantrips and 2 1st-Level Spells.");
        else {
            //save spells and move on to equipment panel
            for (int i = 0; i < 16; i++) {
                if (cantrips[i].isSelected())
                    this.newCharacter.addThisCantrip(cantrips[i].getText());
            }
            for (int i = 0; i < 17; i++) {
                if (spells[i].isSelected())
                    this.newCharacter.addThisFirstLevel(spells[i].getText());
            }
            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "sorcererEquipmentPanel");
        }
    }//GEN-LAST:event_toSorcererEquipmentPanelActionPerformed

    private void simpleWeaponDruid1ActionPerformed() {//GEN-FIRST:event_simpleWeaponDruid1ActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponDruidList1.setModel(new DefaultListModel());
        DefaultListModel listModel1 = (DefaultListModel) this.simpleWeaponDruidList1.getModel();
        listModel1.addElement("Club");
        listModel1.addElement("Dagger");
        listModel1.addElement("Greatclub");
        listModel1.addElement("Handaxe");
        listModel1.addElement("Javelin");
        listModel1.addElement("Light Hammer");
        listModel1.addElement("Mace");
        listModel1.addElement("Quarterstaff");
        listModel1.addElement("Sickle");
        listModel1.addElement("Spear");
        listModel1.addElement("Light Crossbow");
        listModel1.addElement("Dart");
        listModel1.addElement("Shortbow");
        listModel1.addElement("Sling");
    }//GEN-LAST:event_simpleWeaponDruid1ActionPerformed

    private void woodenShieldDruidActionPerformed() {//GEN-FIRST:event_woodenShieldDruidActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponDruidList1.setModel(new DefaultListModel());
    }//GEN-LAST:event_woodenShieldDruidActionPerformed

    private void simpleWeaponDruid2ActionPerformed() {//GEN-FIRST:event_simpleWeaponDruid2ActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponDruidList2.setModel(new DefaultListModel());
        DefaultListModel listModel2 = (DefaultListModel) this.simpleWeaponDruidList2.getModel();
        listModel2.addElement("Club");
        listModel2.addElement("Dagger");
        listModel2.addElement("Greatclub");
        listModel2.addElement("Handaxe");
        listModel2.addElement("Javelin");
        listModel2.addElement("Light Hammer");
        listModel2.addElement("Mace");
        listModel2.addElement("Quarterstaff");
        listModel2.addElement("Sickle");
        listModel2.addElement("Spear");
    }//GEN-LAST:event_simpleWeaponDruid2ActionPerformed

    private void scimitarDruidActionPerformed() {//GEN-FIRST:event_scimitarDruidActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponDruidList2.setModel(new DefaultListModel());
    }//GEN-LAST:event_scimitarDruidActionPerformed

    private void toMiscFromDruidActionPerformed() {//GEN-FIRST:event_toMiscFromDruidActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;
        boolean error4 = false;
        if (!woodenShieldDruid.isSelected() && !simpleWeaponDruid1.isSelected())
            error1 = true;
        if (!scimitarDruid.isSelected() && !simpleWeaponDruid2.isSelected())
            error2 = true;
        if (simpleWeaponDruid1.isSelected() && simpleWeaponDruidList1.isSelectionEmpty())
            error3 = true;
        if (simpleWeaponDruid2.isSelected() && simpleWeaponDruidList2.isSelectionEmpty())
            error4 = true;

        if (error1 || error2 || error3 || error4)
            JOptionPane.showMessageDialog(null, "Must make selections before continuing");
        else {
            //save equipment choices, move on
            if (woodenShieldDruid.isSelected()) {
                this.newCharacter.setShield("Wooden Shield");
                this.newCharacter.addThisToInventory("Wooden Shield");
            }
            if (simpleWeaponDruid1.isSelected()) {
                this.newCharacter.addThisWeapon(this.simpleWeaponDruidList1.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponDruidList1.getSelectedValue().toString());
            }
            if (scimitarDruid.isSelected()) {
                this.newCharacter.addThisWeapon("Scimitar");
                this.newCharacter.addThisToInventory("Scimitar");
            }
            if (simpleWeaponDruid2.isSelected()) {
                this.newCharacter.addThisWeapon(this.simpleWeaponDruidList2.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponDruidList2.getSelectedValue().toString());
            }

            this.newCharacter.addThisToInventory("Druidic Focus");
            this.newCharacter.setArmor("Leather Armor");
            this.newCharacter.addThisToInventory("Leather Armor");

            //add items from explorer's pack to inventory
            String[] items = Equipment.getExplorersPack();
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            //add items from background to inventory
            String[] bgitems = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : bgitems)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");

        }
    }//GEN-LAST:event_toMiscFromDruidActionPerformed

    private void simpleWeaponClericActionPerformed() {//GEN-FIRST:event_simpleWeaponClericActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponClericList.setModel(new DefaultListModel());
        DefaultListModel listModel1 = (DefaultListModel) this.simpleWeaponClericList.getModel();
        listModel1.addElement("Club");
        listModel1.addElement("Dagger");
        listModel1.addElement("Greatclub");
        listModel1.addElement("Handaxe");
        listModel1.addElement("Javelin");
        listModel1.addElement("Light Hammer");
        listModel1.addElement("Mace");
        listModel1.addElement("Quarterstaff");
        listModel1.addElement("Sickle");
        listModel1.addElement("Spear");
        listModel1.addElement("Light Crossbow");
        listModel1.addElement("Dart");
        listModel1.addElement("Shortbow");
        listModel1.addElement("Sling");
    }//GEN-LAST:event_simpleWeaponClericActionPerformed

    private void lightCrossBowClericActionPerformed() {//GEN-FIRST:event_lightCrossBowClericActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponClericList.setModel(new DefaultListModel());
    }//GEN-LAST:event_lightCrossBowClericActionPerformed

    private void toMiscFromClericActionPerformed() {//GEN-FIRST:event_toMiscFromClericActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;
        boolean error4 = false;
        boolean error5 = false;

        if (!this.maceCleric.isSelected() && !this.warhammerCleric.isSelected())
            error1 = true;
        if (!this.scaleMailCleric.isSelected() && !this.leatherArmorCleric.isSelected() && !this.chainMailCleric.isSelected())
            error2 = true;
        if (!this.lightCrossBowCleric.isSelected() && !this.simpleWeaponCleric.isSelected())
            error3 = true;
        if (this.simpleWeaponCleric.isSelected() && this.simpleWeaponClericList.isSelectionEmpty())
            error4 = true;
        if (!this.priestPackCleric.isSelected() && !this.explorerPackCleric.isSelected())
            error5 = true;

        if (error1 || error2 || error3 || error4 || error5)
            JOptionPane.showMessageDialog(null, "Must make selections before continuing");
        else {
            //save equipment and move on
            if (this.maceCleric.isSelected()) {
                this.newCharacter.addThisWeapon("Mace");
                this.newCharacter.addThisToInventory("Mace");
            } else {
                this.newCharacter.addThisWeapon("Warhammer");
                this.newCharacter.addThisToInventory("Warhammer");
            }

            if (this.scaleMailCleric.isSelected()) {
                this.newCharacter.setArmor("Scale Mail");
                this.newCharacter.addThisToInventory("Scale Mail");
            } else if (this.leatherArmorCleric.isSelected()) {
                this.newCharacter.setArmor("Leather Armor");
                this.newCharacter.addThisToInventory("Leather Armor");
            } else {
                this.newCharacter.setArmor("Chain Mail");
                this.newCharacter.addThisToInventory("Chain Mail");
            }

            if (this.lightCrossBowCleric.isSelected()) {
                this.newCharacter.addThisWeapon("Light Crossbow");
                this.newCharacter.addThisToInventory("Light Crossbow");
                this.newCharacter.addThisToInventory("20 bolts");
            } else {
                this.newCharacter.addThisWeapon(this.simpleWeaponClericList.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponClericList.getSelectedValue().toString());
            }

            if (this.priestPackCleric.isSelected()) {
                String[] items = Equipment.getPriestsPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else {
                String[] items = Equipment.getExplorersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            }
            this.newCharacter.addThisToInventory("Holy Symbol");
            this.newCharacter.setShield("Shield");
            this.newCharacter.addThisToInventory("Shield");

            //add items from background
            String[] bgitems = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : bgitems)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }

    }//GEN-LAST:event_toMiscFromClericActionPerformed

    private void toMiscFromBarbarianActionPerformed() {//GEN-FIRST:event_toMiscFromBarbarianActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;
        boolean error4 = false;

        if (!this.greataxeBarbarian.isSelected() && !this.martialWeaponBarbarian.isSelected())
            error1 = true;
        if (this.martialWeaponBarbarian.isSelected() && this.martialWeaponBarbarianList.isSelectionEmpty())
            error2 = true;
        if (!this.handaxeBarbarian.isSelected() && !this.simpleWeaponBarbarian.isSelected())
            error3 = true;
        if (this.simpleWeaponBarbarian.isSelected() && this.simpleWeaponBarbarianList.isSelectionEmpty())
            error4 = true;

        if (error1 || error2 || error3 || error4)
            JOptionPane.showMessageDialog(null, "Must make selections before continuing");
        else {
            //save selections and move on
            if (this.greataxeBarbarian.isSelected()) {
                this.newCharacter.addThisWeapon("Greataxe");
                this.newCharacter.addThisToInventory("Greataxe");
            } else {
                this.newCharacter.addThisWeapon(this.martialWeaponBarbarianList.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.martialWeaponBarbarianList.getSelectedValue().toString());
            }
            if (this.handaxeBarbarian.isSelected()) {
                this.newCharacter.addThisWeapon("Handaxe");
                this.newCharacter.addThisToInventory("Handaxe x2");
            } else {
                this.newCharacter.addThisWeapon(this.simpleWeaponBarbarianList.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponBarbarianList.getSelectedValue().toString());
            }
            String[] items = Equipment.getExplorersPack();
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            //add items from background
            String[] bgitems = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : bgitems)
                this.newCharacter.addThisToInventory(item);

            this.newCharacter.addThisWeapon("Javelin");
            this.newCharacter.addThisToInventory("Javelin x4");

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }
    }//GEN-LAST:event_toMiscFromBarbarianActionPerformed

    private void simpleWeaponBarbarianActionPerformed() {//GEN-FIRST:event_simpleWeaponBarbarianActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponBarbarianList.setModel(new DefaultListModel());
        DefaultListModel listModel1 = (DefaultListModel) this.simpleWeaponBarbarianList.getModel();
        listModel1.addElement("Club");
        listModel1.addElement("Dagger");
        listModel1.addElement("Greatclub");
        listModel1.addElement("Handaxe");
        listModel1.addElement("Javelin");
        listModel1.addElement("Light Hammer");
        listModel1.addElement("Mace");
        listModel1.addElement("Quarterstaff");
        listModel1.addElement("Sickle");
        listModel1.addElement("Spear");
        listModel1.addElement("Light Crossbow");
        listModel1.addElement("Dart");
        listModel1.addElement("Shortbow");
        listModel1.addElement("Sling");
    }//GEN-LAST:event_simpleWeaponBarbarianActionPerformed

    private void handaxeBarbarianActionPerformed() {//GEN-FIRST:event_handaxeBarbarianActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponBarbarianList.setModel(new DefaultListModel());
    }//GEN-LAST:event_handaxeBarbarianActionPerformed

    private void greataxeBarbarianActionPerformed() {//GEN-FIRST:event_greataxeBarbarianActionPerformed
        // TODO add your handling code here:
        this.martialWeaponBarbarianList.setModel(new DefaultListModel());
    }//GEN-LAST:event_greataxeBarbarianActionPerformed

    private void martialWeaponBarbarianActionPerformed() {//GEN-FIRST:event_martialWeaponBarbarianActionPerformed
        // TODO add your handling code here:
        this.martialWeaponBarbarianList.setModel(new DefaultListModel());
        DefaultListModel listModel1 = (DefaultListModel) this.martialWeaponBarbarianList.getModel();
        listModel1.addElement("Battleaxe");
        listModel1.addElement("Flail");
        listModel1.addElement("Glaive");
        listModel1.addElement("Greatsword");
        listModel1.addElement("Halberd");
        listModel1.addElement("Lance");
        listModel1.addElement("Longsword");
        listModel1.addElement("Maul");
        listModel1.addElement("Morningstar");
        listModel1.addElement("Pike");
        listModel1.addElement("Rapier");
        listModel1.addElement("Scimitar");
        listModel1.addElement("Shortsword");
        listModel1.addElement("Trident");
        listModel1.addElement("War Pick");
        listModel1.addElement("Warhammer");
        listModel1.addElement("Whip");
        listModel1.addElement("Blowgun");
        listModel1.addElement("Hand Crossbow");
        listModel1.addElement("Heavy Crossbow");
        listModel1.addElement("Longbow");
        listModel1.addElement("Net");
    }//GEN-LAST:event_martialWeaponBarbarianActionPerformed

    private void simpleWeaponMonkActionPerformed() {//GEN-FIRST:event_simpleWeaponMonkActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponMonkList.setModel(new DefaultListModel());
        DefaultListModel listModel1 = (DefaultListModel) this.simpleWeaponMonkList.getModel();
        listModel1.addElement("Club");
        listModel1.addElement("Dagger");
        listModel1.addElement("Greatclub");
        listModel1.addElement("Handaxe");
        listModel1.addElement("Javelin");
        listModel1.addElement("Light Hammer");
        listModel1.addElement("Mace");
        listModel1.addElement("Quarterstaff");
        listModel1.addElement("Sickle");
        listModel1.addElement("Spear");
        listModel1.addElement("Light Crossbow");
        listModel1.addElement("Dart");
        listModel1.addElement("Shortbow");
        listModel1.addElement("Sling");
    }//GEN-LAST:event_simpleWeaponMonkActionPerformed

    private void shortswordMonkActionPerformed() {//GEN-FIRST:event_shortswordMonkActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponMonkList.setModel(new DefaultListModel());
    }//GEN-LAST:event_shortswordMonkActionPerformed

    private void toMiscFromMonkActionPerformed() {//GEN-FIRST:event_toMiscFromMonkActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;

        if (!this.shortswordMonk.isSelected() && !this.simpleWeaponMonk.isSelected())
            error1 = true;
        if (!this.dungeoneerPackMonk.isSelected() && !this.explorersPackMonk.isSelected())
            error2 = true;
        if (this.simpleWeaponMonk.isSelected() && this.simpleWeaponMonkList.isSelectionEmpty())
            error3 = true;

        if (error1 || error2 || error3)
            JOptionPane.showMessageDialog(null, "Must make selections before continuing");
        else {
            //save selections and move on
            if (this.shortswordMonk.isSelected()) {
                this.newCharacter.addThisWeapon("Shortsword");
                this.newCharacter.addThisToInventory("Shortsword");
            } else {
                this.newCharacter.addThisWeapon(this.simpleWeaponMonkList.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponMonkList.getSelectedValue().toString());
            }
            if (this.dungeoneerPackMonk.isSelected()) {
                String[] items = Equipment.getDungeoneersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else {
                String[] items = Equipment.getExplorersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            }

            this.newCharacter.addThisWeapon("Dart");
            this.newCharacter.addThisToInventory("Darts x10");
            this.newCharacter.addThisWeapon("Unarmed Strike");

            //get equipment from background
            String[] items = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }
    }//GEN-LAST:event_toMiscFromMonkActionPerformed

    private void toMiscFromWizardActionPerformed() {//GEN-FIRST:event_toMiscFromWizardActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;

        if (!this.quarterstaffWizard.isSelected() && !this.daggerWizard.isSelected())
            error1 = true;
        if (!this.compWizard.isSelected() && !this.arcaneFocusWizard.isSelected())
            error2 = true;
        if (!this.scholarPackWizard.isSelected() && !this.explorerPackWizard.isSelected())
            error3 = true;

        if (error1 || error2 || error3)
            JOptionPane.showMessageDialog(null, "Must make selections before continuing");
        else {
            //save selections and move on
            if (this.quarterstaffWizard.isSelected()) {
                this.newCharacter.addThisWeapon("Quarterstaff");
                this.newCharacter.addThisToInventory("Quarterstaff");
            } else {
                this.newCharacter.addThisWeapon("Dagger");
                this.newCharacter.addThisToInventory("Dagger");
            }

            if (this.compWizard.isSelected())
                this.newCharacter.addThisToInventory("Component Pouch");
            else
                this.newCharacter.addThisToInventory("Arcane Focus");

            if (this.scholarPackWizard.isSelected()) {
                String[] items = Equipment.getScholarsPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else {
                String[] items = Equipment.getExplorersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            }
            this.newCharacter.addThisToInventory("Spellbook");

            //add gear from background
            String[] items = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }
    }//GEN-LAST:event_toMiscFromWizardActionPerformed

    private void toMiscFromRogueActionPerformed() {//GEN-FIRST:event_toMiscFromRogueActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;

        if (!this.rapierRogue.isSelected() && !this.shortswordRogue.isSelected())
            error1 = true;
        if (!this.shortbowRogue.isSelected() && !this.shortswordRogue2.isSelected())
            error2 = true;
        if (!this.burglerPackRogue.isSelected() && !this.explorerPackRogue.isSelected() && !this.dungeoneerPackRogue.isSelected())
            error3 = true;

        if (error1 || error2 || error3)
            JOptionPane.showMessageDialog(null, "Must make equipment selections before continuing.");
        else {
            if (this.rapierRogue.isSelected()) {
                this.newCharacter.addThisWeapon("Rapier");
                this.newCharacter.addThisToInventory("Rapier");
            } else {
                this.newCharacter.addThisWeapon("Shortsword");
                this.newCharacter.addThisToInventory("Shortsword");
            }
            if (this.shortbowRogue.isSelected()) {
                this.newCharacter.addThisWeapon("Shortbow");
                this.newCharacter.addThisToInventory("Shortbow");
                this.newCharacter.addThisToInventory("20 arrows");
            } else {
                this.newCharacter.addThisWeapon("Shortsword");
                this.newCharacter.addThisToInventory("Shortsword");
            }

            if (this.explorerPackRogue.isSelected()) {
                String[] items = Equipment.getExplorersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else if (this.dungeoneerPackRogue.isSelected()) {
                String[] items = Equipment.getDungeoneersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else {
                String[] items = Equipment.getBurglarsPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            }
            this.newCharacter.setArmor("Leather Armor");
            this.newCharacter.addThisToInventory("Thieves' Tools");
            this.newCharacter.addThisToInventory("Dagger x2");
            this.newCharacter.addThisWeapon("Dagger");

            //add gear from background
            String[] items = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }
    }//GEN-LAST:event_toMiscFromRogueActionPerformed

    private void simpleWeaponBardActionPerformed() {//GEN-FIRST:event_simpleWeaponBardActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponBardList.setModel(new DefaultListModel());
        DefaultListModel listModel1 = (DefaultListModel) this.simpleWeaponBardList.getModel();
        listModel1.addElement("Club");
        listModel1.addElement("Dagger");
        listModel1.addElement("Greatclub");
        listModel1.addElement("Handaxe");
        listModel1.addElement("Javelin");
        listModel1.addElement("Light Hammer");
        listModel1.addElement("Mace");
        listModel1.addElement("Quarterstaff");
        listModel1.addElement("Sickle");
        listModel1.addElement("Spear");
        listModel1.addElement("Light Crossbow");
        listModel1.addElement("Dart");
        listModel1.addElement("Shortbow");
        listModel1.addElement("Sling");
    }//GEN-LAST:event_simpleWeaponBardActionPerformed

    private void longswordBardActionPerformed() {//GEN-FIRST:event_longswordBardActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponBardList.setModel(new DefaultListModel());
    }//GEN-LAST:event_longswordBardActionPerformed

    private void rapierBardActionPerformed() {//GEN-FIRST:event_rapierBardActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponBardList.setModel(new DefaultListModel());
    }//GEN-LAST:event_rapierBardActionPerformed

    private void instrumentBardActionPerformed() {//GEN-FIRST:event_instrumentBardActionPerformed
        // TODO add your handling code here:
        //STOPPED HERE - ADD INSTRUMENTS TO LIST WHEN THIS RADIOBUTTON SELECTED
        this.instrumentBardList.setModel(new DefaultListModel());
        DefaultListModel listModel = (DefaultListModel) this.instrumentBardList.getModel();
        listModel.addElement("Bagpipes");
        listModel.addElement("Drum");
        listModel.addElement("Dulcimer");
        listModel.addElement("Flute");
        listModel.addElement("Lyre");
        listModel.addElement("Horn");
        listModel.addElement("Pan Flute");
        listModel.addElement("Shawm");
        listModel.addElement("Viol");
    }//GEN-LAST:event_instrumentBardActionPerformed

    private void luteBardActionPerformed() {//GEN-FIRST:event_luteBardActionPerformed
        // TODO add your handling code here:
        this.instrumentBardList.setModel(new DefaultListModel());
    }//GEN-LAST:event_luteBardActionPerformed

    private void toMiscFromBardActionPerformed() {//GEN-FIRST:event_toMiscFromBardActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;
        boolean error4 = false;
        boolean error5 = false;

        if (!this.diplomatPackBard.isSelected() && !this.entertainerPackBard.isSelected())
            error1 = true;
        if (!this.rapierBard.isSelected() && !this.longswordBard.isSelected() && !this.simpleWeaponBard.isSelected())
            error2 = true;
        if (!this.luteBard.isSelected() && !this.instrumentBard.isSelected())
            error3 = true;
        if (this.simpleWeaponBard.isSelected() && this.simpleWeaponBardList.isSelectionEmpty())
            error4 = true;
        if (this.instrumentBard.isSelected() && this.instrumentBardList.isSelectionEmpty())
            error5 = true;

        if (error1 || error2 || error3 || error4 || error5)
            JOptionPane.showMessageDialog(null, "Must make equipment selections before continuing.");
        else {
            //save selections and move on
            if (this.diplomatPackBard.isSelected()) {
                String[] items = Equipment.getDiplomatsPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else {
                String[] items = Equipment.getEntertainersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            }

            if (this.rapierBard.isSelected()) {
                this.newCharacter.addThisWeapon("Rapier");
                this.newCharacter.addThisToInventory("Rapier");
            } else if (this.longswordBard.isSelected()) {
                this.newCharacter.addThisWeapon("Longsword");
                this.newCharacter.addThisToInventory("Rapier");
            } else {
                this.newCharacter.addThisWeapon(this.simpleWeaponBardList.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponBardList.getSelectedValue().toString());
            }
            if (this.luteBard.isSelected())
                this.newCharacter.addThisToInventory("Lute");
            else
                this.newCharacter.addThisToInventory(this.instrumentBardList.getSelectedValue().toString());

            this.newCharacter.setArmor("Leather Armor");
            this.newCharacter.addThisToInventory("Leather Armor");
            this.newCharacter.addThisWeapon("Dagger");
            this.newCharacter.addThisToInventory("Dagger");

            //add gear from background
            String[] items = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }
    }//GEN-LAST:event_toMiscFromBardActionPerformed

    private void shieldFighterActionPerformed() {//GEN-FIRST:event_shieldFighterActionPerformed
        // TODO add your handling code here:
        this.martialWeaponFighterList1.setModel(new DefaultListModel());
        DefaultListModel listModel1 = (DefaultListModel) this.martialWeaponFighterList1.getModel();
        listModel1.addElement("Battleaxe");
        listModel1.addElement("Flail");
        listModel1.addElement("Glaive");
        listModel1.addElement("Greatsword");
        listModel1.addElement("Halberd");
        listModel1.addElement("Lance");
        listModel1.addElement("Longsword");
        listModel1.addElement("Maul");
        listModel1.addElement("Morningstar");
        listModel1.addElement("Pike");
        listModel1.addElement("Rapier");
        listModel1.addElement("Scimitar");
        listModel1.addElement("Shortsword");
        listModel1.addElement("Trident");
        listModel1.addElement("War Pick");
        listModel1.addElement("Warhammer");
        listModel1.addElement("Whip");
        listModel1.addElement("Blowgun");
        listModel1.addElement("Hand Crossbow");
        listModel1.addElement("Heavy Crossbow");
        listModel1.addElement("Longbow");
        listModel1.addElement("Net");

        this.martialWeaponFighterList2.setModel(new DefaultListModel());
        this.martialWeaponFighterList3.setModel(new DefaultListModel());
    }//GEN-LAST:event_shieldFighterActionPerformed

    private void martialWeaponsFighterActionPerformed() {//GEN-FIRST:event_martialWeaponsFighterActionPerformed
        // TODO add your handling code here:
        this.martialWeaponFighterList2.setModel(new DefaultListModel());
        DefaultListModel listModel1 = (DefaultListModel) this.martialWeaponFighterList2.getModel();
        listModel1.addElement("Battleaxe");
        listModel1.addElement("Flail");
        listModel1.addElement("Glaive");
        listModel1.addElement("Greatsword");
        listModel1.addElement("Halberd");
        listModel1.addElement("Lance");
        listModel1.addElement("Longsword");
        listModel1.addElement("Maul");
        listModel1.addElement("Morningstar");
        listModel1.addElement("Pike");
        listModel1.addElement("Rapier");
        listModel1.addElement("Scimitar");
        listModel1.addElement("Shortsword");
        listModel1.addElement("Trident");
        listModel1.addElement("War Pick");
        listModel1.addElement("Warhammer");
        listModel1.addElement("Whip");
        listModel1.addElement("Blowgun");
        listModel1.addElement("Hand Crossbow");
        listModel1.addElement("Heavy Crossbow");
        listModel1.addElement("Longbow");
        listModel1.addElement("Net");

        this.martialWeaponFighterList3.setModel(new DefaultListModel());
        DefaultListModel listModel2 = (DefaultListModel) this.martialWeaponFighterList3.getModel();
        listModel2.addElement("Battleaxe");
        listModel2.addElement("Flail");
        listModel2.addElement("Glaive");
        listModel2.addElement("Greatsword");
        listModel2.addElement("Halberd");
        listModel2.addElement("Lance");
        listModel2.addElement("Longsword");
        listModel2.addElement("Maul");
        listModel2.addElement("Morningstar");
        listModel2.addElement("Pike");
        listModel2.addElement("Rapier");
        listModel2.addElement("Scimitar");
        listModel2.addElement("Shortsword");
        listModel2.addElement("Trident");
        listModel2.addElement("War Pick");
        listModel2.addElement("Warhammer");
        listModel2.addElement("Whip");
        listModel2.addElement("Blowgun");
        listModel2.addElement("Hand Crossbow");
        listModel2.addElement("Heavy Crossbow");
        listModel2.addElement("Longbow");
        listModel2.addElement("Net");

        this.martialWeaponFighterList1.setModel(new DefaultListModel());
    }//GEN-LAST:event_martialWeaponsFighterActionPerformed

    private void toMiscFromFighterActionPerformed() {//GEN-FIRST:event_toMiscFromFighterActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;
        boolean error4 = false;
        boolean error5 = false;
        boolean error6 = false;
        boolean error7 = false;

        if (!this.chainMailFighter.isSelected() && !this.leatherArmorFighter.isSelected())
            error1 = true;
        if (!this.shieldFighter.isSelected() && !this.martialWeaponsFighter.isSelected())
            error2 = true;
        if (!this.lightCrossbowFighter.isSelected() && !this.handaxeFighter.isSelected())
            error3 = true;
        if (!this.dungeoneerPackFighter.isSelected() && !this.explorerPackFighter.isSelected())
            error4 = true;
        if (this.shieldFighter.isSelected() && this.martialWeaponFighterList1.isSelectionEmpty())
            error5 = true;
        if (this.martialWeaponsFighter.isSelected() && this.martialWeaponFighterList2.isSelectionEmpty())
            error6 = true;
        if (this.martialWeaponsFighter.isSelected() && this.martialWeaponFighterList3.isSelectionEmpty())
            error7 = true;

        if (error1 || error2 || error3 || error4 || error5 || error6 || error7)
            JOptionPane.showMessageDialog(null, "Must make equipment selections before continuing.");
        else {
            //save selections and move on
            if (this.chainMailFighter.isSelected()) {
                this.newCharacter.setArmor("Chain Mail");
                this.newCharacter.addThisToInventory("Chain Mail");
            } else {
                this.newCharacter.setArmor("Leather Armor");
                this.newCharacter.addThisToInventory("Leather Armor");
                this.newCharacter.addThisWeapon("Longbow");
                this.newCharacter.addThisToInventory("Longbow");
                this.newCharacter.addThisToInventory("arrows x20");
            }

            if (this.lightCrossbowFighter.isSelected()) {
                this.newCharacter.addThisWeapon("Light Crossbow");
                this.newCharacter.addThisToInventory("bolts x20");
            } else {
                this.newCharacter.addThisWeapon("Handaxe");
                this.newCharacter.addThisToInventory("Handaxe x2");
            }

            if (this.shieldFighter.isSelected()) {
                this.newCharacter.setShield("Shield");
                this.newCharacter.addThisToInventory("Shield");
                this.newCharacter.addThisWeapon(this.martialWeaponFighterList1.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.martialWeaponFighterList1.getSelectedValue().toString());
            } else {
                this.newCharacter.addThisWeapon(this.martialWeaponFighterList2.getSelectedValue().toString());
                this.newCharacter.addThisWeapon(this.martialWeaponFighterList3.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.martialWeaponFighterList2.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.martialWeaponFighterList3.getSelectedValue().toString());
            }

            if (this.dungeoneerPackFighter.isSelected()) {
                String[] items = Equipment.getDungeoneersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else {
                String[] items = Equipment.getExplorersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            }

            //add gear from background
            String[] items = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }
    }//GEN-LAST:event_toMiscFromFighterActionPerformed

    private void simpleWeaponSorcererActionPerformed() {//GEN-FIRST:event_simpleWeaponSorcererActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponSorcererList.setModel(new DefaultListModel());
        DefaultListModel listModel = (DefaultListModel) this.simpleWeaponSorcererList.getModel();
        listModel.addElement("Club");
        listModel.addElement("Dagger");
        listModel.addElement("Greatclub");
        listModel.addElement("Handaxe");
        listModel.addElement("Javelin");
        listModel.addElement("Light Hammer");
        listModel.addElement("Mace");
        listModel.addElement("Quarterstaff");
        listModel.addElement("Sickle");
        listModel.addElement("Spear");
        listModel.addElement("Light Crossbow");
        listModel.addElement("Dart");
        listModel.addElement("Shortbow");
        listModel.addElement("Sling");
    }//GEN-LAST:event_simpleWeaponSorcererActionPerformed

    private void lightCrossbowSorcererActionPerformed() {//GEN-FIRST:event_lightCrossbowSorcererActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponSorcererList.setModel(new DefaultListModel());
    }//GEN-LAST:event_lightCrossbowSorcererActionPerformed

    private void toMiscFromSorcererActionPerformed() {//GEN-FIRST:event_toMiscFromSorcererActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;
        boolean error4 = false;

        if (!this.lightCrossbowSorcerer.isSelected() && !this.simpleWeaponSorcerer.isSelected())
            error1 = true;
        if (!this.componentPouchSorcerer.isSelected() && !this.arcaneFocusSorcerer.isSelected())
            error2 = true;
        if (!this.dungeoneerPackSorcerer.isSelected() && !this.explorerPackSorcerer.isSelected())
            error3 = true;
        if (this.simpleWeaponSorcerer.isSelected() && this.simpleWeaponSorcererList.isSelectionEmpty())
            error4 = true;

        if (error1 || error2 || error3 || error4)
            JOptionPane.showMessageDialog(null, "Must make equipment selections before continuing.");
        else {
            //save selections and move on
            if (this.lightCrossbowSorcerer.isSelected()) {
                this.newCharacter.addThisWeapon("Light Crossbow");
                this.newCharacter.addThisToInventory("Light Crossbow");
                this.newCharacter.addThisToInventory("20 bolts");
            } else {
                this.newCharacter.addThisWeapon(this.simpleWeaponSorcererList.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponSorcererList.getSelectedValue().toString());
            }
            if (this.componentPouchSorcerer.isSelected())
                this.newCharacter.addThisToInventory("Component Pouch");
            else
                this.newCharacter.addThisToInventory("Arcane Focus");

            if (this.dungeoneerPackSorcerer.isSelected()) {
                String[] items = Equipment.getDungeoneersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else {
                String[] items = Equipment.getExplorersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            }
            this.newCharacter.addThisToInventory("Dagger x2");
            this.newCharacter.addThisWeapon("Dagger");

            //add gear from background
            String[] items = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }
    }//GEN-LAST:event_toMiscFromSorcererActionPerformed

    private void lightCrossbowWarlockActionPerformed() {//GEN-FIRST:event_lightCrossbowWarlockActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponWarlockList.setModel(new DefaultListModel());
    }//GEN-LAST:event_lightCrossbowWarlockActionPerformed

    private void simpleWeaponWarlockActionPerformed() {//GEN-FIRST:event_simpleWeaponWarlockActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponWarlockList.setModel(new DefaultListModel());
        DefaultListModel listModel = (DefaultListModel) this.simpleWeaponWarlockList.getModel();
        listModel.addElement("Club");
        listModel.addElement("Dagger");
        listModel.addElement("Greatclub");
        listModel.addElement("Handaxe");
        listModel.addElement("Javelin");
        listModel.addElement("Light Hammer");
        listModel.addElement("Mace");
        listModel.addElement("Quarterstaff");
        listModel.addElement("Sickle");
        listModel.addElement("Spear");
        listModel.addElement("Light Crossbow");
        listModel.addElement("Dart");
        listModel.addElement("Shortbow");
        listModel.addElement("Sling");
    }//GEN-LAST:event_simpleWeaponWarlockActionPerformed

    private void toMiscFromWarlockActionPerformed() {//GEN-FIRST:event_toMiscFromWarlockActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;
        boolean error4 = false;

        if (!this.lightCrossbowWarlock.isSelected() && !this.simpleWeaponWarlock.isSelected())
            error1 = true;
        if (this.simpleWeaponWarlock.isSelected() && this.simpleWeaponWarlockList.isSelectionEmpty())
            error2 = true;
        if (!this.componentPouchWarlock.isSelected() && !this.arcaneFocusWarlock.isSelected())
            error3 = true;
        if (!this.scholarPackWarlock.isSelected() && !this.dungeoneerPackWarlock.isSelected())
            error4 = true;

        if (error1 || error2 || error3 || error4)
            JOptionPane.showMessageDialog(null, "Must make equipment selections before continuing.");
        else {
            //save selections and move on
            if (this.lightCrossbowWarlock.isSelected()) {
                this.newCharacter.addThisWeapon("Light Crossbow");
                this.newCharacter.addThisToInventory("Light Crossbow");
                this.newCharacter.addThisToInventory("20 bolts");
            } else {
                this.newCharacter.addThisWeapon(this.simpleWeaponWarlockList.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponWarlockList.getSelectedValue().toString());
            }
            if (this.componentPouchWarlock.isSelected())
                this.newCharacter.addThisToInventory("Component Pouch");
            else
                this.newCharacter.addThisToInventory("Arcane Focus");

            if (this.scholarPackWarlock.isSelected()) {
                String[] items = Equipment.getScholarsPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else {
                String[] items = Equipment.getDungeoneersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            }
            this.newCharacter.setArmor("Leather Armor");
            this.newCharacter.addThisToInventory("Leather Armor");
            this.newCharacter.addThisToInventory("Dagger x2");
            this.newCharacter.addThisWeapon("Dagger");

            //add gear from background
            String[] items = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }
    }//GEN-LAST:event_toMiscFromWarlockActionPerformed

    private void simpleWeaponsRangerActionPerformed() {//GEN-FIRST:event_simpleWeaponsRangerActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponRangerList1.setModel(new DefaultListModel());
        this.simpleWeaponRangerList2.setModel(new DefaultListModel());
        DefaultListModel listModel1 = (DefaultListModel) this.simpleWeaponRangerList1.getModel();
        DefaultListModel listModel2 = (DefaultListModel) this.simpleWeaponRangerList2.getModel();
        listModel1.addElement("Club");
        listModel1.addElement("Dagger");
        listModel1.addElement("Greatclub");
        listModel1.addElement("Handaxe");
        listModel1.addElement("Javelin");
        listModel1.addElement("Light Hammer");
        listModel1.addElement("Mace");
        listModel1.addElement("Quarterstaff");
        listModel1.addElement("Sickle");
        listModel1.addElement("Spear");
        listModel2.addElement("Club");
        listModel2.addElement("Dagger");
        listModel2.addElement("Greatclub");
        listModel2.addElement("Handaxe");
        listModel2.addElement("Javelin");
        listModel2.addElement("Light Hammer");
        listModel2.addElement("Mace");
        listModel2.addElement("Quarterstaff");
        listModel2.addElement("Sickle");
        listModel2.addElement("Spear");
    }//GEN-LAST:event_simpleWeaponsRangerActionPerformed

    private void shortswordsRangerActionPerformed() {//GEN-FIRST:event_shortswordsRangerActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponRangerList1.setModel(new DefaultListModel());
        this.simpleWeaponRangerList2.setModel(new DefaultListModel());
    }//GEN-LAST:event_shortswordsRangerActionPerformed

    private void toMiscFromRangerActionPerformed() {//GEN-FIRST:event_toMiscFromRangerActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;
        boolean error4 = false;
        boolean error5 = false;

        if (!this.scaleMailRanger.isSelected() && !this.leatherArmorRanger.isSelected())
            error1 = true;
        if (!this.shortswordsRanger.isSelected() && !this.simpleWeaponsRanger.isSelected())
            error2 = true;
        if (!this.dungeoneerPackRanger.isSelected() && !this.explorerPackRanger.isSelected())
            error3 = true;
        if (this.simpleWeaponsRanger.isSelected() && this.simpleWeaponRangerList1.isSelectionEmpty())
            error4 = true;
        if (this.simpleWeaponsRanger.isSelected() && this.simpleWeaponRangerList2.isSelectionEmpty())
            error5 = true;

        if (error1 || error2 || error3 || error4 || error5)
            JOptionPane.showMessageDialog(null, "Must make equipment selections before continuing.");
        else {
            //save selections and move on
            if (this.scaleMailRanger.isSelected()) {
                this.newCharacter.setArmor("Scale Mail");
                this.newCharacter.addThisToInventory("Scale Mail");
            } else {
                this.newCharacter.setArmor("Leather Armor");
                this.newCharacter.addThisToInventory("Leather Armor");
            }

            if (this.shortswordsRanger.isSelected()) {
                this.newCharacter.addThisWeapon("Shortsword");
                this.newCharacter.addThisToInventory("Shortsword x2");
            } else {
                this.newCharacter.addThisWeapon(this.simpleWeaponRangerList1.getSelectedValue().toString());
                this.newCharacter.addThisWeapon(this.simpleWeaponRangerList2.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponRangerList1.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponRangerList2.getSelectedValue().toString());
            }

            if (this.explorerPackRanger.isSelected()) {
                String[] items = Equipment.getExplorersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else {
                String[] items = Equipment.getDungeoneersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            }
            this.newCharacter.addThisWeapon("Longbow");
            this.newCharacter.addThisToInventory("Longbow");
            this.newCharacter.addThisToInventory("arrows x20");

            //add gear from background
            String[] items = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }
    }//GEN-LAST:event_toMiscFromRangerActionPerformed

    private void simpleWeaponPaladinActionPerformed() {//GEN-FIRST:event_simpleWeaponPaladinActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponPaladinList.setModel(new DefaultListModel());
        DefaultListModel listModel = (DefaultListModel) this.simpleWeaponPaladinList.getModel();
        listModel.addElement("Club");
        listModel.addElement("Dagger");
        listModel.addElement("Greatclub");
        listModel.addElement("Handaxe");
        listModel.addElement("Javelin");
        listModel.addElement("Light Hammer");
        listModel.addElement("Mace");
        listModel.addElement("Quarterstaff");
        listModel.addElement("Sickle");
        listModel.addElement("Spear");
    }//GEN-LAST:event_simpleWeaponPaladinActionPerformed

    private void javelinPaladinActionPerformed() {//GEN-FIRST:event_javelinPaladinActionPerformed
        // TODO add your handling code here:
        this.simpleWeaponPaladinList.setModel(new DefaultListModel());
    }//GEN-LAST:event_javelinPaladinActionPerformed

    private void martialWeaponPaladin1ActionPerformed() {//GEN-FIRST:event_martialWeaponPaladin1ActionPerformed
        // TODO add your handling code here:
        this.martialWeaponPaladinList1.setModel(new DefaultListModel());
        DefaultListModel listModel = (DefaultListModel) this.martialWeaponPaladinList1.getModel();
        listModel.addElement("Battleaxe");
        listModel.addElement("Flail");
        listModel.addElement("Glaive");
        listModel.addElement("Greatsword");
        listModel.addElement("Halberd");
        listModel.addElement("Lance");
        listModel.addElement("Longsword");
        listModel.addElement("Maul");
        listModel.addElement("Morningstar");
        listModel.addElement("Pike");
        listModel.addElement("Rapier");
        listModel.addElement("Scimitar");
        listModel.addElement("Shortsword");
        listModel.addElement("Trident");
        listModel.addElement("War Pick");
        listModel.addElement("Warhammer");
        listModel.addElement("Whip");
        listModel.addElement("Blowgun");
        listModel.addElement("Hand Crossbow");
        listModel.addElement("Heavy Crossbow");
        listModel.addElement("Longbow");
        listModel.addElement("Net");
        this.martialWeaponPaladinList2.setModel(new DefaultListModel());
        this.martialWeaponPaladinList3.setModel(new DefaultListModel());
    }//GEN-LAST:event_martialWeaponPaladin1ActionPerformed

    private void martialWeaponPaladin2ActionPerformed() {//GEN-FIRST:event_martialWeaponPaladin2ActionPerformed
        // TODO add your handling code here:
        this.martialWeaponPaladinList2.setModel(new DefaultListModel());
        this.martialWeaponPaladinList3.setModel(new DefaultListModel());
        DefaultListModel listModel1 = (DefaultListModel) this.martialWeaponPaladinList2.getModel();
        DefaultListModel listModel2 = (DefaultListModel) this.martialWeaponPaladinList3.getModel();

        listModel1.addElement("Battleaxe");
        listModel1.addElement("Flail");
        listModel1.addElement("Glaive");
        listModel1.addElement("Greatsword");
        listModel1.addElement("Halberd");
        listModel1.addElement("Lance");
        listModel1.addElement("Longsword");
        listModel1.addElement("Maul");
        listModel1.addElement("Morningstar");
        listModel1.addElement("Pike");
        listModel1.addElement("Rapier");
        listModel1.addElement("Scimitar");
        listModel1.addElement("Shortsword");
        listModel1.addElement("Trident");
        listModel1.addElement("War Pick");
        listModel1.addElement("Warhammer");
        listModel1.addElement("Whip");
        listModel1.addElement("Blowgun");
        listModel1.addElement("Hand Crossbow");
        listModel1.addElement("Heavy Crossbow");
        listModel1.addElement("Longbow");
        listModel1.addElement("Net");

        listModel2.addElement("Battleaxe");
        listModel2.addElement("Flail");
        listModel2.addElement("Glaive");
        listModel2.addElement("Greatsword");
        listModel2.addElement("Halberd");
        listModel2.addElement("Lance");
        listModel2.addElement("Longsword");
        listModel2.addElement("Maul");
        listModel2.addElement("Morningstar");
        listModel2.addElement("Pike");
        listModel2.addElement("Rapier");
        listModel2.addElement("Scimitar");
        listModel2.addElement("Shortsword");
        listModel2.addElement("Trident");
        listModel2.addElement("War Pick");
        listModel2.addElement("Warhammer");
        listModel2.addElement("Whip");
        listModel2.addElement("Blowgun");
        listModel2.addElement("Hand Crossbow");
        listModel2.addElement("Heavy Crossbow");
        listModel2.addElement("Longbow");
        listModel2.addElement("Net");

        this.martialWeaponPaladinList1.setModel(new DefaultListModel());
    }//GEN-LAST:event_martialWeaponPaladin2ActionPerformed

    private void toMiscFromPaladinActionPerformed() {//GEN-FIRST:event_toMiscFromPaladinActionPerformed
        // TODO add your handling code here:
        boolean error1 = false;
        boolean error2 = false;
        boolean error3 = false;
        boolean error4 = false;
        boolean error5 = false;
        boolean error6 = false;
        boolean error7 = false;

        if (!this.priestPackPaladin.isSelected() && !this.explorerPackPaladin.isSelected())
            error1 = true;
        if (!this.martialWeaponPaladin1.isSelected() && !this.martialWeaponPaladin2.isSelected())
            error2 = true;
        if (!this.javelinPaladin.isSelected() && !this.simpleWeaponPaladin.isSelected())
            error3 = true;
        if (this.simpleWeaponPaladin.isSelected() && this.simpleWeaponPaladinList.isSelectionEmpty())
            error4 = true;
        if (this.martialWeaponPaladin1.isSelected() && this.martialWeaponPaladinList1.isSelectionEmpty())
            error5 = true;
        if (this.martialWeaponPaladin2.isSelected() && this.martialWeaponPaladinList2.isSelectionEmpty())
            error6 = true;
        if (this.martialWeaponPaladin2.isSelected() && this.martialWeaponPaladinList3.isSelectionEmpty())
            error7 = true;

        if (error1 || error2 || error3 || error4 || error5 || error6 || error7)
            JOptionPane.showMessageDialog(null, "Must make equipment selections before continuing.");
        else {
            //save selections and move on
            if (this.explorerPackPaladin.isSelected()) {
                String[] items = Equipment.getExplorersPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            } else {
                String[] items = Equipment.getPriestsPack();
                for (String item : items)
                    this.newCharacter.addThisToInventory(item);
            }

            if (this.javelinPaladin.isSelected()) {
                this.newCharacter.addThisToInventory("Javelin x5");
                this.newCharacter.addThisWeapon("Javelin");
            } else {
                this.newCharacter.addThisWeapon(this.simpleWeaponPaladinList.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.simpleWeaponPaladinList.getSelectedValue().toString());
            }
            if (this.martialWeaponPaladin1.isSelected()) {
                this.newCharacter.addThisWeapon(this.martialWeaponPaladinList1.getSelectedValue().toString());
                this.newCharacter.setShield("Shield");
                this.newCharacter.addThisToInventory(this.martialWeaponPaladinList1.getSelectedValue().toString());
                this.newCharacter.addThisToInventory("Shield");
            } else {
                this.newCharacter.addThisWeapon(this.martialWeaponPaladinList2.getSelectedValue().toString());
                this.newCharacter.addThisWeapon(this.martialWeaponPaladinList3.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.martialWeaponPaladinList2.getSelectedValue().toString());
                this.newCharacter.addThisToInventory(this.martialWeaponPaladinList3.getSelectedValue().toString());
            }
            this.newCharacter.setArmor("Chain Mail");
            this.newCharacter.addThisToInventory("Chain Mail");
            this.newCharacter.addThisToInventory("Holy Symbol");

            //add gear from background
            String[] items = Equipment.getBackgroundGear(this.newCharacter.getBackground());
            for (String item : items)
                this.newCharacter.addThisToInventory(item);

            CardLayout card = (CardLayout) mainPanel.getLayout();
            card.show(mainPanel, "miscellaneousPanel");
        }

    }//GEN-LAST:event_toMiscFromPaladinActionPerformed

    private void finalizeButtonActionPerformed() {//GEN-FIRST:event_finalizeButtonActionPerformed

        //add cantrips given by racial choice
        if (this.newCharacter.getRace().equals("Dark Elf (Drow)")) {
            boolean hasCantrip = false;
            ArrayList<String> cantrips = this.newCharacter.getCantrips();
            for (String cantrip : cantrips) {
                if (cantrip.equals("Dancing Lights"))
                    hasCantrip = true;
            }
            if (!hasCantrip)
                this.newCharacter.addThisCantrip("Dancing Lights");
        }
        if (this.newCharacter.getRace().equals("Tiefling")) {
            boolean hasCantrip = false;
            ArrayList<String> cantrips = this.newCharacter.getCantrips();
            for (String cantrip : cantrips) {
                if (cantrip.equals("Thaumaturgy"))
                    hasCantrip = true;
            }
            if (!hasCantrip)
                this.newCharacter.addThisCantrip("Thaumaturgy");
        }
        if (this.newCharacter.getRace().equals("Forest Gnome")) {
            boolean hasCantrip = false;
            ArrayList<String> cantrips = this.newCharacter.getCantrips();
            for (String cantrip : cantrips) {
                if (cantrip.equals("Minor Illusion"))
                    hasCantrip = true;
            }
            if (!hasCantrip)
                this.newCharacter.addThisCantrip("Minor Illusion");
        }

        //compute the rest of the stats
        this.newCharacter.computeRest();
        this.saveCharacterFile.setEnabled(true);
        this.finalizeButton.setEnabled(false);
    }//GEN-LAST:event_finalizeButtonActionPerformed

    private void fromHighElfPanelActionPerformed() {//GEN-FIRST:event_fromHighElfPanelActionPerformed
        // TODO add your handling code here:
        int cantripsChosen = 0;

        if (this.acidSplashWizard1.isSelected())
            cantripsChosen++;
        if (this.bladeWardWizard1.isSelected())
            cantripsChosen++;
        if (this.chillTouchWizard1.isSelected())
            cantripsChosen++;
        if (this.dancingLightsWizard1.isSelected())
            cantripsChosen++;
        if (this.fireBoltWizard1.isSelected())
            cantripsChosen++;
        if (this.friendsWizard1.isSelected())
            cantripsChosen++;
        if (this.lightWizard1.isSelected())
            cantripsChosen++;
        if (this.mageHandWizard1.isSelected())
            cantripsChosen++;
        if (this.mendingWizard1.isSelected())
            cantripsChosen++;
        if (this.messageWizard1.isSelected())
            cantripsChosen++;
        if (this.minorIllusionWizard1.isSelected())
            cantripsChosen++;
        if (this.poisonSprayWizard1.isSelected())
            cantripsChosen++;
        if (this.prestidigitationWizard1.isSelected())
            cantripsChosen++;
        if (this.rayOfFrostWizard1.isSelected())
            cantripsChosen++;
        if (this.shockingGraspWizard1.isSelected())
            cantripsChosen++;
        if (this.trueStrikeWizard1.isSelected())
            cantripsChosen++;

        if (cantripsChosen != 1)
            JOptionPane.showMessageDialog(null, "Must select 1 Wizard Cantrip");
        else {
            if (this.acidSplashWizard1.isSelected())
                this.newCharacter.addThisCantrip("Acid Splash");
            if (this.bladeWardWizard1.isSelected())
                this.newCharacter.addThisCantrip("Blade Ward");
            if (this.chillTouchWizard1.isSelected())
                this.newCharacter.addThisCantrip("Chill Touch");
            if (this.dancingLightsWizard1.isSelected())
                this.newCharacter.addThisCantrip("Dancing Lights");
            if (this.fireBoltWizard1.isSelected())
                this.newCharacter.addThisCantrip("Fire Bolt");
            if (this.friendsWizard1.isSelected())
                this.newCharacter.addThisCantrip("Friends");
            if (this.lightWizard1.isSelected())
                this.newCharacter.addThisCantrip("Light");
            if (this.mageHandWizard1.isSelected())
                this.newCharacter.addThisCantrip("Mage Hand");
            if (this.mendingWizard1.isSelected())
                this.newCharacter.addThisCantrip("Mending");
            if (this.messageWizard1.isSelected())
                this.newCharacter.addThisCantrip("Message");
            if (this.minorIllusionWizard1.isSelected())
                this.newCharacter.addThisCantrip("Minor Illusion");
            if (this.poisonSprayWizard1.isSelected())
                this.newCharacter.addThisCantrip("Poison Spray");
            if (this.prestidigitationWizard1.isSelected())
                this.newCharacter.addThisCantrip("Prestidigitation");
            if (this.rayOfFrostWizard1.isSelected())
                this.newCharacter.addThisCantrip("Ray of Frost");
            if (this.shockingGraspWizard1.isSelected())
                this.newCharacter.addThisCantrip("Shocking Grasp");
            if (this.trueStrikeWizard1.isSelected())
                this.newCharacter.addThisCantrip("True Strike");

            switch (this.newCharacter.getPlayerClass()) {
                case "Cleric": {
                    this.clericArcanaCheck.setEnabled(false);
                    this.clericHistoryCheck.setEnabled(false);
                    this.clericNatureCheck.setEnabled(false);
                    this.clericReligionCheck.setEnabled(false);
                    this.clericAnimalHandlingRadio.setEnabled(false);
                    this.clericSurvivalRadio.setEnabled(false);
                    this.clericNatureRadio.setEnabled(false);
                    CardLayout card = (CardLayout) mainPanel.getLayout();
                    card.show(mainPanel, "clericDomainPanel");
                    break;
                }
                case "Fighter": {
                    CardLayout card = (CardLayout) mainPanel.getLayout();
                    card.show(mainPanel, "fightingStylePanel");
                    break;
                }
                case "Sorcerer": {
                    CardLayout card = (CardLayout) mainPanel.getLayout();
                    card.show(mainPanel, "sorcerousOriginPanel");
                    this.blueRadio.setEnabled(false);
                    this.blackRadio.setEnabled(false);
                    this.redRadio.setEnabled(false);
                    this.whiteRadio.setEnabled(false);
                    this.brassRadio.setEnabled(false);
                    this.bronzeRadio.setEnabled(false);
                    this.copperRadio.setEnabled(false);
                    this.goldRadio.setEnabled(false);
                    this.silverRadio.setEnabled(false);
                    this.greenRadio.setEnabled(false);
                    break;
                }
                case "Ranger": {
                    CardLayout card = (CardLayout) mainPanel.getLayout();
                    card.show(mainPanel, "favoredEnemyPanel");
                    break;
                }
                case "Warlock": {
                    CardLayout card = (CardLayout) mainPanel.getLayout();
                    card.show(mainPanel, "otherworldlyPatronPanel");
                    break;
                }
                default: {
                    CardLayout card = (CardLayout) mainPanel.getLayout();
                    card.show(mainPanel, "statPanel");
                    break;
                }
            }
        }
    }//GEN-LAST:event_fromHighElfPanelActionPerformed

    private void saveCharacterFileActionPerformed() {//GEN-FIRST:event_saveCharacterFileActionPerformed
        // TODO add your handling code here:
        CharacterWriter cw = new CharacterWriter(this.newCharacter);
        cw.createCharacterFile();

    }//GEN-LAST:event_saveCharacterFileActionPerformed

    private void rollForScoresActionPerformed() {//GEN-FIRST:event_rollForScoresActionPerformed
        // TODO add your handling code here:
        this.rollStatsButton.setEnabled(true);
        this.firstStatLabel.setText("0");
        this.secondStatLabel.setText("0");
        this.thirdStatLabel.setText("0");
        this.fourthStatLabel.setText("0");
        this.fifthStatLabel.setText("0");
        this.sixthStatLabel.setText("0");
        this.firstStatField.setText("");
        this.secondStatField.setText("");
        this.thirdStatField.setText("");
        this.fourthStatField.setText("");
        this.fifthStatField.setText("");
        this.sixthStatField.setText("");
        this.firstStatField.setEditable(false);
        this.secondStatField.setEditable(false);
        this.thirdStatField.setEditable(false);
        this.fourthStatField.setEditable(false);
        this.fifthStatField.setEditable(false);
        this.sixthStatField.setEditable(false);
    }//GEN-LAST:event_rollForScoresActionPerformed

    private void defaultArrayActionPerformed() {//GEN-FIRST:event_defaultArrayActionPerformed
        // TODO add your handling code here:
        this.rollStatsButton.setEnabled(false);
        this.firstStatLabel.setText("15");
        this.secondStatLabel.setText("14");
        this.thirdStatLabel.setText("13");
        this.fourthStatLabel.setText("12");
        this.fifthStatLabel.setText("10");
        this.sixthStatLabel.setText("8");
        this.newCharacter.setStatRolls(0, 15);
        this.newCharacter.setStatRolls(1, 14);
        this.newCharacter.setStatRolls(2, 13);
        this.newCharacter.setStatRolls(3, 12);
        this.newCharacter.setStatRolls(4, 10);
        this.newCharacter.setStatRolls(5, 8);
        this.firstStatField.setText("");
        this.secondStatField.setText("");
        this.thirdStatField.setText("");
        this.fourthStatField.setText("");
        this.fifthStatField.setText("");
        this.sixthStatField.setText("");
        this.firstStatField.setEditable(false);
        this.secondStatField.setEditable(false);
        this.thirdStatField.setEditable(false);
        this.fourthStatField.setEditable(false);
        this.fifthStatField.setEditable(false);
        this.sixthStatField.setEditable(false);
    }//GEN-LAST:event_defaultArrayActionPerformed

    private void manualEntryActionPerformed() {//GEN-FIRST:event_manualEntryActionPerformed
        // TODO add your handling code here:
        this.rollStatsButton.setEnabled(false);
        this.firstStatField.setEditable(true);
        this.secondStatField.setEditable(true);
        this.thirdStatField.setEditable(true);
        this.fourthStatField.setEditable(true);
        this.fifthStatField.setEditable(true);
        this.sixthStatField.setEditable(true);
        this.firstStatLabel.setText("-");
        this.secondStatLabel.setText("-");
        this.thirdStatLabel.setText("-");
        this.fourthStatLabel.setText("-");
        this.fifthStatLabel.setText("-");
        this.sixthStatLabel.setText("-");
    }//GEN-LAST:event_manualEntryActionPerformed

    private void raceListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_raceListValueChanged
        // TODO add your handling code here:
        JList source = (JList) evt.getSource();
        String selected = source.getSelectedValue().toString();
        raceLabel.setText(selected);
        switch (selected) {
            case "Hill Dwarf":
                raceStatLabel1.setText("Con +2");
                raceStatLabel2.setText("Wis +1");
                break;
            case "Mountain Dwarf":
                raceStatLabel1.setText("Con +2");
                raceStatLabel2.setText("Str +2");
                break;
            case "High Elf":
                raceStatLabel1.setText("Dex +2");
                raceStatLabel2.setText("Int +1");
                break;
            case "Wood Elf":
                raceStatLabel1.setText("Dex +2");
                raceStatLabel2.setText("Wis +1");
                break;
            case "Dark Elf (Drow)":
                raceStatLabel1.setText("Dex +2");
                raceStatLabel2.setText("Cha +1");
                break;
            case "Lightfoot Halfling":
                raceStatLabel1.setText("Dex +2");
                raceStatLabel2.setText("Cha +1");
                break;
            case "Stout Halfling":
                raceStatLabel1.setText("Dex +2");
                raceStatLabel2.setText("Con +1");
                break;
            case "Human":
                raceStatLabel1.setText("All +1");
                raceStatLabel2.setText("");
                break;
            case "Human (Variant)":
                raceStatLabel1.setText("Choose two +1");
                raceStatLabel2.setText("");
                break;
            case "Forest Gnome":
                raceStatLabel1.setText("Int +2");
                raceStatLabel2.setText("Dex +1");
                break;
            case "Rock Gnome":
                raceStatLabel1.setText("Int +2");
                raceStatLabel2.setText("Con +1");
                break;
            case "Half-Elf":
                raceStatLabel1.setText("Cha +2");
                raceStatLabel2.setText("Choose 2 +1");
                break;
            case "Half-Orc":
                raceStatLabel1.setText("Str +2");
                raceStatLabel2.setText("Con +1");
                break;
            case "Tiefling":
                raceStatLabel1.setText("Cha +2");
                raceStatLabel2.setText("Int +1");
                break;
            default:
                raceStatLabel1.setText("Str +2");
                raceStatLabel2.setText("Cha +1");
                break;
        }
    }//GEN-LAST:event_raceListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | UnsupportedLookAndFeelException | IllegalAccessException | InstantiationException ex) {
            java.util.logging.Logger.getLogger(CharacterCreatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CharacterCreatorUI().setVisible(true);
            }
        });
    }

    private JCheckBox abyssalCheck;
    private JCheckBox acidSplashSorcerer;
    private JCheckBox acidSplashWizard;
    private JCheckBox acidSplashWizard1;
    private JCheckBox acrobaticsCheck;
    private JCheckBox animalFriendshipBard;
    private JCheckBox animalHandlingCheck;
    private JCheckBox arcanaCheck;
    private JRadioButton arcaneFocusSorcerer;
    private JRadioButton arcaneFocusWarlock;
    private JRadioButton arcaneFocusWizard;
    private JRadioButton archFeyRadio;
    private JCheckBox armorOfAgathysWarlock;
    private JCheckBox armsOfHadarWarlock;
    private javax.swing.JLabel assignStat1;
    private javax.swing.JLabel assignStat2;
    private javax.swing.JLabel assignStat3;
    private javax.swing.JLabel assignStat4;
    private javax.swing.JLabel assignStat5;
    private javax.swing.JLabel assignStat6;
    private JCheckBox athleticsCheck;
    private JList backgroundList;
    private JCheckBox baneBard;
    private JRadioButton blackRadio;
    private JCheckBox bladeWardBard;
    private JCheckBox bladeWardSorcerer;
    private JCheckBox bladeWardWarlock;
    private JCheckBox bladeWardWizard;
    private JCheckBox bladeWardWizard1;
    private JRadioButton blueRadio;
    private JRadioButton brassRadio;
    private JRadioButton brewerSuppliesRadio;
    private JRadioButton bronzeRadio;
    private JRadioButton burglerPackRogue;
    private JCheckBox burningHandsSorcerer;
    private JComboBox abilityScore1;
    private JComboBox abilityScore2;
    private JComboBox abilityScore3;
    private JComboBox abilityScore4;
    private JComboBox abilityScore5;
    private JComboBox abilityScore6;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private JCheckBox celestialCheck;
    private JRadioButton cha1;
    private JRadioButton cha2;
    private JRadioButton cha3;
    private JRadioButton cha4;
    private JRadioButton cha5;
    private JRadioButton cha6;
    private JRadioButton chainMailCleric;
    private JRadioButton chainMailFighter;
    private javax.swing.JTextField characterNameField;
    private JCheckBox charmPersonBard;
    private JCheckBox charmPersonSorcerer;
    private JCheckBox charmPersonWarlock;
    private JCheckBox chillTouchSorcerer;
    private JCheckBox chillTouchWarlock;
    private JCheckBox chillTouchWizard;
    private JCheckBox chillTouchWizard1;
    private JCheckBox chromaticOrbSorcerer;
    private JList classList;
    private JRadioButton clericAnimalHandlingRadio;
    private JCheckBox clericArcanaCheck;
    private JCheckBox clericHistoryCheck;
    private JCheckBox clericNatureCheck;
    private JRadioButton clericNatureRadio;
    private JCheckBox clericReligionCheck;
    private JRadioButton clericSurvivalRadio;
    private JCheckBox colorSpraySorcerer;
    private JCheckBox commonCheck;
    private JRadioButton compWizard;
    private JRadioButton componentPouchSorcerer;
    private JRadioButton componentPouchWarlock;
    private JCheckBox comprehendLanguagesBard;
    private JCheckBox comprehendLanguagesSorcerer;
    private JCheckBox comprehendLanguagesWarlock;
    private JRadioButton con1;
    private JRadioButton con2;
    private JRadioButton con3;
    private JRadioButton con4;
    private JRadioButton con5;
    private JRadioButton con6;
    private JRadioButton copperRadio;
    private JCheckBox cureWoundsBard;
    private JRadioButton daggerWizard;
    private JCheckBox dancingLightsBard;
    private JCheckBox dancingLightsSorcerer;
    private JCheckBox dancingLightsWizard;
    private JCheckBox dancingLightsWizard1;
    private JCheckBox deceptionCheck;
    private JCheckBox deepspeechCheck;
    private JCheckBox detectMagicBard;
    private JCheckBox detectMagicSorcerer;
    private JRadioButton dex1;
    private JRadioButton dex2;
    private JRadioButton dex3;
    private JRadioButton dex4;
    private JRadioButton dex5;
    private JRadioButton dex6;
    private JRadioButton diplomatPackBard;
    private JCheckBox disguiseSelfBard;
    private JCheckBox disguiseSelfSorcerer;
    private JCheckBox dissonantWhispersBard;
    private JList domainList;
    private JRadioButton draconicBloodlineRadio;
    private JCheckBox draconicCheck;
    private JCheckBox druidcraftDruid;
    private JRadioButton dungeoneerPackFighter;
    private JRadioButton dungeoneerPackMonk;
    private JRadioButton dungeoneerPackRanger;
    private JRadioButton dungeoneerPackRogue;
    private JRadioButton dungeoneerPackSorcerer;
    private JRadioButton dungeoneerPackWarlock;
    private JCheckBox dwarvishCheck;
    private JCheckBox eldritchBlastWarlock;
    private JCheckBox elvishCheck;
    private JRadioButton entertainerPackBard;
    private JCheckBox expeditiousRetreatSorcerer;
    private JCheckBox expeditiousRetreatWarlock;
    private JList expertiseList1;
    private JList expertiseList2;
    private JRadioButton explorerPackCleric;
    private JRadioButton explorerPackFighter;
    private JRadioButton explorerPackPaladin;
    private JRadioButton explorerPackRanger;
    private JRadioButton explorerPackRogue;
    private JRadioButton explorerPackSorcerer;
    private JRadioButton explorerPackWizard;
    private JRadioButton explorersPackMonk;
    private JCheckBox faerieFireBard;
    private JCheckBox falseLifeSorcerer;
    private JList favoredEnemyList;
    private JCheckBox featherFallBard;
    private JCheckBox featherFallSorcerer;
    private JRadioButton fiendRadio;
    private javax.swing.JTextField fifthStatField;
    private javax.swing.JLabel fifthStatLabel;
    private JList fightingStyleList;
    private JButton finalizeButton;
    private JCheckBox fireBoltSorcerer;
    private JCheckBox fireBoltWizard;
    private JCheckBox fireBoltWizard1;
    private javax.swing.JTextField firstStatField;
    private javax.swing.JLabel firstStatLabel;
    private JCheckBox fogCloudSorcerer;
    private javax.swing.JTextField fourthStatField;
    private javax.swing.JLabel fourthStatLabel;
    private JCheckBox friendsBard;
    private JCheckBox friendsSorcerer;
    private JCheckBox friendsWarlock;
    private JCheckBox friendsWizard;
    private JCheckBox friendsWizard1;
    private JCheckBox giantCheck;
    private JCheckBox gnomishCheck;
    private JCheckBox goblinCheck;
    private JRadioButton goldRadio;
    private JRadioButton greatOldOneRadio;
    private JRadioButton greataxeBarbarian;
    private JRadioButton greenRadio;
    private JCheckBox guidanceCleric;
    private JCheckBox guidanceDruid;
    private JCheckBox halflingCheck;
    private JRadioButton handaxeBarbarian;
    private JRadioButton handaxeFighter;
    private JCheckBox healingWordBard;
    private JCheckBox hellishRebukeWarlock;
    private JCheckBox heroismBard;
    private JCheckBox hexWarlock;
    private JCheckBox historyCheck;
    private JCheckBox identifyBard;
    private JCheckBox illusoryScriptBard;
    private JCheckBox illusoryScriptWarlock;
    private JCheckBox infernalCheck;
    private JCheckBox insightCheck;
    private JRadioButton instrumentBard;
    private JList instrumentBardList;
    private JRadioButton int1;
    private JRadioButton int2;
    private JRadioButton int3;
    private JRadioButton int4;
    private JRadioButton int5;
    private JRadioButton int6;
    private JCheckBox intimidationCheck;
    private JCheckBox investigationCheck;
    private JRadioButton javelinPaladin;
    private JCheckBox jumpSorcerer;
    private javax.swing.JLabel languageAmountLabel;
    private JRadioButton leatherArmorCleric;
    private JRadioButton leatherArmorFighter;
    private JRadioButton leatherArmorRanger;
    private JCheckBox lightBard;
    private JCheckBox lightCleric;
    private JRadioButton lightCrossBowCleric;
    private JRadioButton lightCrossbowFighter;
    private JRadioButton lightCrossbowSorcerer;
    private JRadioButton lightCrossbowWarlock;
    private JCheckBox lightSorcerer;
    private JCheckBox lightWizard;
    private JCheckBox lightWizard1;
    private JCheckBox longstriderBard;
    private JRadioButton longswordBard;
    private JRadioButton luteBard;
    private JRadioButton maceCleric;
    private JCheckBox mageArmorSorcerer;
    private JCheckBox mageHandBard;
    private JCheckBox mageHandSorcerer;
    private JCheckBox mageHandWarlock;
    private JCheckBox mageHandWizard;
    private JCheckBox mageHandWizard1;
    private JCheckBox magicMissileSorcerer;
    private javax.swing.JPanel mainPanel;
    private JRadioButton manualEntry;
    private JRadioButton martialWeaponBarbarian;
    private JList martialWeaponBarbarianList;
    private JList martialWeaponFighterList1;
    private JList martialWeaponFighterList2;
    private JList martialWeaponFighterList3;
    private JRadioButton martialWeaponPaladin1;
    private JRadioButton martialWeaponPaladin2;
    private JList martialWeaponPaladinList1;
    private JList martialWeaponPaladinList2;
    private JList martialWeaponPaladinList3;
    private JRadioButton martialWeaponsFighter;
    private JRadioButton masonToolsRadio;
    private JCheckBox medicineCheck;
    private JCheckBox mendingBard;
    private JCheckBox mendingCleric;
    private JCheckBox mendingDruid;
    private JCheckBox mendingSorcerer;
    private JCheckBox mendingWizard;
    private JCheckBox mendingWizard1;
    private JCheckBox messageBard;
    private JCheckBox messageSorcerer;
    private JCheckBox messageWizard;
    private JCheckBox messageWizard1;
    private JCheckBox minorIllusionBard;
    private JCheckBox minorIllusionSorcerer;
    private JCheckBox minorIllusionWarlock;
    private JCheckBox minorIllusionWizard;
    private JCheckBox minorIllusionWizard1;
    private JCheckBox natureCheck;
    private JCheckBox orcCheck;
    private JCheckBox patronSpell1;
    private JCheckBox patronSpell2;
    private JCheckBox perceptionCheck;
    private JCheckBox performanceCheck;
    private JCheckBox persuasionCheck;
    private javax.swing.JTextField playerNameField;
    private JCheckBox poisonSprayDruid;
    private JCheckBox poisonSpraySorcerer;
    private JCheckBox poisonSprayWarlock;
    private JCheckBox poisonSprayWizard;
    private JCheckBox poisonSprayWizard1;
    private JCheckBox prestidigitationBard;
    private JCheckBox prestidigitationSorcerer;
    private JCheckBox prestidigitationWarlock;
    private JCheckBox prestidigitationWizard;
    private JCheckBox prestidigitationWizard1;
    private JRadioButton priestPackCleric;
    private JRadioButton priestPackPaladin;
    private JCheckBox primordialCheck;
    private JCheckBox produceFlameDruid;
    private javax.swing.JLabel profAmountLabel;
    private JCheckBox protectionWarlock;
    private JRadioButton quarterstaffWizard;
    private javax.swing.JLabel raceLabel;
    private JList raceList;
    private JList subRaceList;
    private javax.swing.JLabel raceStatLabel1;
    private javax.swing.JLabel raceStatLabel2;
    private javax.swing.JLabel raceStatLabel3;
    private javax.swing.JLabel raceStatLabel4;
    private JRadioButton rapierBard;
    private JRadioButton rapierRogue;
    private JCheckBox rayOfFrostSorcerer;
    private JCheckBox rayOfFrostWizard;
    private JCheckBox rayOfFrostWizard1;
    private JCheckBox rayOfSicknessSorcerer;
    private JRadioButton redRadio;
    private JCheckBox religionCheck;
    private JCheckBox resistanceCleric;
    private JCheckBox resistanceDruid;
    private JButton rollStatsButton;
    private JCheckBox sacredFlameCleric;
    private JButton saveCharacterFile;
    private JRadioButton scaleMailCleric;
    private JRadioButton scaleMailRanger;
    private JRadioButton scholarPackWarlock;
    private JRadioButton scholarPackWizard;
    private JRadioButton scimitarDruid;
    private javax.swing.JTextField secondStatField;
    private javax.swing.JLabel secondStatLabel;
    private JRadioButton shieldFighter;
    private JCheckBox shieldSorcerer;
    private JCheckBox shillelaghDruid;
    private JCheckBox shockingGraspSorcerer;
    private JCheckBox shockingGraspWizard;
    private JCheckBox shockingGraspWizard1;
    private JRadioButton shortbowRogue;
    private JRadioButton shortswordMonk;
    private JRadioButton shortswordRogue;
    private JRadioButton shortswordRogue2;
    private JRadioButton shortswordsRanger;
    private JCheckBox silentImageBard;
    private JCheckBox silentImageSorcerer;
    private JRadioButton silverRadio;
    private JRadioButton simpleWeaponBarbarian;
    private JList simpleWeaponBarbarianList;
    private JRadioButton simpleWeaponBard;
    private JList simpleWeaponBardList;
    private JRadioButton simpleWeaponCleric;
    private JList simpleWeaponClericList;
    private JRadioButton simpleWeaponDruid1;
    private JRadioButton simpleWeaponDruid2;
    private JList simpleWeaponDruidList1;
    private JList simpleWeaponDruidList2;
    private JRadioButton simpleWeaponMonk;
    private JList simpleWeaponMonkList;
    private JRadioButton simpleWeaponPaladin;
    private JList simpleWeaponPaladinList;
    private JList simpleWeaponRangerList1;
    private JList simpleWeaponRangerList2;
    private JRadioButton simpleWeaponSorcerer;
    private JList simpleWeaponSorcererList;
    private JRadioButton simpleWeaponWarlock;
    private JList simpleWeaponWarlockList;
    private JRadioButton simpleWeaponsRanger;
    private javax.swing.JTextField sixthStatField;
    private javax.swing.JLabel sixthStatLabel;
    private JCheckBox sleepBard;
    private JCheckBox sleightOfHandCheck;
    private JRadioButton smithToolRadio;
    private JCheckBox spareTheDyingCleric;
    private JCheckBox speakWithAnimalsBard;
    private JCheckBox stealthCheck;
    private JRadioButton str1;
    private JRadioButton str2;
    private JRadioButton str3;
    private JRadioButton str4;
    private JRadioButton str5;
    private JRadioButton str6;
    private JCheckBox survivalCheck;
    private JCheckBox sylvanCheck;
    private JCheckBox tashasHideousLaughterBard;
    private JCheckBox thaumaturgyCleric;
    private javax.swing.JTextField thirdStatField;
    private javax.swing.JLabel thirdStatLabel;
    private JCheckBox thornWhipDruid;
    private JCheckBox thunderwaveBard;
    private JCheckBox trueStrikeBard;
    private JCheckBox trueStrikeSorcerer;
    private JCheckBox trueStrikeWarlock;
    private JCheckBox trueStrikeWizard;
    private JCheckBox trueStrikeWizard1;
    private JCheckBox undercommonCheck;
    private JCheckBox unseenServantBard;
    private JCheckBox unseenServantWarlock;
    private JCheckBox variantChaCheck;
    private JCheckBox variantConCheck;
    private JCheckBox variantDexCheck;
    private JCheckBox variantIntCheck;
    private JCheckBox variantStrCheck;
    private JCheckBox variantWisCheck;
    private JCheckBox viciousMockeryBard;
    private JRadioButton warhammerCleric;
    private JRadioButton whiteRadio;
    private JRadioButton wildMagicRadio;
    private JRadioButton wis1;
    private JRadioButton wis2;
    private JRadioButton wis3;
    private JRadioButton wis4;
    private JRadioButton wis5;
    private JRadioButton wis6;
    private JCheckBox witchBoltWarlock;
    private JRadioButton woodenShieldDruid;
    // End of variables declaration//GEN-END:variables
}
